!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALT	kbd.h	11;"	d
AS	Makefile	/^AS = $(TOOLPREFIX)gas$/;"	m
ASFLAGS	Makefile	/^ASFLAGS = -m32 -gdwarf-2 -Wa,-divide$/;"	m
ASSERT	lapic.c	23;"	d	file:
Align	umalloc.c	/^typedef long Align;$/;"	t	file:
BACK	sh.c	12;"	d	file:
BACKSPACE	console.c	125;"	d	file:
BBLOCK	fs.h	46;"	d
BCAST	lapic.c	26;"	d	file:
BIG	usertests.asm	/^#define BIG (100*1024*1024)$/;"	d
BIG	usertests.c	1354;"	d	file:
BPB	fs.h	43;"	d
BSIZE	fs.h	12;"	d
BUSY	lapic.c	27;"	d	file:
B_BUSY	buf.h	10;"	d
B_DIRTY	buf.h	12;"	d
B_VALID	buf.h	11;"	d
C	console.c	185;"	d	file:
C	kbd.h	32;"	d
C	kernel.asm	/^#define C(x)  ((x)-'@')  \/\/ Control-x$/;"	d
CAPSLOCK	kbd.h	13;"	d
CC	Makefile	/^CC = $(TOOLPREFIX)gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -Wall -MD -ggdb -m32 -Werror -fno-omit-frame-pointer$/;"	m
COM1	uart.c	14;"	d	file:
CONSOLE	file.h	38;"	d
CPUS	Makefile	/^CPUS := 1$/;"	m
CR0_AM	mmu.h	35;"	d
CR0_CD	mmu.h	37;"	d
CR0_EM	mmu.h	30;"	d
CR0_ET	mmu.h	32;"	d
CR0_MP	mmu.h	29;"	d
CR0_NE	mmu.h	33;"	d
CR0_NW	mmu.h	36;"	d
CR0_PE	mmu.h	28;"	d
CR0_PG	mmu.h	38;"	d
CR0_TS	mmu.h	31;"	d
CR0_WP	mmu.h	34;"	d
CR4_PSE	mmu.h	40;"	d
CRTPORT	console.c	126;"	d	file:
CRTPORT	kernel.asm	/^#define CRTPORT 0x3d4$/;"	d
CTL	kbd.h	10;"	d
DEASSERT	lapic.c	24;"	d	file:
DELIVS	lapic.c	22;"	d	file:
DEVSPACE	memlayout.h	5;"	d
DIRSIZ	fs.h	49;"	d
DPL_USER	mmu.h	79;"	d
Disassembly	bootblock.asm	/^Disassembly of section .text:$/;"	l
Disassembly	cat.asm	/^Disassembly of section .text:$/;"	l
Disassembly	echo.asm	/^Disassembly of section .text:$/;"	l
Disassembly	entryother.asm	/^Disassembly of section .text:$/;"	l
Disassembly	forktest.asm	/^Disassembly of section .text:$/;"	l
Disassembly	grep.asm	/^Disassembly of section .text:$/;"	l
Disassembly	init.asm	/^Disassembly of section .text:$/;"	l
Disassembly	initcode.asm	/^Disassembly of section .text:$/;"	l
Disassembly	kernel.asm	/^Disassembly of section .text:$/;"	l
Disassembly	kill.asm	/^Disassembly of section .text:$/;"	l
Disassembly	ln.asm	/^Disassembly of section .text:$/;"	l
Disassembly	ls.asm	/^Disassembly of section .text:$/;"	l
Disassembly	mkdir.asm	/^Disassembly of section .text:$/;"	l
Disassembly	rm.asm	/^Disassembly of section .text:$/;"	l
Disassembly	sh.asm	/^Disassembly of section .text:$/;"	l
Disassembly	stressfs.asm	/^Disassembly of section .text:$/;"	l
Disassembly	usertests.asm	/^Disassembly of section .text:$/;"	l
Disassembly	wc.asm	/^Disassembly of section .text:$/;"	l
Disassembly	zombie.asm	/^Disassembly of section .text:$/;"	l
E0ESC	kbd.h	17;"	d
ELF_MAGIC	elf.h	3;"	d
ELF_PROG_FLAG_EXEC	elf.h	40;"	d
ELF_PROG_FLAG_READ	elf.h	42;"	d
ELF_PROG_FLAG_WRITE	elf.h	41;"	d
ELF_PROG_LOAD	elf.h	37;"	d
EMBRYO	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
ENABLE	lapic.c	17;"	d	file:
EOI	lapic.c	15;"	d	file:
ERROR	lapic.c	36;"	d	file:
ESR	lapic.c	18;"	d	file:
EXEC	sh.c	8;"	d	file:
EXTMEM	memlayout.h	3;"	d
EXTRA	Makefile	/^EXTRA=\\$/;"	m
FD_INODE	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anon3
FD_NONE	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anon3
FD_PIPE	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anon3
FILES	Makefile	/^FILES = $(shell grep -v '^\\#' runoff.list)$/;"	m
FIXED	lapic.c	28;"	d	file:
FL_AC	mmu.h	22;"	d
FL_AF	mmu.h	7;"	d
FL_CF	mmu.h	5;"	d
FL_DF	mmu.h	12;"	d
FL_ID	mmu.h	25;"	d
FL_IF	mmu.h	11;"	d
FL_IOPL_0	mmu.h	15;"	d
FL_IOPL_1	mmu.h	16;"	d
FL_IOPL_2	mmu.h	17;"	d
FL_IOPL_3	mmu.h	18;"	d
FL_IOPL_MASK	mmu.h	14;"	d
FL_NT	mmu.h	19;"	d
FL_OF	mmu.h	13;"	d
FL_PF	mmu.h	6;"	d
FL_RF	mmu.h	20;"	d
FL_SF	mmu.h	9;"	d
FL_TF	mmu.h	10;"	d
FL_VIF	mmu.h	23;"	d
FL_VIP	mmu.h	24;"	d
FL_VM	mmu.h	21;"	d
FL_ZF	mmu.h	8;"	d
GDBPORT	Makefile	/^GDBPORT = $(shell expr `id -u` % 5000 + 25000)$/;"	m
Header	umalloc.c	/^typedef union header Header;$/;"	t	typeref:union:header	file:
IBLOCK	fs.h	40;"	d
ICRHI	lapic.c	29;"	d	file:
ICRLO	lapic.c	19;"	d	file:
ID	lapic.c	12;"	d	file:
IDE_BSY	ide.c	14;"	d	file:
IDE_CMD_READ	ide.c	19;"	d	file:
IDE_CMD_WRITE	ide.c	20;"	d	file:
IDE_DF	ide.c	16;"	d	file:
IDE_DRDY	ide.c	15;"	d	file:
IDE_ERR	ide.c	17;"	d	file:
INIT	lapic.c	20;"	d	file:
INPUT_BUF	console.c	176;"	d	file:
INT_ACTIVELOW	ioapic.c	22;"	d	file:
INT_DISABLED	ioapic.c	20;"	d	file:
INT_LEVEL	ioapic.c	21;"	d	file:
INT_LOGICAL	ioapic.c	23;"	d	file:
IOAPIC	ioapic.c	9;"	d	file:
IO_PIC1	picirq.c	8;"	d	file:
IO_PIC2	picirq.c	9;"	d	file:
IO_RTC	lapic.c	133;"	d	file:
IO_TIMER1	timer.c	10;"	d	file:
IPB	fs.h	37;"	d
IRQ_COM1	traps.h	34;"	d
IRQ_ERROR	traps.h	36;"	d
IRQ_IDE	traps.h	35;"	d
IRQ_KBD	traps.h	33;"	d
IRQ_SLAVE	picirq.c	11;"	d	file:
IRQ_SPURIOUS	traps.h	37;"	d
IRQ_TIMER	traps.h	32;"	d
I_BUSY	file.h	26;"	d
I_VALID	file.h	27;"	d
KBDATAP	kbd.h	5;"	d
KBSTATP	kbd.h	3;"	d
KBS_DIB	kbd.h	4;"	d
KERNBASE	kernel.asm	/^#define KERNBASE 0x80000000         \/\/ First kernel virtual address$/;"	d
KERNBASE	memlayout.h	8;"	d
KERNLINK	kernel.asm	/^#define KERNLINK (KERNBASE+EXTMEM)  \/\/ Address where kernel is linked$/;"	d
KERNLINK	memlayout.h	9;"	d
KEY_DEL	kbd.h	29;"	d
KEY_DN	kbd.h	23;"	d
KEY_END	kbd.h	21;"	d
KEY_HOME	kbd.h	20;"	d
KEY_INS	kbd.h	28;"	d
KEY_LF	kbd.h	24;"	d
KEY_PGDN	kbd.h	27;"	d
KEY_PGUP	kbd.h	26;"	d
KEY_RT	kbd.h	25;"	d
KEY_UP	kbd.h	22;"	d
KSTACKSIZE	param.h	2;"	d
LD	Makefile	/^LD = $(TOOLPREFIX)ld$/;"	m
LEVEL	lapic.c	25;"	d	file:
LINT0	lapic.c	34;"	d	file:
LINT1	lapic.c	35;"	d	file:
LIST	sh.c	11;"	d	file:
LOGSIZE	param.h	11;"	d
MASKED	lapic.c	37;"	d	file:
MAXARG	param.h	10;"	d
MAXARGS	sh.c	14;"	d	file:
MAXFILE	fs.h	24;"	d
MEMFSOBJS	Makefile	/^MEMFSOBJS = $(filter-out ide.o,$(OBJS)) memide.o$/;"	m
MPBOOT	mp.h	34;"	d
MPBUS	mp.h	50;"	d
MPIOAPIC	mp.h	51;"	d
MPIOINTR	mp.h	52;"	d
MPLINTR	mp.h	53;"	d
MPPROC	mp.h	49;"	d
N	forktest.asm	/^#define N  1000$/;"	d
N	forktest.c	8;"	d	file:
NBUF	param.h	6;"	d
NCPU	param.h	3;"	d
NDEV	param.h	8;"	d
NDIRECT	fs.h	22;"	d
NELEM	defs.h	181;"	d
NFILE	param.h	5;"	d
NINDIRECT	fs.h	23;"	d
NINODE	param.h	7;"	d
NO	kbd.h	7;"	d
NOFILE	param.h	4;"	d
NPDENTRIES	mmu.h	121;"	d
NPROC	param.h	1;"	d
NPTENTRIES	mmu.h	122;"	d
NSEGS	proc.h	2;"	d
NUMLOCK	kbd.h	14;"	d
OBJCOPY	Makefile	/^OBJCOPY = $(TOOLPREFIX)objcopy$/;"	m
OBJDUMP	Makefile	/^OBJDUMP = $(TOOLPREFIX)objdump$/;"	m
OBJS	Makefile	/^OBJS = \\$/;"	m
O_CREATE	fcntl.h	4;"	d
O_RDONLY	fcntl.h	1;"	d
O_RDWR	fcntl.h	3;"	d
O_WRONLY	fcntl.h	2;"	d
P2V	memlayout.h	19;"	d
P2V_WO	memlayout.h	22;"	d
PCINT	lapic.c	33;"	d	file:
PDX	mmu.h	112;"	d
PDXSHIFT	mmu.h	127;"	d
PERIODIC	lapic.c	32;"	d	file:
PGADDR	mmu.h	118;"	d
PGROUNDDOWN	mmu.h	130;"	d
PGROUNDUP	mmu.h	129;"	d
PGSHIFT	mmu.h	125;"	d
PGSIZE	mmu.h	123;"	d
PHYSTOP	memlayout.h	4;"	d
PIPE	sh.c	10;"	d	file:
PIPESIZE	pipe.c	10;"	d	file:
PRINT	Makefile	/^PRINT = runoff.list runoff.spec README toc.hdr toc.ftr $(FILES)$/;"	m
PTE_A	mmu.h	138;"	d
PTE_ADDR	mmu.h	144;"	d
PTE_D	mmu.h	139;"	d
PTE_FLAGS	mmu.h	145;"	d
PTE_MBZ	mmu.h	141;"	d
PTE_P	mmu.h	133;"	d
PTE_PCD	mmu.h	137;"	d
PTE_PS	mmu.h	140;"	d
PTE_PWT	mmu.h	136;"	d
PTE_U	mmu.h	135;"	d
PTE_W	mmu.h	134;"	d
PTX	mmu.h	115;"	d
PTXSHIFT	mmu.h	126;"	d
QEMU	Makefile	/^QEMU = $(shell if which qemu > \/dev\/null; \\$/;"	m
QEMUGDB	Makefile	/^QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \\$/;"	m
QEMUOPTS	Makefile	/^QEMUOPTS = -hdb fs.img xv6.img -smp $(CPUS) -m 512 $(QEMUEXTRA)$/;"	m
REDIR	sh.c	9;"	d	file:
REG_ID	ioapic.c	11;"	d	file:
REG_TABLE	ioapic.c	13;"	d	file:
REG_VER	ioapic.c	12;"	d	file:
ROOTDEV	param.h	9;"	d
ROOTINO	fs.h	11;"	d
RUNNABLE	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
RUNNING	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
SCROLLLOCK	kbd.h	15;"	d
SECTSIZE	bootmain.c	13;"	d	file:
SEG	mmu.h	69;"	d
SEG16	mmu.h	73;"	d
SEG_ASM	asm.h	11;"	d
SEG_KCODE	mmu.h	42;"	d
SEG_KCPU	mmu.h	44;"	d
SEG_KDATA	mmu.h	43;"	d
SEG_NULLASM	asm.h	5;"	d
SEG_TSS	mmu.h	47;"	d
SEG_UCODE	mmu.h	45;"	d
SEG_UDATA	mmu.h	46;"	d
SETGATE	mmu.h	213;"	d
SHIFT	kbd.h	9;"	d
SLEEPING	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
STARTUP	lapic.c	21;"	d	file:
STA_A	asm.h	21;"	d
STA_A	mmu.h	87;"	d
STA_C	asm.h	18;"	d
STA_C	mmu.h	84;"	d
STA_E	asm.h	17;"	d
STA_E	mmu.h	83;"	d
STA_R	asm.h	20;"	d
STA_R	mmu.h	86;"	d
STA_W	asm.h	19;"	d
STA_W	mmu.h	85;"	d
STA_X	asm.h	16;"	d
STA_X	mmu.h	82;"	d
STS_CG16	mmu.h	93;"	d
STS_CG32	mmu.h	99;"	d
STS_IG16	mmu.h	95;"	d
STS_IG32	mmu.h	100;"	d
STS_LDT	mmu.h	91;"	d
STS_T16A	mmu.h	90;"	d
STS_T16B	mmu.h	92;"	d
STS_T32A	mmu.h	97;"	d
STS_T32B	mmu.h	98;"	d
STS_TG	mmu.h	94;"	d
STS_TG16	mmu.h	96;"	d
STS_TG32	mmu.h	101;"	d
SVR	lapic.c	16;"	d	file:
SYSCALL	usys.S	/^#define SYSCALL(name) \\$/;"	d
SYS_chdir	syscall.h	10;"	d
SYS_close	syscall.h	22;"	d
SYS_dup	syscall.h	11;"	d
SYS_exec	syscall.h	8;"	d
SYS_exit	syscall.h	3;"	d
SYS_fork	syscall.h	2;"	d
SYS_fstat	syscall.h	9;"	d
SYS_getpid	syscall.h	12;"	d
SYS_kill	syscall.h	7;"	d
SYS_link	syscall.h	20;"	d
SYS_mkdir	syscall.h	21;"	d
SYS_mknod	syscall.h	18;"	d
SYS_open	syscall.h	16;"	d
SYS_pipe	syscall.h	5;"	d
SYS_read	syscall.h	6;"	d
SYS_sbrk	syscall.h	13;"	d
SYS_sleep	syscall.h	14;"	d
SYS_unlink	syscall.h	19;"	d
SYS_uptime	syscall.h	15;"	d
SYS_wait	syscall.h	4;"	d
SYS_write	syscall.h	17;"	d
TCCR	lapic.c	39;"	d	file:
TDCR	lapic.c	40;"	d	file:
TICR	lapic.c	38;"	d	file:
TIMER	lapic.c	30;"	d	file:
TIMER_16BIT	kernel.asm	/^#define TIMER_16BIT     0x30    \/\/ r\/w counter 16 bits, LSB first$/;"	d
TIMER_16BIT	timer.c	22;"	d	file:
TIMER_DIV	timer.c	17;"	d	file:
TIMER_FREQ	timer.c	16;"	d	file:
TIMER_MODE	timer.c	19;"	d	file:
TIMER_RATEGEN	kernel.asm	/^#define TIMER_RATEGEN   0x04    \/\/ mode 2, rate generator$/;"	d
TIMER_RATEGEN	timer.c	21;"	d	file:
TIMER_SEL0	timer.c	20;"	d	file:
TOOLPREFIX	Makefile	/^TOOLPREFIX := $(shell if i386-jos-elf-objdump -i 2>&1 | grep '^elf32-i386$$' >\/dev\/null 2>&1; \\$/;"	m
TPR	lapic.c	14;"	d	file:
T_ALIGN	traps.h	21;"	d
T_BOUND	traps.h	9;"	d
T_BRKPT	traps.h	7;"	d
T_DBLFLT	traps.h	12;"	d
T_DEBUG	traps.h	5;"	d
T_DEFAULT	traps.h	28;"	d
T_DEV	stat.h	3;"	d
T_DEVICE	traps.h	11;"	d
T_DIR	stat.h	1;"	d
T_DIVIDE	traps.h	4;"	d
T_FILE	stat.h	2;"	d
T_FPERR	traps.h	20;"	d
T_GPFLT	traps.h	17;"	d
T_ILLOP	traps.h	10;"	d
T_IRQ0	traps.h	30;"	d
T_MCHK	traps.h	22;"	d
T_NMI	traps.h	6;"	d
T_OFLOW	traps.h	8;"	d
T_PGFLT	traps.h	18;"	d
T_SEGNP	traps.h	15;"	d
T_SIMDERR	traps.h	23;"	d
T_STACK	traps.h	16;"	d
T_SYSCALL	traps.h	27;"	d
T_TSS	traps.h	14;"	d
ULIB	Makefile	/^ULIB = ulib.o usys.o printf.o umalloc.o$/;"	m
UNUSED	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
UPROGS	Makefile	/^UPROGS=\\$/;"	m
V2P	memlayout.h	18;"	d
V2P_WO	memlayout.h	21;"	d
VER	lapic.c	13;"	d	file:
X1	lapic.c	31;"	d	file:
ZOMBIE	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
_cat	cat.asm	/^_cat:     file format elf32-i386$/;"	l
_echo	echo.asm	/^_echo:     file format elf32-i386$/;"	l
_forktest	forktest.asm	/^_forktest:     file format elf32-i386$/;"	l
_grep	grep.asm	/^_grep:     file format elf32-i386$/;"	l
_init	init.asm	/^_init:     file format elf32-i386$/;"	l
_kill	kill.asm	/^_kill:     file format elf32-i386$/;"	l
_ln	ln.asm	/^_ln:     file format elf32-i386$/;"	l
_ls	ls.asm	/^_ls:     file format elf32-i386$/;"	l
_mkdir	mkdir.asm	/^_mkdir:     file format elf32-i386$/;"	l
_rm	rm.asm	/^_rm:     file format elf32-i386$/;"	l
_sh	sh.asm	/^_sh:     file format elf32-i386$/;"	l
_start	entry.S	/^_start = V2P_WO(entry)$/;"	d
_stressfs	stressfs.asm	/^_stressfs:     file format elf32-i386$/;"	l
_usertests	usertests.asm	/^_usertests:     file format elf32-i386$/;"	l
_wc	wc.asm	/^_wc:     file format elf32-i386$/;"	l
_zombie	zombie.asm	/^_zombie:     file format elf32-i386$/;"	l
a	initcode.asm	/^   a:	6a 00                	push   $0x0$/;"	l
a	kernel.asm	/^    a = (uint*)bp->data;$/;"	d
a	kernel.asm	/^  a = (char*)PGROUNDDOWN((uint)va);$/;"	d
a	kernel.asm	/^  a = PGROUNDUP(newsz);$/;"	d
a	kernel.asm	/^  a = PGROUNDUP(oldsz);$/;"	d
a	ls.asm	/^   a:	89 04 24             	mov    %eax,(%esp)$/;"	l
a	sh.asm	/^       a:	75 05                	jne    11 <runcmd+0x11>$/;"	l
a	usertests.asm	/^    a = b + 1;$/;"	d
a	usertests.asm	/^  a = sbrk(0);$/;"	d
a0	cat.asm	/^  a0:	01 d0                	add    %edx,%eax$/;"	l
a0	forktest.asm	/^  a0:	e8 e0 02 00 00       	call   385 <wait>$/;"	l
a0	ls.asm	/^  a0:	e8 71 03 00 00       	call   416 <memset>$/;"	l
a0	sh.asm	/^      a0:	89 54 24 04          	mov    %edx,0x4(%esp)$/;"	l
a0	stressfs.asm	/^  a0:	e8 f6 04 00 00       	call   59b <printf>$/;"	l
a0	usertests.asm	/^      a0:	00 $/;"	l
a0	wc.asm	/^  a0:	e8 b4 03 00 00       	call   459 <read>$/;"	l
a01	sh.asm	/^     a01:	83 ec 28             	sub    $0x28,%esp$/;"	l
a01	usertests.asm	/^     a01:	e8 06 32 00 00       	call   3c0c <fork>$/;"	l
a02	ls.asm	/^ a02:	75 07                	jne    a0b <morecore+0x34>$/;"	l
a03	grep.asm	/^ a03:	eb 22                	jmp    a27 <morecore+0x56>$/;"	l
a04	ls.asm	/^ a04:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
a04	sh.asm	/^     a04:	c7 44 24 08 53 15 00 	movl   $0x1553,0x8(%esp)$/;"	l
a05	grep.asm	/^ a05:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a06	usertests.asm	/^     a06:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
a08	grep.asm	/^ a08:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
a09	ls.asm	/^ a09:	eb 22                	jmp    a2d <morecore+0x56>$/;"	l
a09	usertests.asm	/^     a09:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
a0b	grep.asm	/^ a0b:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
a0b	ls.asm	/^ a0b:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a0b	sh.asm	/^     a0b:	00 $/;"	l
a0c	sh.asm	/^     a0c:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
a0d	usertests.asm	/^     a0d:	79 16                	jns    a25 <exitwait+0x33>$/;"	l
a0e	grep.asm	/^ a0e:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
a0e	ls.asm	/^ a0e:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
a0f	sh.asm	/^     a0f:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
a0f	usertests.asm	/^     a0f:	c7 44 24 04 4d 45 00 	movl   $0x454d,0x4(%esp)$/;"	l
a1	echo.asm	/^  a1:	8d 50 01             	lea    0x1(%eax),%edx$/;"	l
a1	init.asm	/^  a1:	e8 d1 02 00 00       	call   377 <exit>$/;"	l
a1	ln.asm	/^  a1:	83 ec 10             	sub    $0x10,%esp$/;"	l
a1	mkdir.asm	/^  a1:	89 d1                	mov    %edx,%ecx$/;"	l
a1	rm.asm	/^  a1:	89 d1                	mov    %edx,%ecx$/;"	l
a1	usertests.asm	/^      a1:	89 04 24             	mov    %eax,(%esp)$/;"	l
a11	grep.asm	/^ a11:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
a11	ls.asm	/^ a11:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
a13	sh.asm	/^     a13:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
a14	grep.asm	/^ a14:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
a14	ls.asm	/^ a14:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
a16	sh.asm	/^     a16:	89 04 24             	mov    %eax,(%esp)$/;"	l
a16	usertests.asm	/^     a16:	00 $/;"	l
a17	grep.asm	/^ a17:	83 c0 08             	add    $0x8,%eax$/;"	l
a17	ls.asm	/^ a17:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
a17	usertests.asm	/^     a17:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
a19	sh.asm	/^     a19:	e8 5f fc ff ff       	call   67d <peek>$/;"	l
a1a	grep.asm	/^ a1a:	89 04 24             	mov    %eax,(%esp)$/;"	l
a1a	ls.asm	/^ a1a:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
a1d	grep.asm	/^ a1d:	e8 ce fe ff ff       	call   8f0 <free>$/;"	l
a1d	ls.asm	/^ a1d:	83 c0 08             	add    $0x8,%eax$/;"	l
a1e	sh.asm	/^     a1e:	85 c0                	test   %eax,%eax$/;"	l
a1e	usertests.asm	/^     a1e:	e8 71 33 00 00       	call   3d94 <printf>$/;"	l
a2	cat.asm	/^  a2:	8b 00                	mov    (%eax),%eax$/;"	l
a2	grep.asm	/^  a2:	7e 29                	jle    cd <grep+0xcd>$/;"	l
a2	kill.asm	/^  a2:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
a2	zombie.asm	/^  a2:	0f b6 00             	movzbl (%eax),%eax$/;"	l
a20	ls.asm	/^ a20:	89 04 24             	mov    %eax,(%esp)$/;"	l
a20	sh.asm	/^     a20:	75 0c                	jne    a2e <parseblock+0x30>$/;"	l
a22	grep.asm	/^ a22:	a1 48 0e 00 00       	mov    0xe48,%eax$/;"	l
a22	sh.asm	/^     a22:	c7 04 24 55 15 00 00 	movl   $0x1555,(%esp)$/;"	l
a23	ls.asm	/^ a23:	e8 ce fe ff ff       	call   8f6 <free>$/;"	l
a23	usertests.asm	/^     a23:	eb 49                	jmp    a6e <exitwait+0x7c>$/;"	l
a25	usertests.asm	/^     a25:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
a27	grep.asm	/^ a27:	c9                   	leave  $/;"	l
a28	grep.asm	/^ a28:	c3                   	ret    $/;"	l
a28	ls.asm	/^ a28:	a1 24 0e 00 00       	mov    0xe24,%eax$/;"	l
a29	grep.asm	/^ a29:	55                   	push   %ebp$/;"	l
a29	sh.asm	/^     a29:	e8 29 f9 ff ff       	call   357 <panic>$/;"	l
a29	usertests.asm	/^     a29:	74 20                	je     a4b <exitwait+0x59>$/;"	l
a2a	grep.asm	/^ a2a:	89 e5                	mov    %esp,%ebp$/;"	l
a2b	usertests.asm	/^     a2b:	e8 ec 31 00 00       	call   3c1c <wait>$/;"	l
a2c	grep.asm	/^ a2c:	83 ec 28             	sub    $0x28,%esp$/;"	l
a2d	ls.asm	/^ a2d:	c9                   	leave  $/;"	l
a2e	ls.asm	/^ a2e:	c3                   	ret    $/;"	l
a2e	sh.asm	/^     a2e:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)$/;"	l
a2f	grep.asm	/^ a2f:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
a2f	ls.asm	/^ a2f:	55                   	push   %ebp$/;"	l
a3	mkdir.asm	/^  a3:	fc                   	cld    $/;"	l
a3	rm.asm	/^  a3:	fc                   	cld    $/;"	l
a30	ls.asm	/^ a30:	89 e5                	mov    %esp,%ebp$/;"	l
a30	usertests.asm	/^     a30:	3b 45 f0             	cmp    -0x10(%ebp),%eax$/;"	l
a32	grep.asm	/^ a32:	83 c0 07             	add    $0x7,%eax$/;"	l
a32	ls.asm	/^ a32:	83 ec 28             	sub    $0x28,%esp$/;"	l
a33	usertests.asm	/^     a33:	74 1b                	je     a50 <exitwait+0x5e>$/;"	l
a35	grep.asm	/^ a35:	c1 e8 03             	shr    $0x3,%eax$/;"	l
a35	ls.asm	/^ a35:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
a35	sh.asm	/^     a35:	00 $/;"	l
a35	usertests.asm	/^     a35:	c7 44 24 04 5a 45 00 	movl   $0x455a,0x4(%esp)$/;"	l
a36	sh.asm	/^     a36:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)$/;"	l
a38	grep.asm	/^ a38:	83 c0 01             	add    $0x1,%eax$/;"	l
a38	ls.asm	/^ a38:	83 c0 07             	add    $0x7,%eax$/;"	l
a3b	grep.asm	/^ a3b:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
a3b	ls.asm	/^ a3b:	c1 e8 03             	shr    $0x3,%eax$/;"	l
a3c	usertests.asm	/^     a3c:	00 $/;"	l
a3d	sh.asm	/^     a3d:	00 $/;"	l
a3d	usertests.asm	/^     a3d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
a3e	grep.asm	/^ a3e:	a1 48 0e 00 00       	mov    0xe48,%eax$/;"	l
a3e	ls.asm	/^ a3e:	83 c0 01             	add    $0x1,%eax$/;"	l
a3e	sh.asm	/^     a3e:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
a4	cat.asm	/^  a4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)$/;"	l
a4	echo.asm	/^  a4:	89 55 08             	mov    %edx,0x8(%ebp)$/;"	l
a4	grep.asm	/^  a4:	ba 60 0e 00 00       	mov    $0xe60,%edx$/;"	l
a4	ln.asm	/^  a4:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
a4	mkdir.asm	/^  a4:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
a4	rm.asm	/^  a4:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
a4	sh.asm	/^      a4:	89 04 24             	mov    %eax,(%esp)$/;"	l
a4	usertests.asm	/^      a4:	e8 eb 3c 00 00       	call   3d94 <printf>$/;"	l
a41	ls.asm	/^ a41:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
a41	sh.asm	/^     a41:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
a43	grep.asm	/^ a43:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
a44	ls.asm	/^ a44:	a1 24 0e 00 00       	mov    0xe24,%eax$/;"	l
a44	usertests.asm	/^     a44:	e8 4b 33 00 00       	call   3d94 <printf>$/;"	l
a45	sh.asm	/^     a45:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
a46	grep.asm	/^ a46:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
a48	sh.asm	/^     a48:	89 04 24             	mov    %eax,(%esp)$/;"	l
a49	ls.asm	/^ a49:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
a49	usertests.asm	/^     a49:	eb 23                	jmp    a6e <exitwait+0x7c>$/;"	l
a4a	grep.asm	/^ a4a:	75 23                	jne    a6f <malloc+0x46>$/;"	l
a4b	sh.asm	/^     a4b:	e8 e2 fa ff ff       	call   532 <gettoken>$/;"	l
a4b	usertests.asm	/^     a4b:	e8 c4 31 00 00       	call   3c14 <exit>$/;"	l
a4c	grep.asm	/^ a4c:	c7 45 f0 40 0e 00 00 	movl   $0xe40,-0x10(%ebp)$/;"	l
a4c	ls.asm	/^ a4c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
a5	forktest.asm	/^  a5:	85 c0                	test   %eax,%eax$/;"	l
a5	kill.asm	/^  a5:	8d 4a 01             	lea    0x1(%edx),%ecx$/;"	l
a5	ls.asm	/^  a5:	b8 0c 0e 00 00       	mov    $0xe0c,%eax$/;"	l
a5	stressfs.asm	/^  a5:	0f b6 84 24 26 02 00 	movzbl 0x226(%esp),%eax$/;"	l
a5	wc.asm	/^  a5:	89 45 e0             	mov    %eax,-0x20(%ebp)$/;"	l
a5	zombie.asm	/^  a5:	0f b6 d0             	movzbl %al,%edx$/;"	l
a50	ls.asm	/^ a50:	75 23                	jne    a75 <malloc+0x46>$/;"	l
a50	sh.asm	/^     a50:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
a50	usertests.asm	/^     a50:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)$/;"	l
a52	ls.asm	/^ a52:	c7 45 f0 1c 0e 00 00 	movl   $0xe1c,-0x10(%ebp)$/;"	l
a53	grep.asm	/^ a53:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
a53	sh.asm	/^     a53:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
a54	usertests.asm	/^     a54:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)$/;"	l
a56	grep.asm	/^ a56:	a3 48 0e 00 00       	mov    %eax,0xe48$/;"	l
a57	sh.asm	/^     a57:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
a58	usertests.asm	/^     a58:	7e a7                	jle    a01 <exitwait+0xf>$/;"	l
a59	ls.asm	/^ a59:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
a5a	sh.asm	/^     a5a:	89 04 24             	mov    %eax,(%esp)$/;"	l
a5a	usertests.asm	/^     a5a:	c7 44 24 04 6a 45 00 	movl   $0x456a,0x4(%esp)$/;"	l
a5b	grep.asm	/^ a5b:	a1 48 0e 00 00       	mov    0xe48,%eax$/;"	l
a5c	ls.asm	/^ a5c:	a3 24 0e 00 00       	mov    %eax,0xe24$/;"	l
a5d	sh.asm	/^     a5d:	e8 1c fd ff ff       	call   77e <parseline>$/;"	l
a6	init.asm	/^  a6:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)$/;"	l
a6	mkdir.asm	/^  a6:	89 ca                	mov    %ecx,%edx$/;"	l
a6	rm.asm	/^  a6:	89 ca                	mov    %ecx,%edx$/;"	l
a60	grep.asm	/^ a60:	a3 40 0e 00 00       	mov    %eax,0xe40$/;"	l
a61	ls.asm	/^ a61:	a1 24 0e 00 00       	mov    0xe24,%eax$/;"	l
a61	usertests.asm	/^     a61:	00 $/;"	l
a62	sh.asm	/^     a62:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
a62	usertests.asm	/^     a62:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
a65	grep.asm	/^ a65:	c7 05 44 0e 00 00 00 	movl   $0x0,0xe44$/;"	l
a65	sh.asm	/^     a65:	c7 44 24 08 60 15 00 	movl   $0x1560,0x8(%esp)$/;"	l
a66	ls.asm	/^ a66:	a3 1c 0e 00 00       	mov    %eax,0xe1c$/;"	l
a69	usertests.asm	/^     a69:	e8 26 33 00 00       	call   3d94 <printf>$/;"	l
a6b	ls.asm	/^ a6b:	c7 05 20 0e 00 00 00 	movl   $0x0,0xe20$/;"	l
a6c	grep.asm	/^ a6c:	00 00 00 $/;"	l
a6c	sh.asm	/^     a6c:	00 $/;"	l
a6d	sh.asm	/^     a6d:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
a6e	usertests.asm	/^     a6e:	c9                   	leave  $/;"	l
a6f	grep.asm	/^ a6f:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
a6f	usertests.asm	/^     a6f:	c3                   	ret    $/;"	l
a7	echo.asm	/^  a7:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
a7	forktest.asm	/^  a7:	79 19                	jns    c2 <forktest+0x99>$/;"	l
a7	ln.asm	/^  a7:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
a7	sh.asm	/^      a7:	e8 f5 0e 00 00       	call   fa1 <open>$/;"	l
a70	sh.asm	/^     a70:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
a70	usertests.asm	/^     a70:	55                   	push   %ebp$/;"	l
a71	usertests.asm	/^     a71:	89 e5                	mov    %esp,%ebp$/;"	l
a72	grep.asm	/^ a72:	8b 00                	mov    (%eax),%eax$/;"	l
a72	ls.asm	/^ a72:	00 00 00 $/;"	l
a73	usertests.asm	/^     a73:	83 ec 28             	sub    $0x28,%esp$/;"	l
a74	grep.asm	/^ a74:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
a74	sh.asm	/^     a74:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
a75	ls.asm	/^ a75:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
a76	usertests.asm	/^     a76:	c7 44 24 04 77 45 00 	movl   $0x4577,0x4(%esp)$/;"	l
a77	grep.asm	/^ a77:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a77	sh.asm	/^     a77:	89 04 24             	mov    %eax,(%esp)$/;"	l
a78	ls.asm	/^ a78:	8b 00                	mov    (%eax),%eax$/;"	l
a7a	grep.asm	/^ a7a:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
a7a	ls.asm	/^ a7a:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
a7a	sh.asm	/^     a7a:	e8 fe fb ff ff       	call   67d <peek>$/;"	l
a7d	grep.asm	/^ a7d:	3b 45 ec             	cmp    -0x14(%ebp),%eax$/;"	l
a7d	ls.asm	/^ a7d:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a7d	usertests.asm	/^     a7d:	00 $/;"	l
a7e	usertests.asm	/^     a7e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
a7f	sh.asm	/^     a7f:	85 c0                	test   %eax,%eax$/;"	l
a8	kill.asm	/^  a8:	89 4d 0c             	mov    %ecx,0xc(%ebp)$/;"	l
a8	mkdir.asm	/^  a8:	89 fb                	mov    %edi,%ebx$/;"	l
a8	rm.asm	/^  a8:	89 fb                	mov    %edi,%ebx$/;"	l
a8	wc.asm	/^  a8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)$/;"	l
a8	zombie.asm	/^  a8:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
a80	grep.asm	/^ a80:	72 4d                	jb     acf <malloc+0xa6>$/;"	l
a80	ls.asm	/^ a80:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
a81	sh.asm	/^     a81:	75 0c                	jne    a8f <parseblock+0x91>$/;"	l
a82	grep.asm	/^ a82:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a83	ls.asm	/^ a83:	3b 45 ec             	cmp    -0x14(%ebp),%eax$/;"	l
a83	sh.asm	/^     a83:	c7 04 24 62 15 00 00 	movl   $0x1562,(%esp)$/;"	l
a85	grep.asm	/^ a85:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
a85	usertests.asm	/^     a85:	e8 0a 33 00 00       	call   3d94 <printf>$/;"	l
a86	ls.asm	/^ a86:	72 4d                	jb     ad5 <malloc+0xa6>$/;"	l
a88	grep.asm	/^ a88:	3b 45 ec             	cmp    -0x14(%ebp),%eax$/;"	l
a88	ls.asm	/^ a88:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a8a	sh.asm	/^     a8a:	e8 c8 f8 ff ff       	call   357 <panic>$/;"	l
a8a	usertests.asm	/^     a8a:	e8 05 32 00 00       	call   3c94 <getpid>$/;"	l
a8b	grep.asm	/^ a8b:	75 0c                	jne    a99 <malloc+0x70>$/;"	l
a8b	ls.asm	/^ a8b:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
a8d	grep.asm	/^ a8d:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a8e	ls.asm	/^ a8e:	3b 45 ec             	cmp    -0x14(%ebp),%eax$/;"	l
a8f	sh.asm	/^     a8f:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)$/;"	l
a8f	usertests.asm	/^     a8f:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
a9	forktest.asm	/^  a9:	c7 44 24 04 4b 04 00 	movl   $0x44b,0x4(%esp)$/;"	l
a9	grep.asm	/^  a9:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
a9	usertests.asm	/^      a9:	c9                   	leave  $/;"	l
a90	grep.asm	/^ a90:	8b 10                	mov    (%eax),%edx$/;"	l
a91	ls.asm	/^ a91:	75 0c                	jne    a9f <malloc+0x70>$/;"	l
a92	grep.asm	/^ a92:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
a92	usertests.asm	/^     a92:	e8 75 31 00 00       	call   3c0c <fork>$/;"	l
a93	ls.asm	/^ a93:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a95	grep.asm	/^ a95:	89 10                	mov    %edx,(%eax)$/;"	l
a96	ls.asm	/^ a96:	8b 10                	mov    (%eax),%edx$/;"	l
a96	sh.asm	/^     a96:	00 $/;"	l
a97	grep.asm	/^ a97:	eb 26                	jmp    abf <malloc+0x96>$/;"	l
a97	sh.asm	/^     a97:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)$/;"	l
a97	usertests.asm	/^     a97:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
a98	ls.asm	/^ a98:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
a99	grep.asm	/^ a99:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a9a	usertests.asm	/^     a9a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)$/;"	l
a9b	ls.asm	/^ a9b:	89 10                	mov    %edx,(%eax)$/;"	l
a9c	grep.asm	/^ a9c:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
a9d	ls.asm	/^ a9d:	eb 26                	jmp    ac5 <malloc+0x96>$/;"	l
a9e	sh.asm	/^     a9e:	00 $/;"	l
a9e	usertests.asm	/^     a9e:	0f 85 aa 00 00 00    	jne    b4e <mem+0xde>$/;"	l
a9f	grep.asm	/^ a9f:	2b 45 ec             	sub    -0x14(%ebp),%eax$/;"	l
a9f	ls.asm	/^ a9f:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a9f	sh.asm	/^     a9f:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
aa	echo.asm	/^  aa:	8d 4a 01             	lea    0x1(%edx),%ecx$/;"	l
aa	ln.asm	/^  aa:	90                   	nop$/;"	l
aa	ls.asm	/^  aa:	83 c4 24             	add    $0x24,%esp$/;"	l
aa	mkdir.asm	/^  aa:	89 5d 08             	mov    %ebx,0x8(%ebp)$/;"	l
aa	rm.asm	/^  aa:	89 5d 08             	mov    %ebx,0x8(%ebp)$/;"	l
aa	usertests.asm	/^      aa:	c3                   	ret    $/;"	l
aa2	grep.asm	/^ aa2:	89 c2                	mov    %eax,%edx$/;"	l
aa2	ls.asm	/^ aa2:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
aa2	sh.asm	/^     aa2:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
aa4	grep.asm	/^ aa4:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
aa4	usertests.asm	/^     aa4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
aa5	ls.asm	/^ aa5:	2b 45 ec             	sub    -0x14(%ebp),%eax$/;"	l
aa6	sh.asm	/^     aa6:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
aa7	grep.asm	/^ aa7:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
aa8	ls.asm	/^ aa8:	89 c2                	mov    %eax,%edx$/;"	l
aa9	sh.asm	/^     aa9:	89 04 24             	mov    %eax,(%esp)$/;"	l
aaa	grep.asm	/^ aaa:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
aaa	ls.asm	/^ aaa:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
aab	usertests.asm	/^     aab:	eb 0e                	jmp    abb <mem+0x4b>$/;"	l
aac	sh.asm	/^     aac:	e8 81 fa ff ff       	call   532 <gettoken>$/;"	l
aad	grep.asm	/^ aad:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
aad	ls.asm	/^ aad:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
aad	usertests.asm	/^     aad:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
ab	cat.asm	/^  ab:	00 $/;"	l
ab	init.asm	/^  ab:	75 2d                	jne    da <main+0xda>$/;"	l
ab	kill.asm	/^  ab:	0f b6 12             	movzbl (%edx),%edx$/;"	l
ab	ln.asm	/^  ab:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ab	usertests.asm	/^      ab:	55                   	push   %ebp$/;"	l
ab	zombie.asm	/^  ab:	0f b6 00             	movzbl (%eax),%eax$/;"	l
ab0	grep.asm	/^ ab0:	c1 e0 03             	shl    $0x3,%eax$/;"	l
ab0	ls.asm	/^ ab0:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ab0	usertests.asm	/^     ab0:	8b 55 f4             	mov    -0xc(%ebp),%edx$/;"	l
ab1	sh.asm	/^     ab1:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
ab3	grep.asm	/^ ab3:	01 45 f4             	add    %eax,-0xc(%ebp)$/;"	l
ab3	ls.asm	/^ ab3:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
ab3	usertests.asm	/^     ab3:	89 10                	mov    %edx,(%eax)$/;"	l
ab4	sh.asm	/^     ab4:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
ab5	usertests.asm	/^     ab5:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
ab6	grep.asm	/^ ab6:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ab6	ls.asm	/^ ab6:	c1 e0 03             	shl    $0x3,%eax$/;"	l
ab8	sh.asm	/^     ab8:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ab8	usertests.asm	/^     ab8:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
ab9	grep.asm	/^ ab9:	8b 55 ec             	mov    -0x14(%ebp),%edx$/;"	l
ab9	ls.asm	/^ ab9:	01 45 f4             	add    %eax,-0xc(%ebp)$/;"	l
abb	sh.asm	/^     abb:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
abb	usertests.asm	/^     abb:	c7 04 24 11 27 00 00 	movl   $0x2711,(%esp)$/;"	l
abc	grep.asm	/^ abc:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
abc	ls.asm	/^ abc:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
abf	grep.asm	/^ abf:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
abf	ls.asm	/^ abf:	8b 55 ec             	mov    -0x14(%ebp),%edx$/;"	l
abf	sh.asm	/^     abf:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ac	cat.asm	/^  ac:	89 04 24             	mov    %eax,(%esp)$/;"	l
ac	grep.asm	/^  ac:	29 c2                	sub    %eax,%edx$/;"	l
ac	sh.asm	/^      ac:	85 c0                	test   %eax,%eax$/;"	l
ac	stressfs.asm	/^  ac:	00 $/;"	l
ac	usertests.asm	/^      ac:	89 e5                	mov    %esp,%ebp$/;"	l
ac	wc.asm	/^  ac:	0f 8f 70 ff ff ff    	jg     22 <wc+0x22>$/;"	l
ac2	grep.asm	/^ ac2:	a3 48 0e 00 00       	mov    %eax,0xe48$/;"	l
ac2	ls.asm	/^ ac2:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
ac2	sh.asm	/^     ac2:	89 04 24             	mov    %eax,(%esp)$/;"	l
ac2	usertests.asm	/^     ac2:	e8 b9 35 00 00       	call   4080 <malloc>$/;"	l
ac5	ls.asm	/^ ac5:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
ac5	sh.asm	/^     ac5:	e8 0c fe ff ff       	call   8d6 <parseredirs>$/;"	l
ac7	grep.asm	/^ ac7:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ac7	usertests.asm	/^     ac7:	89 45 e8             	mov    %eax,-0x18(%ebp)$/;"	l
ac8	ls.asm	/^ ac8:	a3 24 0e 00 00       	mov    %eax,0xe24$/;"	l
aca	grep.asm	/^ aca:	83 c0 08             	add    $0x8,%eax$/;"	l
aca	sh.asm	/^     aca:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
aca	usertests.asm	/^     aca:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)$/;"	l
acd	grep.asm	/^ acd:	eb 38                	jmp    b07 <malloc+0xde>$/;"	l
acd	ls.asm	/^ acd:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
acd	sh.asm	/^     acd:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ace	usertests.asm	/^     ace:	75 dd                	jne    aad <mem+0x3d>$/;"	l
acf	grep.asm	/^ acf:	a1 48 0e 00 00       	mov    0xe48,%eax$/;"	l
acquire	spinlock.c	/^acquire(struct spinlock *lk)$/;"	f
ad	echo.asm	/^  ad:	89 4d 0c             	mov    %ecx,0xc(%ebp)$/;"	l
ad	init.asm	/^  ad:	c7 44 24 04 60 0b 00 	movl   $0xb60,0x4(%esp)$/;"	l
ad	ls.asm	/^  ad:	5b                   	pop    %ebx$/;"	l
ad	mkdir.asm	/^  ad:	89 55 10             	mov    %edx,0x10(%ebp)$/;"	l
ad	rm.asm	/^  ad:	89 55 10             	mov    %edx,0x10(%ebp)$/;"	l
ad	stressfs.asm	/^  ad:	89 c2                	mov    %eax,%edx$/;"	l
ad0	ls.asm	/^ ad0:	83 c0 08             	add    $0x8,%eax$/;"	l
ad0	sh.asm	/^     ad0:	c9                   	leave  $/;"	l
ad0	usertests.asm	/^     ad0:	eb 19                	jmp    aeb <mem+0x7b>$/;"	l
ad1	sh.asm	/^     ad1:	c3                   	ret    $/;"	l
ad2	sh.asm	/^     ad2:	55                   	push   %ebp$/;"	l
ad2	usertests.asm	/^     ad2:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ad3	ls.asm	/^ ad3:	eb 38                	jmp    b0d <malloc+0xde>$/;"	l
ad3	sh.asm	/^     ad3:	89 e5                	mov    %esp,%ebp$/;"	l
ad4	grep.asm	/^ ad4:	39 45 f4             	cmp    %eax,-0xc(%ebp)$/;"	l
ad5	ls.asm	/^ ad5:	a1 24 0e 00 00       	mov    0xe24,%eax$/;"	l
ad5	sh.asm	/^     ad5:	83 ec 38             	sub    $0x38,%esp$/;"	l
ad5	usertests.asm	/^     ad5:	8b 00                	mov    (%eax),%eax$/;"	l
ad7	grep.asm	/^ ad7:	75 1b                	jne    af4 <malloc+0xcb>$/;"	l
ad7	usertests.asm	/^     ad7:	89 45 e8             	mov    %eax,-0x18(%ebp)$/;"	l
ad8	sh.asm	/^     ad8:	c7 44 24 08 53 15 00 	movl   $0x1553,0x8(%esp)$/;"	l
ad9	grep.asm	/^ ad9:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
ada	ls.asm	/^ ada:	39 45 f4             	cmp    %eax,-0xc(%ebp)$/;"	l
ada	usertests.asm	/^     ada:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
adc	grep.asm	/^ adc:	89 04 24             	mov    %eax,(%esp)$/;"	l
add	ls.asm	/^ add:	75 1b                	jne    afa <malloc+0xcb>$/;"	l
add	usertests.asm	/^     add:	89 04 24             	mov    %eax,(%esp)$/;"	l
addr	kernel.asm	/^  addr = p2v(a);$/;"	d
addr	kernel.asm	/^  addr = proc->sz;$/;"	d
addr	mp.h	/^  uint *addr;                  \/\/ I\/O APIC address$/;"	m	struct:mpioapic
addrs	file.h	/^  uint addrs[NDIRECT+1];$/;"	m	struct:inode
addrs	fs.h	/^  uint addrs[NDIRECT+1];   \/\/ Data block addresses$/;"	m	struct:dinode
adf	grep.asm	/^ adf:	e8 ed fe ff ff       	call   9d1 <morecore>$/;"	l
adf	ls.asm	/^ adf:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
adf	sh.asm	/^     adf:	00 $/;"	l
ae	grep.asm	/^  ae:	89 d0                	mov    %edx,%eax$/;"	l
ae	kill.asm	/^  ae:	88 10                	mov    %dl,(%eax)$/;"	l
ae	ln.asm	/^  ae:	8d 50 01             	lea    0x1(%eax),%edx$/;"	l
ae	ls.asm	/^  ae:	5d                   	pop    %ebp$/;"	l
ae	sh.asm	/^      ae:	79 23                	jns    d3 <runcmd+0xd3>$/;"	l
ae	usertests.asm	/^      ae:	83 ec 28             	sub    $0x28,%esp$/;"	l
ae	zombie.asm	/^  ae:	0f b6 c0             	movzbl %al,%eax$/;"	l
ae0	sh.asm	/^     ae0:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
ae0	usertests.asm	/^     ae0:	e8 62 34 00 00       	call   3f47 <free>$/;"	l
ae2	ls.asm	/^ ae2:	89 04 24             	mov    %eax,(%esp)$/;"	l
ae3	sh.asm	/^     ae3:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
ae4	grep.asm	/^ ae4:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
ae5	ls.asm	/^ ae5:	e8 ed fe ff ff       	call   9d7 <morecore>$/;"	l
ae5	usertests.asm	/^     ae5:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
ae7	grep.asm	/^ ae7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
ae7	sh.asm	/^     ae7:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ae8	usertests.asm	/^     ae8:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
aea	ls.asm	/^ aea:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
aea	sh.asm	/^     aea:	89 04 24             	mov    %eax,(%esp)$/;"	l
aeb	grep.asm	/^ aeb:	75 07                	jne    af4 <malloc+0xcb>$/;"	l
aeb	usertests.asm	/^     aeb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
aed	grep.asm	/^ aed:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
aed	ls.asm	/^ aed:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
aed	sh.asm	/^     aed:	e8 8b fb ff ff       	call   67d <peek>$/;"	l
aef	usertests.asm	/^     aef:	75 e1                	jne    ad2 <mem+0x62>$/;"	l
af	cat.asm	/^  af:	e8 11 03 00 00       	call   3c5 <open>$/;"	l
af	ls.asm	/^  af:	c3                   	ret    $/;"	l
af	stressfs.asm	/^  af:	8b 84 24 2c 02 00 00 	mov    0x22c(%esp),%eax$/;"	l
af1	ls.asm	/^ af1:	75 07                	jne    afa <malloc+0xcb>$/;"	l
af1	usertests.asm	/^     af1:	c7 04 24 00 50 00 00 	movl   $0x5000,(%esp)$/;"	l
af2	grep.asm	/^ af2:	eb 13                	jmp    b07 <malloc+0xde>$/;"	l
af2	sh.asm	/^     af2:	85 c0                	test   %eax,%eax$/;"	l
af3	ls.asm	/^ af3:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
af4	grep.asm	/^ af4:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
af4	sh.asm	/^     af4:	74 17                	je     b0d <parseexec+0x3b>$/;"	l
af6	sh.asm	/^     af6:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
af7	grep.asm	/^ af7:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
af8	ls.asm	/^ af8:	eb 13                	jmp    b0d <malloc+0xde>$/;"	l
af8	usertests.asm	/^     af8:	e8 83 35 00 00       	call   4080 <malloc>$/;"	l
af9	sh.asm	/^     af9:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
afa	grep.asm	/^ afa:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
afa	ls.asm	/^ afa:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
afd	grep.asm	/^ afd:	8b 00                	mov    (%eax),%eax$/;"	l
afd	ls.asm	/^ afd:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
afd	sh.asm	/^     afd:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
afd	usertests.asm	/^     afd:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
aff	grep.asm	/^ aff:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
align	elf.h	/^  uint align;$/;"	m	struct:proghdr
allocproc	proc.c	/^allocproc(void)$/;"	f	file:
allocuvm	vm.c	/^allocuvm(pde_t *pgdir, uint oldsz, uint newsz)$/;"	f
alltraps	kernel.asm	/^alltraps:$/;"	l
alltraps	trapasm.S	/^alltraps:$/;"	l
amt	usertests.asm	/^  amt = (BIG) - (uint)a;$/;"	d
ap	cat.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	echo.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	grep.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	init.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	kill.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	ln.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	ls.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	mkdir.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	rm.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	sh.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	stressfs.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	usertests.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	wc.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	zombie.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
apicid	mp.h	/^  uchar apicid;                 \/\/ local APIC id$/;"	m	struct:mpproc
apicno	mp.h	/^  uchar apicno;                 \/\/ I\/O APIC id$/;"	m	struct:mpioapic
argc	sh.asm	/^  argc = 0;$/;"	d
argfd	sysfile.c	/^argfd(int n, int *pfd, struct file **pf)$/;"	f	file:
argint	syscall.c	/^argint(int n, int *ip)$/;"	f
argp	kernel.asm	/^  argp = (uint*)(void*)(&fmt + 1);$/;"	d
argptr	syscall.c	/^argptr(int n, char **pp, int size)$/;"	f
args	mmu.h	/^  uint args : 5;        \/\/ # args, 0 for interrupt\/trap gates$/;"	m	struct:gatedesc
argstr	syscall.c	/^argstr(int n, char **pp)$/;"	f
argv	init.c	/^char *argv[] = { "sh", 0 };$/;"	v
argv	initcode.S	/^argv:$/;"	l
argv	sh.c	/^  char *argv[MAXARGS];$/;"	m	struct:execcmd	file:
atoi	ulib.c	/^atoi(const char *s)$/;"	f
avl	mmu.h	/^  uint avl : 1;        \/\/ Unused (available for software use)$/;"	m	struct:segdesc
b	cat.asm	/^   b:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
b	kernel.asm	/^  b = bget(dev, sector);$/;"	d
b	usertests.asm	/^       b:	c7 44 24 04 76 41 00 	movl   $0x4176,0x4(%esp)$/;"	l
b	usertests.asm	/^    b = sbrk(1);$/;"	d
b0	echo.asm	/^  b0:	0f b6 12             	movzbl (%edx),%edx$/;"	l
b0	forktest.asm	/^  b0:	00 $/;"	l
b0	grep.asm	/^  b0:	01 45 f4             	add    %eax,-0xc(%ebp)$/;"	l
b0	kill.asm	/^  b0:	0f b6 00             	movzbl (%eax),%eax$/;"	l
b0	ls.asm	/^  b0:	55                   	push   %ebp$/;"	l
b0	mkdir.asm	/^  b0:	5b                   	pop    %ebx$/;"	l
b0	rm.asm	/^  b0:	5b                   	pop    %ebx$/;"	l
b0	sh.asm	/^      b0:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
b00	ls.asm	/^ b00:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
b00	sh.asm	/^     b00:	89 04 24             	mov    %eax,(%esp)$/;"	l
b00	usertests.asm	/^     b00:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
b02	grep.asm	/^ b02:	e9 70 ff ff ff       	jmp    a77 <malloc+0x4e>$/;"	l
b03	ls.asm	/^ b03:	8b 00                	mov    (%eax),%eax$/;"	l
b03	sh.asm	/^     b03:	e8 f6 fe ff ff       	call   9fe <parseblock>$/;"	l
b04	usertests.asm	/^     b04:	75 24                	jne    b2a <mem+0xba>$/;"	l
b05	ls.asm	/^ b05:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
b06	usertests.asm	/^     b06:	c7 44 24 04 81 45 00 	movl   $0x4581,0x4(%esp)$/;"	l
b07	grep.asm	/^ b07:	c9                   	leave  $/;"	l
b08	grep.asm	/^ b08:	c3                   	ret    $/;"	l
b08	ls.asm	/^ b08:	e9 70 ff ff ff       	jmp    a7d <malloc+0x4e>$/;"	l
b08	sh.asm	/^     b08:	e9 09 01 00 00       	jmp    c16 <parseexec+0x144>$/;"	l
b0d	ls.asm	/^ b0d:	c9                   	leave  $/;"	l
b0d	sh.asm	/^     b0d:	e8 90 f8 ff ff       	call   3a2 <execcmd>$/;"	l
b0d	usertests.asm	/^     b0d:	00 $/;"	l
b0e	ls.asm	/^ b0e:	c3                   	ret    $/;"	l
b0e	usertests.asm	/^     b0e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
b1	forktest.asm	/^  b1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
b1	ln.asm	/^  b1:	89 55 08             	mov    %edx,0x8(%ebp)$/;"	l
b1	ls.asm	/^  b1:	89 e5                	mov    %esp,%ebp$/;"	l
b1	mkdir.asm	/^  b1:	5f                   	pop    %edi$/;"	l
b1	rm.asm	/^  b1:	5f                   	pop    %edi$/;"	l
b1	usertests.asm	/^      b1:	a1 b8 5e 00 00       	mov    0x5eb8,%eax$/;"	l
b1	zombie.asm	/^  b1:	29 c2                	sub    %eax,%edx$/;"	l
b12	sh.asm	/^     b12:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
b15	sh.asm	/^     b15:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
b15	usertests.asm	/^     b15:	e8 7a 32 00 00       	call   3d94 <printf>$/;"	l
b18	sh.asm	/^     b18:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
b1a	usertests.asm	/^     b1a:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
b1b	sh.asm	/^     b1b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
b1d	usertests.asm	/^     b1d:	89 04 24             	mov    %eax,(%esp)$/;"	l
b2	mkdir.asm	/^  b2:	5d                   	pop    %ebp$/;"	l
b2	rm.asm	/^  b2:	5d                   	pop    %ebp$/;"	l
b2	wc.asm	/^  b2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)$/;"	l
b20	usertests.asm	/^     b20:	e8 1f 31 00 00       	call   3c44 <kill>$/;"	l
b22	sh.asm	/^     b22:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
b25	sh.asm	/^     b25:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
b25	usertests.asm	/^     b25:	e8 ea 30 00 00       	call   3c14 <exit>$/;"	l
b29	sh.asm	/^     b29:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
b2a	usertests.asm	/^     b2a:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
b2c	sh.asm	/^     b2c:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
b2d	usertests.asm	/^     b2d:	89 04 24             	mov    %eax,(%esp)$/;"	l
b3	echo.asm	/^  b3:	88 10                	mov    %dl,(%eax)$/;"	l
b3	grep.asm	/^  b3:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
b3	kill.asm	/^  b3:	84 c0                	test   %al,%al$/;"	l
b3	ls.asm	/^  b3:	57                   	push   %edi$/;"	l
b3	mkdir.asm	/^  b3:	c3                   	ret    $/;"	l
b3	rm.asm	/^  b3:	c3                   	ret    $/;"	l
b3	sh.asm	/^      b3:	8b 40 08             	mov    0x8(%eax),%eax$/;"	l
b3	zombie.asm	/^  b3:	89 d0                	mov    %edx,%eax$/;"	l
b30	sh.asm	/^     b30:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
b30	usertests.asm	/^     b30:	e8 12 34 00 00       	call   3f47 <free>$/;"	l
b33	sh.asm	/^     b33:	89 04 24             	mov    %eax,(%esp)$/;"	l
b35	usertests.asm	/^     b35:	c7 44 24 04 9b 45 00 	movl   $0x459b,0x4(%esp)$/;"	l
b36	sh.asm	/^     b36:	e8 9b fd ff ff       	call   8d6 <parseredirs>$/;"	l
b3b	sh.asm	/^     b3b:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
b3c	usertests.asm	/^     b3c:	00 $/;"	l
b3d	usertests.asm	/^     b3d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
b3e	sh.asm	/^     b3e:	e9 8f 00 00 00       	jmp    bd2 <parseexec+0x100>$/;"	l
b4	cat.asm	/^  b4:	89 44 24 18          	mov    %eax,0x18(%esp)$/;"	l
b4	init.asm	/^  b4:	00 $/;"	l
b4	ln.asm	/^  b4:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
b4	ls.asm	/^  b4:	56                   	push   %esi$/;"	l
b4	mkdir.asm	/^  b4:	55                   	push   %ebp$/;"	l
b4	rm.asm	/^  b4:	55                   	push   %ebp$/;"	l
b43	sh.asm	/^     b43:	8d 45 e0             	lea    -0x20(%ebp),%eax$/;"	l
b44	usertests.asm	/^     b44:	e8 4b 32 00 00       	call   3d94 <printf>$/;"	l
b46	sh.asm	/^     b46:	89 44 24 0c          	mov    %eax,0xc(%esp)$/;"	l
b49	usertests.asm	/^     b49:	e8 c6 30 00 00       	call   3c14 <exit>$/;"	l
b4a	sh.asm	/^     b4a:	8d 45 e4             	lea    -0x1c(%ebp),%eax$/;"	l
b4d	sh.asm	/^     b4d:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
b4e	usertests.asm	/^     b4e:	e8 c9 30 00 00       	call   3c1c <wait>$/;"	l
b5	echo.asm	/^  b5:	0f b6 00             	movzbl (%eax),%eax$/;"	l
b5	init.asm	/^  b5:	c7 04 24 c3 08 00 00 	movl   $0x8c3,(%esp)$/;"	l
b5	kill.asm	/^  b5:	75 e2                	jne    99 <strcpy+0xd>$/;"	l
b5	ls.asm	/^  b5:	53                   	push   %ebx$/;"	l
b5	mkdir.asm	/^  b5:	89 e5                	mov    %esp,%ebp$/;"	l
b5	rm.asm	/^  b5:	89 e5                	mov    %esp,%ebp$/;"	l
b5	zombie.asm	/^  b5:	5d                   	pop    %ebp$/;"	l
b51	sh.asm	/^     b51:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
b53	usertests.asm	/^     b53:	c9                   	leave  $/;"	l
b54	sh.asm	/^     b54:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
b54	usertests.asm	/^     b54:	c3                   	ret    $/;"	l
b55	usertests.asm	/^     b55:	55                   	push   %ebp$/;"	l
b56	usertests.asm	/^     b56:	89 e5                	mov    %esp,%ebp$/;"	l
b58	sh.asm	/^     b58:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
b58	usertests.asm	/^     b58:	83 ec 48             	sub    $0x48,%esp$/;"	l
b5b	sh.asm	/^     b5b:	89 04 24             	mov    %eax,(%esp)$/;"	l
b5b	usertests.asm	/^     b5b:	c7 44 24 04 a3 45 00 	movl   $0x45a3,0x4(%esp)$/;"	l
b5e	sh.asm	/^     b5e:	e8 cf f9 ff ff       	call   532 <gettoken>$/;"	l
b6	grep.asm	/^  b6:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
b6	ls.asm	/^  b6:	81 ec 5c 02 00 00    	sub    $0x25c,%esp$/;"	l
b6	sh.asm	/^      b6:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
b6	stressfs.asm	/^  b6:	01 d0                	add    %edx,%eax$/;"	l
b6	usertests.asm	/^      b6:	c7 44 24 04 cd 41 00 	movl   $0x41cd,0x4(%esp)$/;"	l
b6	wc.asm	/^  b6:	79 19                	jns    d1 <wc+0xd1>$/;"	l
b6	zombie.asm	/^  b6:	c3                   	ret    $/;"	l
b62	usertests.asm	/^     b62:	00 $/;"	l
b63	sh.asm	/^     b63:	89 45 e8             	mov    %eax,-0x18(%ebp)$/;"	l
b63	usertests.asm	/^     b63:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
b66	sh.asm	/^     b66:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)$/;"	l
b6a	sh.asm	/^     b6a:	75 05                	jne    b71 <parseexec+0x9f>$/;"	l
b6a	usertests.asm	/^     b6a:	e8 25 32 00 00       	call   3d94 <printf>$/;"	l
b6c	sh.asm	/^     b6c:	e9 83 00 00 00       	jmp    bf4 <parseexec+0x122>$/;"	l
b6f	usertests.asm	/^     b6f:	c7 04 24 b2 45 00 00 	movl   $0x45b2,(%esp)$/;"	l
b7	kill.asm	/^  b7:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
b7	ln.asm	/^  b7:	8d 4a 01             	lea    0x1(%edx),%ecx$/;"	l
b7	mkdir.asm	/^  b7:	83 ec 10             	sub    $0x10,%esp$/;"	l
b7	rm.asm	/^  b7:	83 ec 10             	sub    $0x10,%esp$/;"	l
b7	zombie.asm	/^  b7:	55                   	push   %ebp$/;"	l
b71	sh.asm	/^     b71:	83 7d e8 61          	cmpl   $0x61,-0x18(%ebp)$/;"	l
b75	sh.asm	/^     b75:	74 0c                	je     b83 <parseexec+0xb1>$/;"	l
b76	usertests.asm	/^     b76:	e8 e9 30 00 00       	call   3c64 <unlink>$/;"	l
b77	sh.asm	/^     b77:	c7 04 24 26 15 00 00 	movl   $0x1526,(%esp)$/;"	l
b7b	usertests.asm	/^     b7b:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)$/;"	l
b7e	sh.asm	/^     b7e:	e8 d4 f7 ff ff       	call   357 <panic>$/;"	l
b8	cat.asm	/^  b8:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)$/;"	l
b8	echo.asm	/^  b8:	84 c0                	test   %al,%al$/;"	l
b8	forktest.asm	/^  b8:	e8 43 ff ff ff       	call   0 <printf>$/;"	l
b8	stressfs.asm	/^  b8:	88 84 24 26 02 00 00 	mov    %al,0x226(%esp)$/;"	l
b8	wc.asm	/^  b8:	c7 44 24 04 93 09 00 	movl   $0x993,0x4(%esp)$/;"	l
b8	zombie.asm	/^  b8:	89 e5                	mov    %esp,%ebp$/;"	l
b82	usertests.asm	/^     b82:	00 $/;"	l
b83	sh.asm	/^     b83:	8b 4d e4             	mov    -0x1c(%ebp),%ecx$/;"	l
b83	usertests.asm	/^     b83:	c7 04 24 b2 45 00 00 	movl   $0x45b2,(%esp)$/;"	l
b86	sh.asm	/^     b86:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
b89	sh.asm	/^     b89:	8b 55 f4             	mov    -0xc(%ebp),%edx$/;"	l
b8a	usertests.asm	/^     b8a:	e8 c5 30 00 00       	call   3c54 <open>$/;"	l
b8c	sh.asm	/^     b8c:	89 4c 90 04          	mov    %ecx,0x4(%eax,%edx,4)$/;"	l
b8f	usertests.asm	/^     b8f:	89 45 e8             	mov    %eax,-0x18(%ebp)$/;"	l
b90	sh.asm	/^     b90:	8b 55 e0             	mov    -0x20(%ebp),%edx$/;"	l
b92	usertests.asm	/^     b92:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)$/;"	l
b93	sh.asm	/^     b93:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
b96	sh.asm	/^     b96:	8b 4d f4             	mov    -0xc(%ebp),%ecx$/;"	l
b96	usertests.asm	/^     b96:	79 19                	jns    bb1 <sharedfd+0x5c>$/;"	l
b98	usertests.asm	/^     b98:	c7 44 24 04 bc 45 00 	movl   $0x45bc,0x4(%esp)$/;"	l
b99	sh.asm	/^     b99:	83 c1 08             	add    $0x8,%ecx$/;"	l
b9c	sh.asm	/^     b9c:	89 54 88 0c          	mov    %edx,0xc(%eax,%ecx,4)$/;"	l
b9f	usertests.asm	/^     b9f:	00 $/;"	l
ba	echo.asm	/^  ba:	75 e2                	jne    9e <strcpy+0xd>$/;"	l
ba	grep.asm	/^  ba:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
ba	kill.asm	/^  ba:	c9                   	leave  $/;"	l
ba	ln.asm	/^  ba:	89 4d 0c             	mov    %ecx,0xc(%ebp)$/;"	l
ba	mkdir.asm	/^  ba:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ba	rm.asm	/^  ba:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ba	sh.asm	/^      ba:	c7 44 24 04 c7 14 00 	movl   $0x14c7,0x4(%esp)$/;"	l
ba	zombie.asm	/^  ba:	83 ec 10             	sub    $0x10,%esp$/;"	l
ba0	sh.asm	/^     ba0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)$/;"	l
ba0	usertests.asm	/^     ba0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
ba4	sh.asm	/^     ba4:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)$/;"	l
ba7	usertests.asm	/^     ba7:	e8 e8 31 00 00       	call   3d94 <printf>$/;"	l
ba8	sh.asm	/^     ba8:	7e 0c                	jle    bb6 <parseexec+0xe4>$/;"	l
baa	sh.asm	/^     baa:	c7 04 24 75 15 00 00 	movl   $0x1575,(%esp)$/;"	l
bac	usertests.asm	/^     bac:	e9 a0 01 00 00       	jmp    d51 <sharedfd+0x1fc>$/;"	l
backcmd	sh.c	/^backcmd(struct cmd *subcmd)$/;"	f
backcmd	sh.c	/^struct backcmd {$/;"	s	file:
bad	kernel.asm	/^ bad:$/;"	l
bad	kernel.asm	/^bad:$/;"	l
balloc	fs.c	/^balloc(uint dev)$/;"	f	file:
balloc	mkfs.c	/^balloc(int used)$/;"	f
base	umalloc.c	/^static Header base;$/;"	v	file:
base_15_0	mmu.h	/^  uint base_15_0 : 16; \/\/ Low bits of segment base address$/;"	m	struct:segdesc
base_23_16	mmu.h	/^  uint base_23_16 : 8; \/\/ Middle bits of segment base address$/;"	m	struct:segdesc
base_31_24	mmu.h	/^  uint base_31_24 : 8; \/\/ High bits of segment base address$/;"	m	struct:segdesc
bb	kill.asm	/^  bb:	c3                   	ret    $/;"	l
bb1	sh.asm	/^     bb1:	e8 a1 f7 ff ff       	call   357 <panic>$/;"	l
bb1	usertests.asm	/^     bb1:	e8 56 30 00 00       	call   3c0c <fork>$/;"	l
bb6	sh.asm	/^     bb6:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
bb6	usertests.asm	/^     bb6:	89 45 e4             	mov    %eax,-0x1c(%ebp)$/;"	l
bb9	sh.asm	/^     bb9:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
bb9	usertests.asm	/^     bb9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)$/;"	l
bbd	sh.asm	/^     bbd:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
bbd	usertests.asm	/^     bbd:	75 07                	jne    bc6 <sharedfd+0x71>$/;"	l
bbf	usertests.asm	/^     bbf:	b8 63 00 00 00       	mov    $0x63,%eax$/;"	l
bc	echo.asm	/^  bc:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
bc	init.asm	/^  bc:	e8 ee 02 00 00       	call   3af <exec>$/;"	l
bc	kill.asm	/^  bc:	55                   	push   %ebp$/;"	l
bc	ls.asm	/^  bc:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)$/;"	l
bc0	sh.asm	/^     bc0:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
bc4	sh.asm	/^     bc4:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
bc4	usertests.asm	/^     bc4:	eb 05                	jmp    bcb <sharedfd+0x76>$/;"	l
bc6	usertests.asm	/^     bc6:	b8 70 00 00 00       	mov    $0x70,%eax$/;"	l
bc7	sh.asm	/^     bc7:	89 04 24             	mov    %eax,(%esp)$/;"	l
bca	sh.asm	/^     bca:	e8 07 fd ff ff       	call   8d6 <parseredirs>$/;"	l
bcache	bio.c	/^} bcache;$/;"	v	typeref:struct:__anon9
bcb	usertests.asm	/^     bcb:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)$/;"	l
bcf	sh.asm	/^     bcf:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
bcmd	sh.asm	/^    bcmd = (struct backcmd*)cmd;$/;"	d
bcpu	kernel.asm	/^        bcpu = &cpus[ncpu];$/;"	d
bcpu	kernel.asm	/^  bcpu = &cpus[0];$/;"	d
bcpu	mp.c	/^static struct cpu *bcpu;$/;"	v	typeref:struct:cpu	file:
bd	cat.asm	/^  bd:	79 2f                	jns    ee <main+0x86>$/;"	l
bd	forktest.asm	/^  bd:	e8 bb 02 00 00       	call   37d <exit>$/;"	l
bd	grep.asm	/^  bd:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
bd	kill.asm	/^  bd:	89 e5                	mov    %esp,%ebp$/;"	l
bd	ln.asm	/^  bd:	0f b6 12             	movzbl (%edx),%edx$/;"	l
bd	mkdir.asm	/^  bd:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
bd	rm.asm	/^  bd:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
bd	usertests.asm	/^      bd:	00 $/;"	l
bd	zombie.asm	/^  bd:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)$/;"	l
bd2	sh.asm	/^     bd2:	c7 44 24 08 83 15 00 	movl   $0x1583,0x8(%esp)$/;"	l
bd2	usertests.asm	/^     bd2:	00 $/;"	l
bd3	usertests.asm	/^     bd3:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
bd7	usertests.asm	/^     bd7:	8d 45 d6             	lea    -0x2a(%ebp),%eax$/;"	l
bd9	sh.asm	/^     bd9:	00 $/;"	l
bda	kernel.asm	/^  bda = (uchar *) P2V(0x400);$/;"	d
bda	sh.asm	/^     bda:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
bda	usertests.asm	/^     bda:	89 04 24             	mov    %eax,(%esp)$/;"	l
bdd	sh.asm	/^     bdd:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
bdd	usertests.asm	/^     bdd:	e8 85 2e 00 00       	call   3a67 <memset>$/;"	l
be	usertests.asm	/^      be:	89 04 24             	mov    %eax,(%esp)$/;"	l
be1	sh.asm	/^     be1:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
be2	usertests.asm	/^     be2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
be4	sh.asm	/^     be4:	89 04 24             	mov    %eax,(%esp)$/;"	l
be7	sh.asm	/^     be7:	e8 91 fa ff ff       	call   67d <peek>$/;"	l
be9	usertests.asm	/^     be9:	eb 39                	jmp    c24 <sharedfd+0xcf>$/;"	l
beb	usertests.asm	/^     beb:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)$/;"	l
bec	sh.asm	/^     bec:	85 c0                	test   %eax,%eax$/;"	l
bee	sh.asm	/^     bee:	0f 84 4f ff ff ff    	je     b43 <parseexec+0x71>$/;"	l
begin_trans	log.c	/^begin_trans(void)$/;"	f
bf	cat.asm	/^  bf:	8b 44 24 1c          	mov    0x1c(%esp),%eax$/;"	l
bf	echo.asm	/^  bf:	c9                   	leave  $/;"	l
bf	kill.asm	/^  bf:	eb 08                	jmp    c9 <strcmp+0xd>$/;"	l
bf	stressfs.asm	/^  bf:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)$/;"	l
bf	wc.asm	/^  bf:	00 $/;"	l
bf2	usertests.asm	/^     bf2:	00 $/;"	l
bf3	usertests.asm	/^     bf3:	8d 45 d6             	lea    -0x2a(%ebp),%eax$/;"	l
bf4	sh.asm	/^     bf4:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
bf6	usertests.asm	/^     bf6:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
bf7	sh.asm	/^     bf7:	8b 55 f4             	mov    -0xc(%ebp),%edx$/;"	l
bfa	sh.asm	/^     bfa:	c7 44 90 04 00 00 00 	movl   $0x0,0x4(%eax,%edx,4)$/;"	l
bfa	usertests.asm	/^     bfa:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
bfd	usertests.asm	/^     bfd:	89 04 24             	mov    %eax,(%esp)$/;"	l
bfree	fs.c	/^bfree(int dev, uint b)$/;"	f	file:
bget	bio.c	/^bget(uint dev, uint sector)$/;"	f	file:
bi	kernel.asm	/^  bi = b % BPB;$/;"	d
bigargtest	usertests.c	/^bigargtest(void)$/;"	f
bigdir	usertests.c	/^bigdir(void)$/;"	f
bigfile	usertests.c	/^bigfile(void)$/;"	f
bigwrite	usertests.c	/^bigwrite(void)$/;"	f
binit	bio.c	/^binit(void)$/;"	f
bitblocks	mkfs.c	/^uint bitblocks;$/;"	v
bmap	fs.c	/^bmap(struct inode *ip, uint bn)$/;"	f	file:
bootmain	bootmain.c	/^bootmain(void)$/;"	f
bp	cat.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	echo.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	grep.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	init.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	kernel.asm	/^    bp = bread(dev, BBLOCK(b, sb.ninodes));$/;"	d
bp	kernel.asm	/^    bp = bread(dev, IBLOCK(inum));$/;"	d
bp	kernel.asm	/^    bp = bread(ip->dev, IBLOCK(ip->inum));$/;"	d
bp	kernel.asm	/^    bp = bread(ip->dev, addr);$/;"	d
bp	kernel.asm	/^    bp = bread(ip->dev, bmap(ip, off\/BSIZE));$/;"	d
bp	kernel.asm	/^    bp = bread(ip->dev, ip->addrs[NDIRECT]);$/;"	d
bp	kernel.asm	/^  bp = 0;$/;"	d
bp	kernel.asm	/^  bp = bread(dev, 1);$/;"	d
bp	kernel.asm	/^  bp = bread(dev, BBLOCK(b, sb.ninodes));$/;"	d
bp	kernel.asm	/^  bp = bread(dev, bno);$/;"	d
bp	kernel.asm	/^  bp = bread(ip->dev, IBLOCK(ip->inum));$/;"	d
bp	kill.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	ln.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	ls.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	mkdir.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	rm.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	sh.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	stressfs.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	usertests.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	wc.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	zombie.asm	/^  bp = (Header*)ap - 1;$/;"	d
bread	bio.c	/^bread(uint dev, uint sector)$/;"	f
brelse	bio.c	/^brelse(struct buf *b)$/;"	f
bsstest	usertests.c	/^bsstest(void)$/;"	f
buf	bio.c	/^  struct buf buf[NBUF];$/;"	m	struct:__anon9	typeref:struct:__anon9::buf	file:
buf	buf.h	/^struct buf {$/;"	s
buf	cat.c	/^char buf[512];$/;"	v
buf	console.c	/^  char buf[INPUT_BUF];$/;"	m	struct:__anon7	file:
buf	grep.c	/^char buf[1024];$/;"	v
buf	kernel.asm	/^  buf = (char*)p;$/;"	d
buf	usertests.c	/^char buf[8192];$/;"	v
buf	wc.c	/^char buf[512];$/;"	v
busy	log.c	/^  int busy; \/\/ a transaction is active$/;"	m	struct:log	file:
bwrite	bio.c	/^bwrite(struct buf *b)$/;"	f
bzero	fs.c	/^bzero(int dev, int bno)$/;"	f	file:
c	cat.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	echo.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	forktest.asm	/^   c:	e8 98 01 00 00       	call   1a9 <strlen>$/;"	l
c	grep.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	init.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	initcode.asm	/^   c:	b8 07 00 00 00       	mov    $0x7,%eax$/;"	l
c	kernel.asm	/^        c = (c == '\\r') ? '\\n' : c;$/;"	d
c	kernel.asm	/^    c = fmt[++i] & 0xff;$/;"	d
c	kernel.asm	/^    c = input.buf[input.r++ % INPUT_BUF];$/;"	d
c	kernel.asm	/^  c = &cpus[cpunum()];$/;"	d
c	kernel.asm	/^  c = charcode[shift & (CTL | SHIFT)][data];$/;"	d
c	kill.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	ln.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	ls.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	mkdir.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	rm.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	sh.asm	/^       c:	e8 50 0f 00 00       	call   f61 <exit>$/;"	l
c	sh.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	stressfs.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	stressfs.asm	/^   c:	c7 84 24 1e 02 00 00 	movl   $0x65727473,0x21e(%esp)$/;"	l
c	usertests.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	usertests.asm	/^  c = sbrk(-(sbrk(0) - oldbrk));$/;"	d
c	usertests.asm	/^  c = sbrk(-4096);$/;"	d
c	usertests.asm	/^  c = sbrk(0);$/;"	d
c	usertests.asm	/^  c = sbrk(1);$/;"	d
c	usertests.asm	/^  c = sbrk(4096);$/;"	d
c	wc.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	zombie.asm	/^    c = fmt[i] & 0xff;$/;"	d
c0	echo.asm	/^  c0:	c3                   	ret    $/;"	l
c0	ln.asm	/^  c0:	88 10                	mov    %dl,(%eax)$/;"	l
c0	mkdir.asm	/^  c0:	90                   	nop$/;"	l
c0	rm.asm	/^  c0:	90                   	nop$/;"	l
c0	wc.asm	/^  c0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
c00	usertests.asm	/^     c00:	e8 2f 30 00 00       	call   3c34 <write>$/;"	l
c01	sh.asm	/^     c01:	00 $/;"	l
c02	sh.asm	/^     c02:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
c05	sh.asm	/^     c05:	8b 55 f4             	mov    -0xc(%ebp),%edx$/;"	l
c05	usertests.asm	/^     c05:	83 f8 0a             	cmp    $0xa,%eax$/;"	l
c08	sh.asm	/^     c08:	83 c2 08             	add    $0x8,%edx$/;"	l
c08	usertests.asm	/^     c08:	74 16                	je     c20 <sharedfd+0xcb>$/;"	l
c0a	usertests.asm	/^     c0a:	c7 44 24 04 e8 45 00 	movl   $0x45e8,0x4(%esp)$/;"	l
c0b	sh.asm	/^     c0b:	c7 44 90 0c 00 00 00 	movl   $0x0,0xc(%eax,%edx,4)$/;"	l
c1	echo.asm	/^  c1:	55                   	push   %ebp$/;"	l
c1	grep.asm	/^  c1:	c7 04 24 60 0e 00 00 	movl   $0xe60,(%esp)$/;"	l
c1	init.asm	/^  c1:	c7 44 24 04 f4 08 00 	movl   $0x8f4,0x4(%esp)$/;"	l
c1	kill.asm	/^  c1:	83 45 08 01          	addl   $0x1,0x8(%ebp)$/;"	l
c1	mkdir.asm	/^  c1:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c1	rm.asm	/^  c1:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c1	sh.asm	/^      c1:	00 $/;"	l
c1	usertests.asm	/^      c1:	e8 ce 3c 00 00       	call   3d94 <printf>$/;"	l
c11	usertests.asm	/^     c11:	00 $/;"	l
c12	sh.asm	/^     c12:	00 $/;"	l
c12	usertests.asm	/^     c12:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
c13	sh.asm	/^     c13:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
c16	sh.asm	/^     c16:	c9                   	leave  $/;"	l
c17	sh.asm	/^     c17:	c3                   	ret    $/;"	l
c18	sh.asm	/^     c18:	55                   	push   %ebp$/;"	l
c19	sh.asm	/^     c19:	89 e5                	mov    %esp,%ebp$/;"	l
c19	usertests.asm	/^     c19:	e8 76 31 00 00       	call   3d94 <printf>$/;"	l
c1b	sh.asm	/^     c1b:	83 ec 38             	sub    $0x38,%esp$/;"	l
c1e	sh.asm	/^     c1e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)$/;"	l
c1e	usertests.asm	/^     c1e:	eb 0d                	jmp    c2d <sharedfd+0xd8>$/;"	l
c2	echo.asm	/^  c2:	89 e5                	mov    %esp,%ebp$/;"	l
c2	forktest.asm	/^  c2:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)$/;"	l
c2	ln.asm	/^  c2:	0f b6 00             	movzbl (%eax),%eax$/;"	l
c2	sh.asm	/^      c2:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)$/;"	l
c20	usertests.asm	/^     c20:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)$/;"	l
c22	sh.asm	/^     c22:	75 0a                	jne    c2e <nulterminate+0x16>$/;"	l
c24	sh.asm	/^     c24:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
c24	usertests.asm	/^     c24:	81 7d f4 e7 03 00 00 	cmpl   $0x3e7,-0xc(%ebp)$/;"	l
c29	sh.asm	/^     c29:	e9 c9 00 00 00       	jmp    cf7 <nulterminate+0xdf>$/;"	l
c2b	usertests.asm	/^     c2b:	7e be                	jle    beb <sharedfd+0x96>$/;"	l
c2d	usertests.asm	/^     c2d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)$/;"	l
c2e	sh.asm	/^     c2e:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c3	cat.asm	/^  c3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx$/;"	l
c3	ls.asm	/^  c3:	00 $/;"	l
c31	sh.asm	/^     c31:	8b 00                	mov    (%eax),%eax$/;"	l
c31	usertests.asm	/^     c31:	75 05                	jne    c38 <sharedfd+0xe3>$/;"	l
c33	sh.asm	/^     c33:	83 f8 05             	cmp    $0x5,%eax$/;"	l
c33	usertests.asm	/^     c33:	e8 dc 2f 00 00       	call   3c14 <exit>$/;"	l
c36	sh.asm	/^     c36:	0f 87 b8 00 00 00    	ja     cf4 <nulterminate+0xdc>$/;"	l
c38	usertests.asm	/^     c38:	e8 df 2f 00 00       	call   3c1c <wait>$/;"	l
c3c	sh.asm	/^     c3c:	8b 04 85 88 15 00 00 	mov    0x1588(,%eax,4),%eax$/;"	l
c3d	usertests.asm	/^     c3d:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
c4	echo.asm	/^  c4:	eb 08                	jmp    ce <strcmp+0xd>$/;"	l
c4	ls.asm	/^  c4:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c4	mkdir.asm	/^  c4:	8d 50 01             	lea    0x1(%eax),%edx$/;"	l
c4	rm.asm	/^  c4:	8d 50 01             	lea    0x1(%eax),%edx$/;"	l
c4	zombie.asm	/^  c4:	eb 04                	jmp    ca <strlen+0x13>$/;"	l
c40	usertests.asm	/^     c40:	89 04 24             	mov    %eax,(%esp)$/;"	l
c43	sh.asm	/^     c43:	ff e0                	jmp    *%eax$/;"	l
c43	usertests.asm	/^     c43:	e8 f4 2f 00 00       	call   3c3c <close>$/;"	l
c45	sh.asm	/^     c45:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c48	sh.asm	/^     c48:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
c48	usertests.asm	/^     c48:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)$/;"	l
c4b	sh.asm	/^     c4b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
c4f	usertests.asm	/^     c4f:	00 $/;"	l
c5	kill.asm	/^  c5:	83 45 0c 01          	addl   $0x1,0xc(%ebp)$/;"	l
c5	ln.asm	/^  c5:	84 c0                	test   %al,%al$/;"	l
c50	usertests.asm	/^     c50:	c7 04 24 b2 45 00 00 	movl   $0x45b2,(%esp)$/;"	l
c52	sh.asm	/^     c52:	eb 14                	jmp    c68 <nulterminate+0x50>$/;"	l
c54	sh.asm	/^     c54:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
c57	sh.asm	/^     c57:	8b 55 f4             	mov    -0xc(%ebp),%edx$/;"	l
c57	usertests.asm	/^     c57:	e8 f8 2f 00 00       	call   3c54 <open>$/;"	l
c5a	sh.asm	/^     c5a:	83 c2 08             	add    $0x8,%edx$/;"	l
c5c	usertests.asm	/^     c5c:	89 45 e8             	mov    %eax,-0x18(%ebp)$/;"	l
c5d	sh.asm	/^     c5d:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax$/;"	l
c5f	usertests.asm	/^     c5f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)$/;"	l
c6	echo.asm	/^  c6:	83 45 08 01          	addl   $0x1,0x8(%ebp)$/;"	l
c6	forktest.asm	/^  c6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
c6	stressfs.asm	/^  c6:	00 $/;"	l
c6	usertests.asm	/^      c6:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)$/;"	l
c6	zombie.asm	/^  c6:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)$/;"	l
c61	sh.asm	/^     c61:	c6 00 00             	movb   $0x0,(%eax)$/;"	l
c63	usertests.asm	/^     c63:	79 19                	jns    c7e <sharedfd+0x129>$/;"	l
c64	sh.asm	/^     c64:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)$/;"	l
c65	usertests.asm	/^     c65:	c7 44 24 04 08 46 00 	movl   $0x4608,0x4(%esp)$/;"	l
c68	sh.asm	/^     c68:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
c6b	sh.asm	/^     c6b:	8b 55 f4             	mov    -0xc(%ebp),%edx$/;"	l
c6c	usertests.asm	/^     c6c:	00 $/;"	l
c6d	usertests.asm	/^     c6d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
c6e	sh.asm	/^     c6e:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax$/;"	l
c7	ln.asm	/^  c7:	75 e2                	jne    ab <strcpy+0xd>$/;"	l
c7	ls.asm	/^  c7:	89 04 24             	mov    %eax,(%esp)$/;"	l
c7	mkdir.asm	/^  c7:	89 55 08             	mov    %edx,0x8(%ebp)$/;"	l
c7	rm.asm	/^  c7:	89 55 08             	mov    %edx,0x8(%ebp)$/;"	l
c7	stressfs.asm	/^  c7:	8d 84 24 1e 02 00 00 	lea    0x21e(%esp),%eax$/;"	l
c7	wc.asm	/^  c7:	e8 f5 04 00 00       	call   5c1 <printf>$/;"	l
c72	sh.asm	/^     c72:	85 c0                	test   %eax,%eax$/;"	l
c74	sh.asm	/^     c74:	75 de                	jne    c54 <nulterminate+0x3c>$/;"	l
c74	usertests.asm	/^     c74:	e8 1b 31 00 00       	call   3d94 <printf>$/;"	l
c76	sh.asm	/^     c76:	eb 7c                	jmp    cf4 <nulterminate+0xdc>$/;"	l
c78	sh.asm	/^     c78:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c79	usertests.asm	/^     c79:	e9 d3 00 00 00       	jmp    d51 <sharedfd+0x1fc>$/;"	l
c7b	sh.asm	/^     c7b:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
c7e	sh.asm	/^     c7e:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
c7e	usertests.asm	/^     c7e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)$/;"	l
c8	grep.asm	/^  c8:	e8 ab 04 00 00       	call   578 <memmove>$/;"	l
c8	init.asm	/^  c8:	00 $/;"	l
c81	sh.asm	/^     c81:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
c84	sh.asm	/^     c84:	89 04 24             	mov    %eax,(%esp)$/;"	l
c85	usertests.asm	/^     c85:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
c87	sh.asm	/^     c87:	e8 8c ff ff ff       	call   c18 <nulterminate>$/;"	l
c88	usertests.asm	/^     c88:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
c8b	usertests.asm	/^     c8b:	eb 3b                	jmp    cc8 <sharedfd+0x173>$/;"	l
c8c	sh.asm	/^     c8c:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
c8d	usertests.asm	/^     c8d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
c8f	sh.asm	/^     c8f:	8b 40 0c             	mov    0xc(%eax),%eax$/;"	l
c9	init.asm	/^  c9:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
c9	kill.asm	/^  c9:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c9	ln.asm	/^  c9:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
c9	sh.asm	/^      c9:	e8 13 10 00 00       	call   10e1 <printf>$/;"	l
c92	sh.asm	/^     c92:	c6 00 00             	movb   $0x0,(%eax)$/;"	l
c94	usertests.asm	/^     c94:	eb 2a                	jmp    cc0 <sharedfd+0x16b>$/;"	l
c95	sh.asm	/^     c95:	eb 5d                	jmp    cf4 <nulterminate+0xdc>$/;"	l
c96	usertests.asm	/^     c96:	8d 55 d6             	lea    -0x2a(%ebp),%edx$/;"	l
c97	sh.asm	/^     c97:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c99	usertests.asm	/^     c99:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
c9a	sh.asm	/^     c9a:	89 45 e8             	mov    %eax,-0x18(%ebp)$/;"	l
c9c	usertests.asm	/^     c9c:	01 d0                	add    %edx,%eax$/;"	l
c9d	sh.asm	/^     c9d:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
c9e	usertests.asm	/^     c9e:	0f b6 00             	movzbl (%eax),%eax$/;"	l
ca	cat.asm	/^  ca:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
ca	echo.asm	/^  ca:	83 45 0c 01          	addl   $0x1,0xc(%ebp)$/;"	l
ca	forktest.asm	/^  ca:	7f d4                	jg     a0 <forktest+0x77>$/;"	l
ca	ls.asm	/^  ca:	e8 34 05 00 00       	call   603 <open>$/;"	l
ca	mkdir.asm	/^  ca:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
ca	rm.asm	/^  ca:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
ca	zombie.asm	/^  ca:	8b 55 fc             	mov    -0x4(%ebp),%edx$/;"	l
ca0	sh.asm	/^     ca0:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
ca1	usertests.asm	/^     ca1:	3c 63                	cmp    $0x63,%al$/;"	l
ca3	sh.asm	/^     ca3:	89 04 24             	mov    %eax,(%esp)$/;"	l
ca3	usertests.asm	/^     ca3:	75 04                	jne    ca9 <sharedfd+0x154>$/;"	l
ca5	usertests.asm	/^     ca5:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)$/;"	l
ca6	sh.asm	/^     ca6:	e8 6d ff ff ff       	call   c18 <nulterminate>$/;"	l
ca9	usertests.asm	/^     ca9:	8d 55 d6             	lea    -0x2a(%ebp),%edx$/;"	l
cab	sh.asm	/^     cab:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
cac	usertests.asm	/^     cac:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
cae	sh.asm	/^     cae:	8b 40 08             	mov    0x8(%eax),%eax$/;"	l
caf	usertests.asm	/^     caf:	01 d0                	add    %edx,%eax$/;"	l
cat	cat.c	/^cat(int fd)$/;"	f
cb1	sh.asm	/^     cb1:	89 04 24             	mov    %eax,(%esp)$/;"	l
cb1	usertests.asm	/^     cb1:	0f b6 00             	movzbl (%eax),%eax$/;"	l
cb4	sh.asm	/^     cb4:	e8 5f ff ff ff       	call   c18 <nulterminate>$/;"	l
cb4	usertests.asm	/^     cb4:	3c 70                	cmp    $0x70,%al$/;"	l
cb6	usertests.asm	/^     cb6:	75 04                	jne    cbc <sharedfd+0x167>$/;"	l
cb8	usertests.asm	/^     cb8:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)$/;"	l
cb9	sh.asm	/^     cb9:	eb 39                	jmp    cf4 <nulterminate+0xdc>$/;"	l
cbb	sh.asm	/^     cbb:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
cbc	usertests.asm	/^     cbc:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)$/;"	l
cbe	sh.asm	/^     cbe:	89 45 e4             	mov    %eax,-0x1c(%ebp)$/;"	l
cc	cat.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	echo.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	forktest.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	forktest.asm	/^  cc:	e8 b4 02 00 00       	call   385 <wait>$/;"	l
cc	grep.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	init.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	kill.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	kill.asm	/^  cc:	0f b6 00             	movzbl (%eax),%eax$/;"	l
cc	ln.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	ln.asm	/^  cc:	c9                   	leave  $/;"	l
cc	ls.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	mkdir.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	rm.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	sh.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	stressfs.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	usertests.asm	/^        cc = sizeof(buf);$/;"	d
cc	usertests.asm	/^      cc = cc * 2;$/;"	d
cc	usertests.asm	/^    cc = 1;$/;"	d
cc	usertests.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	usertests.asm	/^    cc = read(fd, buf, 300);$/;"	d
cc	usertests.asm	/^  cc = read(fd, buf, sizeof(buf));$/;"	d
cc	wc.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	wc.asm	/^  cc:	e8 70 03 00 00       	call   441 <exit>$/;"	l
cc	zombie.asm	/^    cc = read(0, &c, 1);$/;"	d
cc0	usertests.asm	/^     cc0:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
cc1	sh.asm	/^     cc1:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
cc3	usertests.asm	/^     cc3:	83 f8 09             	cmp    $0x9,%eax$/;"	l
cc4	sh.asm	/^     cc4:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
cc6	usertests.asm	/^     cc6:	76 ce                	jbe    c96 <sharedfd+0x141>$/;"	l
cc7	sh.asm	/^     cc7:	89 04 24             	mov    %eax,(%esp)$/;"	l
cc8	usertests.asm	/^     cc8:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)$/;"	l
cca	sh.asm	/^     cca:	e8 49 ff ff ff       	call   c18 <nulterminate>$/;"	l
ccf	sh.asm	/^     ccf:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
ccf	usertests.asm	/^     ccf:	00 $/;"	l
cd	cat.asm	/^  cd:	01 d0                	add    %edx,%eax$/;"	l
cd	grep.asm	/^  cd:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
cd	ln.asm	/^  cd:	c3                   	ret    $/;"	l
cd	mkdir.asm	/^  cd:	8d 4a 01             	lea    0x1(%edx),%ecx$/;"	l
cd	rm.asm	/^  cd:	8d 4a 01             	lea    0x1(%edx),%ecx$/;"	l
cd	usertests.asm	/^      cd:	00 $/;"	l
cd	zombie.asm	/^  cd:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
cd0	usertests.asm	/^     cd0:	8d 45 d6             	lea    -0x2a(%ebp),%eax$/;"	l
cd2	sh.asm	/^     cd2:	8b 40 08             	mov    0x8(%eax),%eax$/;"	l
cd3	usertests.asm	/^     cd3:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
cd5	sh.asm	/^     cd5:	89 04 24             	mov    %eax,(%esp)$/;"	l
cd7	usertests.asm	/^     cd7:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
cd8	sh.asm	/^     cd8:	e8 3b ff ff ff       	call   c18 <nulterminate>$/;"	l
cda	usertests.asm	/^     cda:	89 04 24             	mov    %eax,(%esp)$/;"	l
cdd	sh.asm	/^     cdd:	eb 15                	jmp    cf4 <nulterminate+0xdc>$/;"	l
cdd	usertests.asm	/^     cdd:	e8 4a 2f 00 00       	call   3c2c <read>$/;"	l
cdf	sh.asm	/^     cdf:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ce	echo.asm	/^  ce:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ce	ln.asm	/^  ce:	55                   	push   %ebp$/;"	l
ce	sh.asm	/^      ce:	e8 8e 0e 00 00       	call   f61 <exit>$/;"	l
ce	stressfs.asm	/^  ce:	89 04 24             	mov    %eax,(%esp)$/;"	l
ce	usertests.asm	/^      ce:	c7 04 24 de 41 00 00 	movl   $0x41de,(%esp)$/;"	l
ce2	sh.asm	/^     ce2:	89 45 e0             	mov    %eax,-0x20(%ebp)$/;"	l
ce2	usertests.asm	/^     ce2:	89 45 e0             	mov    %eax,-0x20(%ebp)$/;"	l
ce5	sh.asm	/^     ce5:	8b 45 e0             	mov    -0x20(%ebp),%eax$/;"	l
ce5	usertests.asm	/^     ce5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)$/;"	l
ce8	sh.asm	/^     ce8:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
ce9	usertests.asm	/^     ce9:	7f a2                	jg     c8d <sharedfd+0x138>$/;"	l
ceb	sh.asm	/^     ceb:	89 04 24             	mov    %eax,(%esp)$/;"	l
ceb	usertests.asm	/^     ceb:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
cee	sh.asm	/^     cee:	e8 25 ff ff ff       	call   c18 <nulterminate>$/;"	l
cee	usertests.asm	/^     cee:	89 04 24             	mov    %eax,(%esp)$/;"	l
cf	cat.asm	/^  cf:	8b 00                	mov    (%eax),%eax$/;"	l
cf	kill.asm	/^  cf:	84 c0                	test   %al,%al$/;"	l
cf	ln.asm	/^  cf:	89 e5                	mov    %esp,%ebp$/;"	l
cf	ls.asm	/^  cf:	89 45 e4             	mov    %eax,-0x1c(%ebp)$/;"	l
cf1	usertests.asm	/^     cf1:	e8 46 2f 00 00       	call   3c3c <close>$/;"	l
cf3	sh.asm	/^     cf3:	90                   	nop$/;"	l
cf4	sh.asm	/^     cf4:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
cf6	usertests.asm	/^     cf6:	c7 04 24 b2 45 00 00 	movl   $0x45b2,(%esp)$/;"	l
cf7	sh.asm	/^     cf7:	c9                   	leave  $/;"	l
cf8	sh.asm	/^     cf8:	c3                   	ret    $/;"	l
cf9	sh.asm	/^     cf9:	55                   	push   %ebp$/;"	l
cfa	sh.asm	/^     cfa:	89 e5                	mov    %esp,%ebp$/;"	l
cfc	sh.asm	/^     cfc:	57                   	push   %edi$/;"	l
cfd	sh.asm	/^     cfd:	53                   	push   %ebx$/;"	l
cfd	usertests.asm	/^     cfd:	e8 62 2f 00 00       	call   3c64 <unlink>$/;"	l
cfe	sh.asm	/^     cfe:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
cgaputc	console.c	/^cgaputc(int c)$/;"	f	file:
chan	proc.h	/^  void *chan;                  \/\/ If non-zero, sleeping on chan$/;"	m	struct:proc
char	cat.asm	/^char buf[512];$/;"	l
char	grep.asm	/^char buf[1024];$/;"	l
char	init.asm	/^char *argv[] = { "sh", 0 };$/;"	l
char	sh.asm	/^char symbols[] = "<|>&;()";$/;"	l
char	sh.asm	/^char whitespace[] = " \\t\\r\\n\\v";$/;"	l
char	usertests.asm	/^char uninit[10000];$/;"	l
char	wc.asm	/^char buf[512];$/;"	l
checksum	mp.h	/^  uchar checksum;               \/\/ all bytes must add up to 0$/;"	m	struct:mp
checksum	mp.h	/^  uchar checksum;               \/\/ all bytes must add up to 0$/;"	m	struct:mpconf
clearpteu	vm.c	/^clearpteu(pde_t *pgdir, char *uva)$/;"	f
cli	x86.h	/^cli(void)$/;"	f
cmd	sh.asm	/^      cmd = redircmd(cmd, q, eq, O_RDONLY, 0);$/;"	d
cmd	sh.asm	/^      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);$/;"	d
cmd	sh.asm	/^    cmd = backcmd(cmd);$/;"	d
cmd	sh.asm	/^    cmd = listcmd(cmd, parseline(ps, es));$/;"	d
cmd	sh.asm	/^    cmd = pipecmd(cmd, parsepipe(ps, es));$/;"	d
cmd	sh.asm	/^  cmd = (struct execcmd*)ret;$/;"	d
cmd	sh.asm	/^  cmd = malloc(sizeof(*cmd));$/;"	d
cmd	sh.asm	/^  cmd = parseexec(ps, es);$/;"	d
cmd	sh.asm	/^  cmd = parseline(&s, es);$/;"	d
cmd	sh.asm	/^  cmd = parseline(ps, es);$/;"	d
cmd	sh.asm	/^  cmd = parsepipe(ps, es);$/;"	d
cmd	sh.asm	/^  cmd = parseredirs(cmd, ps, es);$/;"	d
cmd	sh.c	/^  struct cmd *cmd;$/;"	m	struct:backcmd	typeref:struct:backcmd::cmd	file:
cmd	sh.c	/^  struct cmd *cmd;$/;"	m	struct:redircmd	typeref:struct:redircmd::cmd	file:
cmd	sh.c	/^struct cmd {$/;"	s	file:
code	kernel.asm	/^  code = p2v(0x7000);$/;"	d
commit_trans	log.c	/^commit_trans(void)$/;"	f
concreate	usertests.c	/^concreate(void)$/;"	f
conf	kernel.asm	/^  conf = (struct mpconf*) p2v((uint) mp->physaddr);$/;"	d
cons	console.c	/^} cons;$/;"	v	typeref:struct:__anon6	file:
consoleinit	console.c	/^consoleinit(void)$/;"	f
consoleintr	console.c	/^consoleintr(int (*getc)(void))$/;"	f
consoleread	console.c	/^consoleread(struct inode *ip, char *dst, int n)$/;"	f
consolewrite	console.c	/^consolewrite(struct inode *ip, char *buf, int n)$/;"	f
consputc	console.c	/^consputc(int c)$/;"	f
context	proc.h	/^  struct context *context;     \/\/ swtch() here to run process$/;"	m	struct:proc	typeref:struct:proc::context
context	proc.h	/^struct context {$/;"	s
copyout	vm.c	/^copyout(pde_t *pgdir, uint va, void *p, uint len)$/;"	f
copyuvm	vm.c	/^copyuvm(pde_t *pgdir, uint sz)$/;"	f
cprintf	console.c	/^cprintf(char *fmt, ...)$/;"	f
cpu	kernel.asm	/^  cpu = c;$/;"	d
cpu	proc.h	/^  struct cpu *cpu;$/;"	m	struct:cpu	typeref:struct:cpu::cpu
cpu	proc.h	/^struct cpu {$/;"	s
cpu	spinlock.h	/^  struct cpu *cpu;   \/\/ The cpu holding the lock.$/;"	m	struct:spinlock	typeref:struct:spinlock::cpu
cpunum	lapic.c	/^cpunum(void)$/;"	f
cpus	mp.c	/^struct cpu cpus[NCPU];$/;"	v	typeref:struct:cpu
cr3	mmu.h	/^  void *cr3;         \/\/ Page directory base$/;"	m	struct:taskstate
create	sysfile.c	/^create(char *path, short type, short major, short minor)$/;"	f	file:
createdelete	usertests.c	/^createdelete(void)$/;"	f
createtest	usertests.c	/^createtest(void)$/;"	f
crt	console.c	/^static ushort *crt = (ushort*)P2V(0xb8000);  \/\/ CGA memory$/;"	v	file:
cs	mmu.h	/^  uint cs : 16;         \/\/ code segment selector$/;"	m	struct:gatedesc
cs	mmu.h	/^  ushort cs;$/;"	m	struct:taskstate
cs	x86.h	/^  ushort cs;$/;"	m	struct:trapframe
ctlmap	kbd.h	/^static uchar ctlmap[256] =$/;"	v
cwd	proc.h	/^  struct inode *cwd;           \/\/ Current directory$/;"	m	struct:proc	typeref:struct:proc::inode
d	grep.asm	/^   d:	e9 bb 00 00 00       	jmp    cd <grep+0xcd>$/;"	l
d	kernel.asm	/^  d = dst;$/;"	d
d	kill.asm	/^   d:	7f 19                	jg     28 <main+0x28>$/;"	l
d	ln.asm	/^   d:	74 19                	je     28 <main+0x28>$/;"	l
d	ls.asm	/^   d:	e8 dd 03 00 00       	call   3ef <strlen>$/;"	l
d	mkdir.asm	/^   d:	7f 19                	jg     28 <main+0x28>$/;"	l
d	rm.asm	/^   d:	7f 19                	jg     28 <main+0x28>$/;"	l
d	wc.asm	/^   d:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
d0	grep.asm	/^  d0:	ba 00 04 00 00       	mov    $0x400,%edx$/;"	l
d0	init.asm	/^  d0:	e8 22 04 00 00       	call   4f7 <printf>$/;"	l
d0	mkdir.asm	/^  d0:	89 4d 0c             	mov    %ecx,0xc(%ebp)$/;"	l
d0	rm.asm	/^  d0:	89 4d 0c             	mov    %ecx,0xc(%ebp)$/;"	l
d0	zombie.asm	/^  d0:	01 d0                	add    %edx,%eax$/;"	l
d01	sh.asm	/^     d01:	8b 55 10             	mov    0x10(%ebp),%edx$/;"	l
d02	usertests.asm	/^     d02:	81 7d f0 10 27 00 00 	cmpl   $0x2710,-0x10(%ebp)$/;"	l
d04	sh.asm	/^     d04:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
d07	sh.asm	/^     d07:	89 cb                	mov    %ecx,%ebx$/;"	l
d09	sh.asm	/^     d09:	89 df                	mov    %ebx,%edi$/;"	l
d09	usertests.asm	/^     d09:	75 1f                	jne    d2a <sharedfd+0x1d5>$/;"	l
d0b	sh.asm	/^     d0b:	89 d1                	mov    %edx,%ecx$/;"	l
d0b	usertests.asm	/^     d0b:	81 7d ec 10 27 00 00 	cmpl   $0x2710,-0x14(%ebp)$/;"	l
d0d	sh.asm	/^     d0d:	fc                   	cld    $/;"	l
d0e	sh.asm	/^     d0e:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
d1	cat.asm	/^  d1:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
d1	echo.asm	/^  d1:	0f b6 00             	movzbl (%eax),%eax$/;"	l
d1	forktest.asm	/^  d1:	83 f8 ff             	cmp    $0xffffffff,%eax$/;"	l
d1	kill.asm	/^  d1:	74 10                	je     e3 <strcmp+0x27>$/;"	l
d1	ln.asm	/^  d1:	eb 08                	jmp    db <strcmp+0xd>$/;"	l
d1	stressfs.asm	/^  d1:	e8 85 03 00 00       	call   45b <open>$/;"	l
d1	wc.asm	/^  d1:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
d10	sh.asm	/^     d10:	89 ca                	mov    %ecx,%edx$/;"	l
d12	sh.asm	/^     d12:	89 fb                	mov    %edi,%ebx$/;"	l
d12	usertests.asm	/^     d12:	75 16                	jne    d2a <sharedfd+0x1d5>$/;"	l
d14	sh.asm	/^     d14:	89 5d 08             	mov    %ebx,0x8(%ebp)$/;"	l
d14	usertests.asm	/^     d14:	c7 44 24 04 33 46 00 	movl   $0x4633,0x4(%esp)$/;"	l
d17	sh.asm	/^     d17:	89 55 10             	mov    %edx,0x10(%ebp)$/;"	l
d1a	sh.asm	/^     d1a:	5b                   	pop    %ebx$/;"	l
d1b	sh.asm	/^     d1b:	5f                   	pop    %edi$/;"	l
d1b	usertests.asm	/^     d1b:	00 $/;"	l
d1c	sh.asm	/^     d1c:	5d                   	pop    %ebp$/;"	l
d1c	usertests.asm	/^     d1c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
d1d	sh.asm	/^     d1d:	c3                   	ret    $/;"	l
d1e	sh.asm	/^     d1e:	55                   	push   %ebp$/;"	l
d1f	sh.asm	/^     d1f:	89 e5                	mov    %esp,%ebp$/;"	l
d2	ls.asm	/^  d2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)$/;"	l
d2	zombie.asm	/^  d2:	0f b6 00             	movzbl (%eax),%eax$/;"	l
d21	sh.asm	/^     d21:	83 ec 10             	sub    $0x10,%esp$/;"	l
d23	usertests.asm	/^     d23:	e8 6c 30 00 00       	call   3d94 <printf>$/;"	l
d24	sh.asm	/^     d24:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d27	sh.asm	/^     d27:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
d28	usertests.asm	/^     d28:	eb 27                	jmp    d51 <sharedfd+0x1fc>$/;"	l
d2a	sh.asm	/^     d2a:	90                   	nop$/;"	l
d2a	usertests.asm	/^     d2a:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
d2b	sh.asm	/^     d2b:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d2d	usertests.asm	/^     d2d:	89 44 24 0c          	mov    %eax,0xc(%esp)$/;"	l
d2e	sh.asm	/^     d2e:	8d 50 01             	lea    0x1(%eax),%edx$/;"	l
d3	kill.asm	/^  d3:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d3	ln.asm	/^  d3:	83 45 08 01          	addl   $0x1,0x8(%ebp)$/;"	l
d3	mkdir.asm	/^  d3:	0f b6 12             	movzbl (%edx),%edx$/;"	l
d3	rm.asm	/^  d3:	0f b6 12             	movzbl (%edx),%edx$/;"	l
d3	sh.asm	/^      d3:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
d31	sh.asm	/^     d31:	89 55 08             	mov    %edx,0x8(%ebp)$/;"	l
d31	usertests.asm	/^     d31:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
d34	sh.asm	/^     d34:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
d34	usertests.asm	/^     d34:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
d37	sh.asm	/^     d37:	8d 4a 01             	lea    0x1(%edx),%ecx$/;"	l
d38	usertests.asm	/^     d38:	c7 44 24 04 40 46 00 	movl   $0x4640,0x4(%esp)$/;"	l
d3a	sh.asm	/^     d3a:	89 4d 0c             	mov    %ecx,0xc(%ebp)$/;"	l
d3d	sh.asm	/^     d3d:	0f b6 12             	movzbl (%edx),%edx$/;"	l
d3f	usertests.asm	/^     d3f:	00 $/;"	l
d4	echo.asm	/^  d4:	84 c0                	test   %al,%al$/;"	l
d4	forktest.asm	/^  d4:	74 19                	je     ef <forktest+0xc6>$/;"	l
d4	wc.asm	/^  d4:	89 44 24 14          	mov    %eax,0x14(%esp)$/;"	l
d40	sh.asm	/^     d40:	88 10                	mov    %dl,(%eax)$/;"	l
d40	usertests.asm	/^     d40:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
d42	sh.asm	/^     d42:	0f b6 00             	movzbl (%eax),%eax$/;"	l
d45	sh.asm	/^     d45:	84 c0                	test   %al,%al$/;"	l
d47	sh.asm	/^     d47:	75 e2                	jne    d2b <strcpy+0xd>$/;"	l
d47	usertests.asm	/^     d47:	e8 48 30 00 00       	call   3d94 <printf>$/;"	l
d49	sh.asm	/^     d49:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d4c	sh.asm	/^     d4c:	c9                   	leave  $/;"	l
d4c	usertests.asm	/^     d4c:	e8 c3 2e 00 00       	call   3c14 <exit>$/;"	l
d4d	sh.asm	/^     d4d:	c3                   	ret    $/;"	l
d4e	sh.asm	/^     d4e:	55                   	push   %ebp$/;"	l
d4f	sh.asm	/^     d4f:	89 e5                	mov    %esp,%ebp$/;"	l
d5	cat.asm	/^  d5:	c7 44 24 04 e2 08 00 	movl   $0x8e2,0x4(%esp)$/;"	l
d5	grep.asm	/^  d5:	29 c2                	sub    %eax,%edx$/;"	l
d5	init.asm	/^  d5:	e8 9d 02 00 00       	call   377 <exit>$/;"	l
d5	usertests.asm	/^      d5:	e8 7a 3b 00 00       	call   3c54 <open>$/;"	l
d5	zombie.asm	/^  d5:	84 c0                	test   %al,%al$/;"	l
d51	sh.asm	/^     d51:	eb 08                	jmp    d5b <strcmp+0xd>$/;"	l
d51	usertests.asm	/^     d51:	c9                   	leave  $/;"	l
d52	usertests.asm	/^     d52:	c3                   	ret    $/;"	l
d53	sh.asm	/^     d53:	83 45 08 01          	addl   $0x1,0x8(%ebp)$/;"	l
d53	usertests.asm	/^     d53:	55                   	push   %ebp$/;"	l
d54	usertests.asm	/^     d54:	89 e5                	mov    %esp,%ebp$/;"	l
d56	usertests.asm	/^     d56:	83 ec 38             	sub    $0x38,%esp$/;"	l
d57	sh.asm	/^     d57:	83 45 0c 01          	addl   $0x1,0xc(%ebp)$/;"	l
d59	usertests.asm	/^     d59:	c7 44 24 04 55 46 00 	movl   $0x4655,0x4(%esp)$/;"	l
d5b	sh.asm	/^     d5b:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d5e	sh.asm	/^     d5e:	0f b6 00             	movzbl (%eax),%eax$/;"	l
d6	echo.asm	/^  d6:	74 10                	je     e8 <strcmp+0x27>$/;"	l
d6	forktest.asm	/^  d6:	c7 44 24 04 5f 04 00 	movl   $0x45f,0x4(%esp)$/;"	l
d6	kill.asm	/^  d6:	0f b6 10             	movzbl (%eax),%edx$/;"	l
d6	ls.asm	/^  d6:	79 20                	jns    f8 <ls+0x48>$/;"	l
d6	mkdir.asm	/^  d6:	88 10                	mov    %dl,(%eax)$/;"	l
d6	rm.asm	/^  d6:	88 10                	mov    %dl,(%eax)$/;"	l
d6	sh.asm	/^      d6:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
d6	stressfs.asm	/^  d6:	89 84 24 28 02 00 00 	mov    %eax,0x228(%esp)$/;"	l
d60	usertests.asm	/^     d60:	00 $/;"	l
d61	sh.asm	/^     d61:	84 c0                	test   %al,%al$/;"	l
d61	usertests.asm	/^     d61:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
d63	sh.asm	/^     d63:	74 10                	je     d75 <strcmp+0x27>$/;"	l
d65	sh.asm	/^     d65:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d68	sh.asm	/^     d68:	0f b6 10             	movzbl (%eax),%edx$/;"	l
d68	usertests.asm	/^     d68:	e8 27 30 00 00       	call   3d94 <printf>$/;"	l
d6b	sh.asm	/^     d6b:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
d6d	usertests.asm	/^     d6d:	c7 04 24 64 46 00 00 	movl   $0x4664,(%esp)$/;"	l
d6e	sh.asm	/^     d6e:	0f b6 00             	movzbl (%eax),%eax$/;"	l
d7	grep.asm	/^  d7:	89 d0                	mov    %edx,%eax$/;"	l
d7	ln.asm	/^  d7:	83 45 0c 01          	addl   $0x1,0xc(%ebp)$/;"	l
d7	zombie.asm	/^  d7:	75 ed                	jne    c6 <strlen+0xf>$/;"	l
d71	sh.asm	/^     d71:	38 c2                	cmp    %al,%dl$/;"	l
d73	sh.asm	/^     d73:	74 de                	je     d53 <strcmp+0x5>$/;"	l
d74	usertests.asm	/^     d74:	e8 eb 2e 00 00       	call   3c64 <unlink>$/;"	l
d75	sh.asm	/^     d75:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d78	sh.asm	/^     d78:	0f b6 00             	movzbl (%eax),%eax$/;"	l
d79	usertests.asm	/^     d79:	c7 04 24 67 46 00 00 	movl   $0x4667,(%esp)$/;"	l
d7b	sh.asm	/^     d7b:	0f b6 d0             	movzbl %al,%edx$/;"	l
d7e	sh.asm	/^     d7e:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
d8	echo.asm	/^  d8:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d8	ls.asm	/^  d8:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d8	mkdir.asm	/^  d8:	0f b6 00             	movzbl (%eax),%eax$/;"	l
d8	rm.asm	/^  d8:	0f b6 00             	movzbl (%eax),%eax$/;"	l
d8	wc.asm	/^  d8:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
d80	usertests.asm	/^     d80:	e8 df 2e 00 00       	call   3c64 <unlink>$/;"	l
d81	sh.asm	/^     d81:	0f b6 00             	movzbl (%eax),%eax$/;"	l
d84	sh.asm	/^     d84:	0f b6 c0             	movzbl %al,%eax$/;"	l
d85	usertests.asm	/^     d85:	e8 82 2e 00 00       	call   3c0c <fork>$/;"	l
d87	sh.asm	/^     d87:	29 c2                	sub    %eax,%edx$/;"	l
d89	sh.asm	/^     d89:	89 d0                	mov    %edx,%eax$/;"	l
d8a	usertests.asm	/^     d8a:	89 45 e8             	mov    %eax,-0x18(%ebp)$/;"	l
d8b	sh.asm	/^     d8b:	5d                   	pop    %ebp$/;"	l
d8c	sh.asm	/^     d8c:	c3                   	ret    $/;"	l
d8d	sh.asm	/^     d8d:	55                   	push   %ebp$/;"	l
d8d	usertests.asm	/^     d8d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)$/;"	l
d8e	sh.asm	/^     d8e:	89 e5                	mov    %esp,%ebp$/;"	l
d9	grep.asm	/^  d9:	8b 55 f4             	mov    -0xc(%ebp),%edx$/;"	l
d9	kill.asm	/^  d9:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
d9	sh.asm	/^      d9:	89 04 24             	mov    %eax,(%esp)$/;"	l
d9	zombie.asm	/^  d9:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d90	sh.asm	/^     d90:	83 ec 10             	sub    $0x10,%esp$/;"	l
d91	usertests.asm	/^     d91:	79 19                	jns    dac <twofiles+0x59>$/;"	l
d93	sh.asm	/^     d93:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)$/;"	l
d93	usertests.asm	/^     d93:	c7 44 24 04 4d 45 00 	movl   $0x454d,0x4(%esp)$/;"	l
d9a	sh.asm	/^     d9a:	eb 04                	jmp    da0 <strlen+0x13>$/;"	l
d9a	usertests.asm	/^     d9a:	00 $/;"	l
d9b	usertests.asm	/^     d9b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
d9c	sh.asm	/^     d9c:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)$/;"	l
da	init.asm	/^  da:	eb 14                	jmp    f0 <main+0xf0>$/;"	l
da	usertests.asm	/^      da:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
da0	sh.asm	/^     da0:	8b 55 fc             	mov    -0x4(%ebp),%edx$/;"	l
da2	usertests.asm	/^     da2:	e8 ed 2f 00 00       	call   3d94 <printf>$/;"	l
da3	sh.asm	/^     da3:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
da6	sh.asm	/^     da6:	01 d0                	add    %edx,%eax$/;"	l
da7	usertests.asm	/^     da7:	e8 68 2e 00 00       	call   3c14 <exit>$/;"	l
da8	sh.asm	/^     da8:	0f b6 00             	movzbl (%eax),%eax$/;"	l
dab	sh.asm	/^     dab:	84 c0                	test   %al,%al$/;"	l
dac	usertests.asm	/^     dac:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)$/;"	l
dad	sh.asm	/^     dad:	75 ed                	jne    d9c <strlen+0xf>$/;"	l
daf	sh.asm	/^     daf:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
data	buf.h	/^  uchar data[512];$/;"	m	struct:buf
data	ioapic.c	/^  uint data;$/;"	m	struct:ioapic	file:
data	kernel.asm	/^    data = (shift & E0ESC ? data : data & 0x7F);$/;"	d
data	kernel.asm	/^  data = inb(KBDATAP);$/;"	d
data	pipe.c	/^  char data[PIPESIZE];$/;"	m	struct:pipe	file:
db	echo.asm	/^  db:	0f b6 10             	movzbl (%eax),%edx$/;"	l
db	ln.asm	/^  db:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
db	ls.asm	/^  db:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
db	mkdir.asm	/^  db:	84 c0                	test   %al,%al$/;"	l
db	mmu.h	/^  uint db : 1;         \/\/ 0 = 16-bit segment, 1 = 32-bit segment$/;"	m	struct:segdesc
db	rm.asm	/^  db:	84 c0                	test   %al,%al$/;"	l
db	wc.asm	/^  db:	89 44 24 10          	mov    %eax,0x10(%esp)$/;"	l
db0	usertests.asm	/^     db0:	74 07                	je     db9 <twofiles+0x66>$/;"	l
db2	sh.asm	/^     db2:	c9                   	leave  $/;"	l
db2	usertests.asm	/^     db2:	b8 64 46 00 00       	mov    $0x4664,%eax$/;"	l
db3	sh.asm	/^     db3:	c3                   	ret    $/;"	l
db4	sh.asm	/^     db4:	55                   	push   %ebp$/;"	l
db5	sh.asm	/^     db5:	89 e5                	mov    %esp,%ebp$/;"	l
db7	sh.asm	/^     db7:	83 ec 0c             	sub    $0xc,%esp$/;"	l
db7	usertests.asm	/^     db7:	eb 05                	jmp    dbe <twofiles+0x6b>$/;"	l
db9	usertests.asm	/^     db9:	b8 67 46 00 00       	mov    $0x4667,%eax$/;"	l
dba	sh.asm	/^     dba:	8b 45 10             	mov    0x10(%ebp),%eax$/;"	l
dbd	sh.asm	/^     dbd:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
dbe	usertests.asm	/^     dbe:	89 45 e4             	mov    %eax,-0x1c(%ebp)$/;"	l
dc	cat.asm	/^  dc:	00 $/;"	l
dc	grep.asm	/^  dc:	81 c2 60 0e 00 00    	add    $0xe60,%edx$/;"	l
dc	init.asm	/^  dc:	c7 44 24 04 0a 09 00 	movl   $0x90a,0x4(%esp)$/;"	l
dc	kill.asm	/^  dc:	0f b6 00             	movzbl (%eax),%eax$/;"	l
dc	sh.asm	/^      dc:	e8 1f ff ff ff       	call   0 <runcmd>$/;"	l
dc	zombie.asm	/^  dc:	c9                   	leave  $/;"	l
dc1	sh.asm	/^     dc1:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
dc1	usertests.asm	/^     dc1:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)$/;"	l
dc4	sh.asm	/^     dc4:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
dc8	sh.asm	/^     dc8:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
dc8	usertests.asm	/^     dc8:	00 $/;"	l
dc9	usertests.asm	/^     dc9:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
dcb	sh.asm	/^     dcb:	89 04 24             	mov    %eax,(%esp)$/;"	l
dcc	usertests.asm	/^     dcc:	89 04 24             	mov    %eax,(%esp)$/;"	l
dce	sh.asm	/^     dce:	e8 26 ff ff ff       	call   cf9 <stosb>$/;"	l
dcf	usertests.asm	/^     dcf:	e8 80 2e 00 00       	call   3c54 <open>$/;"	l
dd	cat.asm	/^  dd:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
dd	forktest.asm	/^  dd:	00 $/;"	l
dd	mkdir.asm	/^  dd:	75 e2                	jne    c1 <strcpy+0xd>$/;"	l
dd	rm.asm	/^  dd:	75 e2                	jne    c1 <strcpy+0xd>$/;"	l
dd	stressfs.asm	/^  dd:	c7 84 24 2c 02 00 00 	movl   $0x0,0x22c(%esp)$/;"	l
dd	usertests.asm	/^      dd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
dd	zombie.asm	/^  dd:	c3                   	ret    $/;"	l
dd3	sh.asm	/^     dd3:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
dd4	usertests.asm	/^     dd4:	89 45 e0             	mov    %eax,-0x20(%ebp)$/;"	l
dd6	sh.asm	/^     dd6:	c9                   	leave  $/;"	l
dd7	sh.asm	/^     dd7:	c3                   	ret    $/;"	l
dd7	usertests.asm	/^     dd7:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)$/;"	l
dd8	sh.asm	/^     dd8:	55                   	push   %ebp$/;"	l
dd9	sh.asm	/^     dd9:	89 e5                	mov    %esp,%ebp$/;"	l
ddb	sh.asm	/^     ddb:	83 ec 04             	sub    $0x4,%esp$/;"	l
ddb	usertests.asm	/^     ddb:	79 19                	jns    df6 <twofiles+0xa3>$/;"	l
ddd	usertests.asm	/^     ddd:	c7 44 24 04 6a 46 00 	movl   $0x466a,0x4(%esp)$/;"	l
dde	sh.asm	/^     dde:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
de	echo.asm	/^  de:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
de	forktest.asm	/^  de:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
de	ln.asm	/^  de:	0f b6 00             	movzbl (%eax),%eax$/;"	l
de	zombie.asm	/^  de:	55                   	push   %ebp$/;"	l
de1	sh.asm	/^     de1:	88 45 fc             	mov    %al,-0x4(%ebp)$/;"	l
de4	sh.asm	/^     de4:	eb 14                	jmp    dfa <strchr+0x22>$/;"	l
de4	usertests.asm	/^     de4:	00 $/;"	l
de5	usertests.asm	/^     de5:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
de6	sh.asm	/^     de6:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
de9	sh.asm	/^     de9:	0f b6 00             	movzbl (%eax),%eax$/;"	l
deallocuvm	vm.c	/^deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)$/;"	f
dec	sh.asm	/^     dec:	3a 45 fc             	cmp    -0x4(%ebp),%al$/;"	l
dec	usertests.asm	/^     dec:	e8 a3 2f 00 00       	call   3d94 <printf>$/;"	l
def	sh.asm	/^     def:	75 05                	jne    df6 <strchr+0x1e>$/;"	l
default	kernel.asm	/^    default:$/;"	l
default	kernel.asm	/^  default:$/;"	l
default	sh.asm	/^  default:$/;"	l
det_and_print_type	stat.c	/^void det_and_print_type(short type) {$/;"	f
dev	buf.h	/^  uint dev;$/;"	m	struct:buf
dev	file.h	/^  uint dev;           \/\/ Device number$/;"	m	struct:inode
dev	log.c	/^  int dev;$/;"	m	struct:log	file:
dev	stat.h	/^  int dev;     \/\/ File system's disk device$/;"	m	struct:stat
devsw	file.c	/^struct devsw devsw[NDEV];$/;"	v	typeref:struct:devsw
devsw	file.h	/^struct devsw {$/;"	s
df	kill.asm	/^  df:	38 c2                	cmp    %al,%dl$/;"	l
df	ls.asm	/^  df:	c7 44 24 04 0f 0b 00 	movl   $0xb0f,0x4(%esp)$/;"	l
df	mkdir.asm	/^  df:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
df	rm.asm	/^  df:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
df	wc.asm	/^  df:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
df	zombie.asm	/^  df:	89 e5                	mov    %esp,%ebp$/;"	l
df1	sh.asm	/^     df1:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
df1	usertests.asm	/^     df1:	e8 1e 2e 00 00       	call   3c14 <exit>$/;"	l
df4	sh.asm	/^     df4:	eb 13                	jmp    e09 <strchr+0x31>$/;"	l
df6	sh.asm	/^     df6:	83 45 08 01          	addl   $0x1,0x8(%ebp)$/;"	l
df6	usertests.asm	/^     df6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)$/;"	l
dfa	sh.asm	/^     dfa:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
dfa	usertests.asm	/^     dfa:	74 07                	je     e03 <twofiles+0xb0>$/;"	l
dfc	usertests.asm	/^     dfc:	b8 70 00 00 00       	mov    $0x70,%eax$/;"	l
dfd	sh.asm	/^     dfd:	0f b6 00             	movzbl (%eax),%eax$/;"	l
dinode	fs.h	/^struct dinode {$/;"	s
dip	kernel.asm	/^    dip = (struct dinode*)bp->data + inum%IPB;$/;"	d
dip	kernel.asm	/^    dip = (struct dinode*)bp->data + ip->inum%IPB;$/;"	d
dip	kernel.asm	/^  dip = (struct dinode*)bp->data + ip->inum%IPB;$/;"	d
dirent	fs.h	/^struct dirent {$/;"	s
dirfile	usertests.c	/^dirfile(void)$/;"	f
dirlink	fs.c	/^dirlink(struct inode *dp, char *name, uint inum)$/;"	f
dirlookup	fs.c	/^dirlookup(struct inode *dp, char *name, uint *poff)$/;"	f
dirtest	usertests.c	/^void dirtest(void)$/;"	f
disksize	memide.c	/^static int disksize;$/;"	v	file:
dpl	mmu.h	/^  uint dpl : 2;         \/\/ descriptor(meaning new) privilege level$/;"	m	struct:gatedesc
dpl	mmu.h	/^  uint dpl : 2;        \/\/ Descriptor Privilege Level$/;"	m	struct:segdesc
ds	mmu.h	/^  ushort ds;$/;"	m	struct:taskstate
ds	x86.h	/^  ushort ds;$/;"	m	struct:trapframe
dst	cat.asm	/^  dst = vdst;$/;"	d
dst	echo.asm	/^  dst = vdst;$/;"	d
dst	forktest.asm	/^  dst = vdst;$/;"	d
dst	grep.asm	/^  dst = vdst;$/;"	d
dst	init.asm	/^  dst = vdst;$/;"	d
dst	kill.asm	/^  dst = vdst;$/;"	d
dst	ln.asm	/^  dst = vdst;$/;"	d
dst	ls.asm	/^  dst = vdst;$/;"	d
dst	mkdir.asm	/^  dst = vdst;$/;"	d
dst	rm.asm	/^  dst = vdst;$/;"	d
dst	sh.asm	/^  dst = vdst;$/;"	d
dst	stressfs.asm	/^  dst = vdst;$/;"	d
dst	usertests.asm	/^  dst = vdst;$/;"	d
dst	wc.asm	/^  dst = vdst;$/;"	d
dst	zombie.asm	/^  dst = vdst;$/;"	d
e	console.c	/^  uint e;  \/\/ Edit index$/;"	m	struct:__anon7	file:
e	kernel.asm	/^  e = addr+len;$/;"	d
e	zombie.asm	/^   e:	85 c0                	test   %eax,%eax$/;"	l
e00	sh.asm	/^     e00:	84 c0                	test   %al,%al$/;"	l
e01	usertests.asm	/^     e01:	eb 05                	jmp    e08 <twofiles+0xb5>$/;"	l
e02	sh.asm	/^     e02:	75 e2                	jne    de6 <strchr+0xe>$/;"	l
e03	usertests.asm	/^     e03:	b8 63 00 00 00       	mov    $0x63,%eax$/;"	l
e04	sh.asm	/^     e04:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
e08	usertests.asm	/^     e08:	c7 44 24 08 00 02 00 	movl   $0x200,0x8(%esp)$/;"	l
e09	sh.asm	/^     e09:	c9                   	leave  $/;"	l
e0a	sh.asm	/^     e0a:	c3                   	ret    $/;"	l
e0b	sh.asm	/^     e0b:	55                   	push   %ebp$/;"	l
e0c	sh.asm	/^     e0c:	89 e5                	mov    %esp,%ebp$/;"	l
e0e	sh.asm	/^     e0e:	83 ec 28             	sub    $0x28,%esp$/;"	l
e0f	usertests.asm	/^     e0f:	00 $/;"	l
e1	echo.asm	/^  e1:	0f b6 00             	movzbl (%eax),%eax$/;"	l
e1	kill.asm	/^  e1:	74 de                	je     c1 <strcmp+0x5>$/;"	l
e1	ln.asm	/^  e1:	84 c0                	test   %al,%al$/;"	l
e1	sh.asm	/^      e1:	e9 20 01 00 00       	jmp    206 <runcmd+0x206>$/;"	l
e1	usertests.asm	/^      e1:	78 21                	js     104 <writetest+0x59>$/;"	l
e1	zombie.asm	/^  e1:	83 ec 0c             	sub    $0xc,%esp$/;"	l
e10	usertests.asm	/^     e10:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
e11	sh.asm	/^     e11:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
e14	usertests.asm	/^     e14:	c7 04 24 a0 86 00 00 	movl   $0x86a0,(%esp)$/;"	l
e18	sh.asm	/^     e18:	eb 4c                	jmp    e66 <gets+0x5b>$/;"	l
e1a	sh.asm	/^     e1a:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)$/;"	l
e1b	usertests.asm	/^     e1b:	e8 47 2c 00 00       	call   3a67 <memset>$/;"	l
e2	grep.asm	/^  e2:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
e2	mkdir.asm	/^  e2:	c9                   	leave  $/;"	l
e2	rm.asm	/^  e2:	c9                   	leave  $/;"	l
e2	wc.asm	/^  e2:	89 44 24 0c          	mov    %eax,0xc(%esp)$/;"	l
e20	usertests.asm	/^     e20:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
e21	sh.asm	/^     e21:	00 $/;"	l
e22	sh.asm	/^     e22:	8d 45 ef             	lea    -0x11(%ebp),%eax$/;"	l
e25	sh.asm	/^     e25:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
e27	usertests.asm	/^     e27:	eb 4b                	jmp    e74 <twofiles+0x121>$/;"	l
e29	sh.asm	/^     e29:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)$/;"	l
e29	usertests.asm	/^     e29:	c7 44 24 08 f4 01 00 	movl   $0x1f4,0x8(%esp)$/;"	l
e3	init.asm	/^  e3:	00 $/;"	l
e3	kill.asm	/^  e3:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e3	ln.asm	/^  e3:	74 10                	je     f5 <strcmp+0x27>$/;"	l
e3	mkdir.asm	/^  e3:	c3                   	ret    $/;"	l
e3	rm.asm	/^  e3:	c3                   	ret    $/;"	l
e3	usertests.asm	/^      e3:	a1 b8 5e 00 00       	mov    0x5eb8,%eax$/;"	l
e30	sh.asm	/^     e30:	e8 44 01 00 00       	call   f79 <read>$/;"	l
e30	usertests.asm	/^     e30:	00 $/;"	l
e31	usertests.asm	/^     e31:	c7 44 24 04 a0 86 00 	movl   $0x86a0,0x4(%esp)$/;"	l
e35	sh.asm	/^     e35:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
e38	sh.asm	/^     e38:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
e38	usertests.asm	/^     e38:	00 $/;"	l
e39	usertests.asm	/^     e39:	8b 45 e0             	mov    -0x20(%ebp),%eax$/;"	l
e3c	sh.asm	/^     e3c:	7f 02                	jg     e40 <gets+0x35>$/;"	l
e3c	usertests.asm	/^     e3c:	89 04 24             	mov    %eax,(%esp)$/;"	l
e3e	sh.asm	/^     e3e:	eb 31                	jmp    e71 <gets+0x66>$/;"	l
e3f	usertests.asm	/^     e3f:	e8 f0 2d 00 00       	call   3c34 <write>$/;"	l
e4	cat.asm	/^  e4:	e8 1c 04 00 00       	call   505 <printf>$/;"	l
e4	echo.asm	/^  e4:	38 c2                	cmp    %al,%dl$/;"	l
e4	init.asm	/^  e4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
e4	mkdir.asm	/^  e4:	55                   	push   %ebp$/;"	l
e4	rm.asm	/^  e4:	55                   	push   %ebp$/;"	l
e4	stressfs.asm	/^  e4:	00 00 00 00 $/;"	l
e4	zombie.asm	/^  e4:	8b 45 10             	mov    0x10(%ebp),%eax$/;"	l
e40	sh.asm	/^     e40:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
e43	sh.asm	/^     e43:	8d 50 01             	lea    0x1(%eax),%edx$/;"	l
e44	usertests.asm	/^     e44:	89 45 dc             	mov    %eax,-0x24(%ebp)$/;"	l
e46	sh.asm	/^     e46:	89 55 f4             	mov    %edx,-0xc(%ebp)$/;"	l
e47	usertests.asm	/^     e47:	81 7d dc f4 01 00 00 	cmpl   $0x1f4,-0x24(%ebp)$/;"	l
e49	sh.asm	/^     e49:	89 c2                	mov    %eax,%edx$/;"	l
e4b	sh.asm	/^     e4b:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e4e	sh.asm	/^     e4e:	01 c2                	add    %eax,%edx$/;"	l
e4e	usertests.asm	/^     e4e:	74 20                	je     e70 <twofiles+0x11d>$/;"	l
e5	forktest.asm	/^  e5:	e8 16 ff ff ff       	call   0 <printf>$/;"	l
e5	ln.asm	/^  e5:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e5	mkdir.asm	/^  e5:	89 e5                	mov    %esp,%ebp$/;"	l
e5	rm.asm	/^  e5:	89 e5                	mov    %esp,%ebp$/;"	l
e50	sh.asm	/^     e50:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax$/;"	l
e50	usertests.asm	/^     e50:	8b 45 dc             	mov    -0x24(%ebp),%eax$/;"	l
e53	usertests.asm	/^     e53:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
e54	sh.asm	/^     e54:	88 02                	mov    %al,(%edx)$/;"	l
e56	sh.asm	/^     e56:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax$/;"	l
e57	usertests.asm	/^     e57:	c7 44 24 04 79 46 00 	movl   $0x4679,0x4(%esp)$/;"	l
e5a	sh.asm	/^     e5a:	3c 0a                	cmp    $0xa,%al$/;"	l
e5c	sh.asm	/^     e5c:	74 13                	je     e71 <gets+0x66>$/;"	l
e5e	sh.asm	/^     e5e:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax$/;"	l
e5e	usertests.asm	/^     e5e:	00 $/;"	l
e5f	usertests.asm	/^     e5f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
e6	echo.asm	/^  e6:	74 de                	je     c6 <strcmp+0x5>$/;"	l
e6	grep.asm	/^  e6:	89 54 24 04          	mov    %edx,0x4(%esp)$/;"	l
e6	kill.asm	/^  e6:	0f b6 00             	movzbl (%eax),%eax$/;"	l
e6	ls.asm	/^  e6:	00 $/;"	l
e6	sh.asm	/^      e6:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e6	wc.asm	/^  e6:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
e62	sh.asm	/^     e62:	3c 0d                	cmp    $0xd,%al$/;"	l
e64	sh.asm	/^     e64:	74 0b                	je     e71 <gets+0x66>$/;"	l
e66	sh.asm	/^     e66:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
e66	usertests.asm	/^     e66:	e8 29 2f 00 00       	call   3d94 <printf>$/;"	l
e69	sh.asm	/^     e69:	83 c0 01             	add    $0x1,%eax$/;"	l
e6b	usertests.asm	/^     e6b:	e8 a4 2d 00 00       	call   3c14 <exit>$/;"	l
e6c	sh.asm	/^     e6c:	3b 45 0c             	cmp    0xc(%ebp),%eax$/;"	l
e6f	sh.asm	/^     e6f:	7c a9                	jl     e1a <gets+0xf>$/;"	l
e7	ls.asm	/^  e7:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)$/;"	l
e7	mkdir.asm	/^  e7:	eb 08                	jmp    f1 <strcmp+0xd>$/;"	l
e7	rm.asm	/^  e7:	eb 08                	jmp    f1 <strcmp+0xd>$/;"	l
e7	zombie.asm	/^  e7:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
e70	usertests.asm	/^     e70:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)$/;"	l
e71	sh.asm	/^     e71:	8b 55 f4             	mov    -0xc(%ebp),%edx$/;"	l
e74	sh.asm	/^     e74:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e74	usertests.asm	/^     e74:	83 7d f4 0b          	cmpl   $0xb,-0xc(%ebp)$/;"	l
e77	sh.asm	/^     e77:	01 d0                	add    %edx,%eax$/;"	l
e78	usertests.asm	/^     e78:	7e af                	jle    e29 <twofiles+0xd6>$/;"	l
e79	sh.asm	/^     e79:	c6 00 00             	movb   $0x0,(%eax)$/;"	l
e7a	usertests.asm	/^     e7a:	8b 45 e0             	mov    -0x20(%ebp),%eax$/;"	l
e7c	sh.asm	/^     e7c:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e7d	usertests.asm	/^     e7d:	89 04 24             	mov    %eax,(%esp)$/;"	l
e7f	sh.asm	/^     e7f:	c9                   	leave  $/;"	l
e8	echo.asm	/^  e8:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e8	ln.asm	/^  e8:	0f b6 10             	movzbl (%eax),%edx$/;"	l
e8	stressfs.asm	/^  e8:	eb 27                	jmp    111 <main+0x111>$/;"	l
e8	usertests.asm	/^      e8:	c7 44 24 04 e4 41 00 	movl   $0x41e4,0x4(%esp)$/;"	l
e80	sh.asm	/^     e80:	c3                   	ret    $/;"	l
e80	usertests.asm	/^     e80:	e8 b7 2d 00 00       	call   3c3c <close>$/;"	l
e81	sh.asm	/^     e81:	55                   	push   %ebp$/;"	l
e82	sh.asm	/^     e82:	89 e5                	mov    %esp,%ebp$/;"	l
e84	sh.asm	/^     e84:	83 ec 28             	sub    $0x28,%esp$/;"	l
e85	usertests.asm	/^     e85:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)$/;"	l
e87	sh.asm	/^     e87:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)$/;"	l
e89	usertests.asm	/^     e89:	74 11                	je     e9c <twofiles+0x149>$/;"	l
e8b	usertests.asm	/^     e8b:	e8 8c 2d 00 00       	call   3c1c <wait>$/;"	l
e8e	sh.asm	/^     e8e:	00 $/;"	l
e8f	sh.asm	/^     e8f:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e9	cat.asm	/^  e9:	e8 97 02 00 00       	call   385 <exit>$/;"	l
e9	kill.asm	/^  e9:	0f b6 d0             	movzbl %al,%edx$/;"	l
e9	mkdir.asm	/^  e9:	83 45 08 01          	addl   $0x1,0x8(%ebp)$/;"	l
e9	rm.asm	/^  e9:	83 45 08 01          	addl   $0x1,0x8(%ebp)$/;"	l
e9	sh.asm	/^      e9:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
e9	wc.asm	/^  e9:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
e90	usertests.asm	/^     e90:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
e92	sh.asm	/^     e92:	89 04 24             	mov    %eax,(%esp)$/;"	l
e95	sh.asm	/^     e95:	e8 07 01 00 00       	call   fa1 <open>$/;"	l
e97	usertests.asm	/^     e97:	e9 e7 00 00 00       	jmp    f83 <twofiles+0x230>$/;"	l
e9a	sh.asm	/^     e9a:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
e9c	usertests.asm	/^     e9c:	e8 73 2d 00 00       	call   3c14 <exit>$/;"	l
e9d	sh.asm	/^     e9d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
ea	forktest.asm	/^  ea:	e8 8e 02 00 00       	call   37d <exit>$/;"	l
ea	grep.asm	/^  ea:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
ea	stressfs.asm	/^  ea:	c7 44 24 08 00 02 00 	movl   $0x200,0x8(%esp)$/;"	l
ea1	sh.asm	/^     ea1:	79 07                	jns    eaa <stat+0x29>$/;"	l
ea1	usertests.asm	/^     ea1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
ea3	sh.asm	/^     ea3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ea5	usertests.asm	/^     ea5:	74 07                	je     eae <twofiles+0x15b>$/;"	l
ea7	usertests.asm	/^     ea7:	b8 64 46 00 00       	mov    $0x4664,%eax$/;"	l
ea8	sh.asm	/^     ea8:	eb 23                	jmp    ecd <stat+0x4c>$/;"	l
eaa	sh.asm	/^     eaa:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
eac	usertests.asm	/^     eac:	eb 05                	jmp    eb3 <twofiles+0x160>$/;"	l
ead	sh.asm	/^     ead:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
eae	usertests.asm	/^     eae:	b8 67 46 00 00       	mov    $0x4667,%eax$/;"	l
eargv	sh.c	/^  char *eargv[MAXARGS];$/;"	m	struct:execcmd	file:
eax	mmu.h	/^  uint eax;          \/\/ More saved state (registers)$/;"	m	struct:taskstate
eax	x86.h	/^  uint eax;$/;"	m	struct:trapframe
eb	echo.asm	/^  eb:	0f b6 00             	movzbl (%eax),%eax$/;"	l
eb	init.asm	/^  eb:	e8 07 04 00 00       	call   4f7 <printf>$/;"	l
eb	ln.asm	/^  eb:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
eb	zombie.asm	/^  eb:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
eb1	sh.asm	/^     eb1:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
eb3	usertests.asm	/^     eb3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)$/;"	l
eb4	sh.asm	/^     eb4:	89 04 24             	mov    %eax,(%esp)$/;"	l
eb7	sh.asm	/^     eb7:	e8 fd 00 00 00       	call   fb9 <fstat>$/;"	l
eba	usertests.asm	/^     eba:	00 $/;"	l
ebb	usertests.asm	/^     ebb:	89 04 24             	mov    %eax,(%esp)$/;"	l
ebc	sh.asm	/^     ebc:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
ebe	usertests.asm	/^     ebe:	e8 91 2d 00 00       	call   3c54 <open>$/;"	l
ebf	sh.asm	/^     ebf:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ebp	kernel.asm	/^    ebp = (uint*)ebp[0]; \/\/ saved %ebp$/;"	d
ebp	kernel.asm	/^  ebp = (uint*)v - 2;$/;"	d
ebp	mmu.h	/^  uint *ebp;$/;"	m	struct:taskstate
ebp	proc.h	/^  uint ebp;$/;"	m	struct:context
ebp	x86.h	/^  uint ebp;$/;"	m	struct:trapframe
ebx	mmu.h	/^  uint ebx;$/;"	m	struct:taskstate
ebx	proc.h	/^  uint ebx;$/;"	m	struct:context
ebx	x86.h	/^  uint ebx;$/;"	m	struct:trapframe
ec	kill.asm	/^  ec:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
ec	sh.asm	/^      ec:	e8 8c 02 00 00       	call   37d <fork1>$/;"	l
ec2	sh.asm	/^     ec2:	89 04 24             	mov    %eax,(%esp)$/;"	l
ec3	usertests.asm	/^     ec3:	89 45 e0             	mov    %eax,-0x20(%ebp)$/;"	l
ec5	sh.asm	/^     ec5:	e8 bf 00 00 00       	call   f89 <close>$/;"	l
ec6	usertests.asm	/^     ec6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)$/;"	l
eca	sh.asm	/^     eca:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
ecd	sh.asm	/^     ecd:	c9                   	leave  $/;"	l
ecd	usertests.asm	/^     ecd:	eb 58                	jmp    f27 <twofiles+0x1d4>$/;"	l
ece	sh.asm	/^     ece:	c3                   	ret    $/;"	l
ecf	sh.asm	/^     ecf:	55                   	push   %ebp$/;"	l
ecf	usertests.asm	/^     ecf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)$/;"	l
echoargv	usertests.c	/^char *echoargv[] = { "echo", "ALL", "TESTS", "PASSED", 0 };$/;"	v
ecmd	sh.asm	/^    ecmd = (struct execcmd*)cmd;$/;"	d
ecx	mmu.h	/^  uint ecx;$/;"	m	struct:taskstate
ecx	x86.h	/^  uint ecx;$/;"	m	struct:trapframe
ed	grep.asm	/^  ed:	89 04 24             	mov    %eax,(%esp)$/;"	l
ed	mkdir.asm	/^  ed:	83 45 0c 01          	addl   $0x1,0xc(%ebp)$/;"	l
ed	rm.asm	/^  ed:	83 45 0c 01          	addl   $0x1,0xc(%ebp)$/;"	l
ed	wc.asm	/^  ed:	c7 44 24 04 a3 09 00 	movl   $0x9a3,0x4(%esp)$/;"	l
ed0	sh.asm	/^     ed0:	89 e5                	mov    %esp,%ebp$/;"	l
ed2	sh.asm	/^     ed2:	83 ec 10             	sub    $0x10,%esp$/;"	l
ed5	sh.asm	/^     ed5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)$/;"	l
ed6	usertests.asm	/^     ed6:	eb 41                	jmp    f19 <twofiles+0x1c6>$/;"	l
ed8	usertests.asm	/^     ed8:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
edb	usertests.asm	/^     edb:	05 a0 86 00 00       	add    $0x86a0,%eax$/;"	l
edc	sh.asm	/^     edc:	eb 25                	jmp    f03 <atoi+0x34>$/;"	l
ede	sh.asm	/^     ede:	8b 55 fc             	mov    -0x4(%ebp),%edx$/;"	l
edi	mmu.h	/^  uint edi;$/;"	m	struct:taskstate
edi	proc.h	/^  uint edi;$/;"	m	struct:context
edi	x86.h	/^  uint edi;$/;"	m	struct:trapframe
edx	mmu.h	/^  uint edx;$/;"	m	struct:taskstate
edx	x86.h	/^  uint edx;$/;"	m	struct:trapframe
ee	cat.asm	/^  ee:	8b 44 24 18          	mov    0x18(%esp),%eax$/;"	l
ee	echo.asm	/^  ee:	0f b6 d0             	movzbl %al,%edx$/;"	l
ee	ln.asm	/^  ee:	0f b6 00             	movzbl (%eax),%eax$/;"	l
ee	ls.asm	/^  ee:	e8 50 06 00 00       	call   743 <printf>$/;"	l
ee	zombie.asm	/^  ee:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
ee0	usertests.asm	/^     ee0:	0f b6 00             	movzbl (%eax),%eax$/;"	l
ee1	sh.asm	/^     ee1:	89 d0                	mov    %edx,%eax$/;"	l
ee3	sh.asm	/^     ee3:	c1 e0 02             	shl    $0x2,%eax$/;"	l
ee3	usertests.asm	/^     ee3:	0f be d0             	movsbl %al,%edx$/;"	l
ee6	sh.asm	/^     ee6:	01 d0                	add    %edx,%eax$/;"	l
ee6	usertests.asm	/^     ee6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
ee8	sh.asm	/^     ee8:	01 c0                	add    %eax,%eax$/;"	l
eea	sh.asm	/^     eea:	89 c1                	mov    %eax,%ecx$/;"	l
eea	usertests.asm	/^     eea:	74 07                	je     ef3 <twofiles+0x1a0>$/;"	l
eec	sh.asm	/^     eec:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
eec	usertests.asm	/^     eec:	b8 70 00 00 00       	mov    $0x70,%eax$/;"	l
eef	sh.asm	/^     eef:	8d 50 01             	lea    0x1(%eax),%edx$/;"	l
ef	forktest.asm	/^  ef:	c7 44 24 04 72 04 00 	movl   $0x472,0x4(%esp)$/;"	l
ef	kill.asm	/^  ef:	0f b6 00             	movzbl (%eax),%eax$/;"	l
ef	usertests.asm	/^      ef:	00 $/;"	l
ef1	usertests.asm	/^     ef1:	eb 05                	jmp    ef8 <twofiles+0x1a5>$/;"	l
ef2	sh.asm	/^     ef2:	89 55 08             	mov    %edx,0x8(%ebp)$/;"	l
ef3	usertests.asm	/^     ef3:	b8 63 00 00 00       	mov    $0x63,%eax$/;"	l
ef5	sh.asm	/^     ef5:	0f b6 00             	movzbl (%eax),%eax$/;"	l
ef8	sh.asm	/^     ef8:	0f be c0             	movsbl %al,%eax$/;"	l
ef8	usertests.asm	/^     ef8:	39 c2                	cmp    %eax,%edx$/;"	l
efa	usertests.asm	/^     efa:	74 19                	je     f15 <twofiles+0x1c2>$/;"	l
efb	sh.asm	/^     efb:	01 c8                	add    %ecx,%eax$/;"	l
efc	usertests.asm	/^     efc:	c7 44 24 04 8a 46 00 	movl   $0x468a,0x4(%esp)$/;"	l
efd	sh.asm	/^     efd:	83 e8 30             	sub    $0x30,%eax$/;"	l
efile	sh.c	/^  char *efile;$/;"	m	struct:redircmd	file:
eflags	kernel.asm	/^  eflags = readeflags();$/;"	d
eflags	mmu.h	/^  uint eflags;$/;"	m	struct:taskstate
eflags	x86.h	/^  uint eflags;$/;"	m	struct:trapframe
ehsize	elf.h	/^  ushort ehsize;$/;"	m	struct:elfhdr
eip	mmu.h	/^  uint *eip;         \/\/ Saved state from last task switch$/;"	m	struct:taskstate
eip	proc.h	/^  uint eip;$/;"	m	struct:context
eip	x86.h	/^  uint eip;$/;"	m	struct:trapframe
elf	bootblock.asm	/^  elf = (struct elfhdr*)0x10000;  \/\/ scratch space$/;"	d
elf	elf.h	/^  uchar elf[12];$/;"	m	struct:elfhdr
elfhdr	elf.h	/^struct elfhdr {$/;"	s
empty	kernel.asm	/^      empty = ip;$/;"	d
empty	kernel.asm	/^  empty = 0;$/;"	d
entry	bootblock.asm	/^  entry = (void(*)(void))(elf->entry);$/;"	d
entry	elf.h	/^  uint entry;$/;"	m	struct:elfhdr
entry	entry.S	/^entry:$/;"	l
entry	kernel.asm	/^entry:$/;"	l
entry	mp.h	/^  ushort entry;                 \/\/ entry count$/;"	m	struct:mpconf
entrypgdir	main.c	/^pde_t entrypgdir[NPDENTRIES] = {$/;"	v
entrypgdir	main.c	/^pde_t entrypgdir[];  \/\/ For entry.S$/;"	v
ep	kernel.asm	/^  ep = (char*)proc->sz;$/;"	d
epa	bootblock.asm	/^  epa = pa + count;$/;"	d
eph	bootblock.asm	/^  eph = ph + elf->phnum;$/;"	d
err	x86.h	/^  uint err;$/;"	m	struct:trapframe
es	mmu.h	/^  ushort es;         \/\/ Even more saved state (segment selectors)$/;"	m	struct:taskstate
es	sh.asm	/^  es = s + strlen(s);$/;"	d
es	x86.h	/^  ushort es;$/;"	m	struct:trapframe
esi	mmu.h	/^  uint esi;$/;"	m	struct:taskstate
esi	proc.h	/^  uint esi;$/;"	m	struct:context
esi	x86.h	/^  uint esi;$/;"	m	struct:trapframe
esp	mmu.h	/^  uint *esp;$/;"	m	struct:taskstate
esp	x86.h	/^  uint esp;$/;"	m	struct:trapframe
esp0	mmu.h	/^  uint esp0;         \/\/ Stack pointers and segment selectors$/;"	m	struct:taskstate
esp1	mmu.h	/^  uint *esp1;$/;"	m	struct:taskstate
esp2	mmu.h	/^  uint *esp2;$/;"	m	struct:taskstate
exec	exec.c	/^exec(char *path, char **argv)$/;"	f
execcmd	sh.c	/^execcmd(void)$/;"	f
execcmd	sh.c	/^struct execcmd {$/;"	s	file:
exectest	usertests.c	/^exectest(void)$/;"	f
exit	initcode.S	/^exit:$/;"	l
exit	initcode.asm	/^exit:$/;"	l
exit	proc.c	/^exit(void)$/;"	f
exitwait	usertests.c	/^exitwait(void)$/;"	f
f	Makefile	/^	dd if=\/dev\/zero of=xv6.img count=10000$/;"	m
f	Makefile	/^	dd if=\/dev\/zero of=xv6memfs.img count=10000$/;"	m
f	Makefile	/^	dd if=bootblock of=xv6.img conv=notrunc$/;"	m
f	Makefile	/^	dd if=bootblock of=xv6memfs.img conv=notrunc$/;"	m
f	Makefile	/^	dd if=kernel of=xv6.img seek=1 conv=notrunc$/;"	m
f	Makefile	/^	dd if=kernelmemfs of=xv6memfs.img seek=1 conv=notrunc$/;"	m
f	cat.asm	/^   f:	c7 44 24 04 a0 0b 00 	movl   $0xba0,0x4(%esp)$/;"	l
f	kill.asm	/^   f:	c7 44 24 04 1b 08 00 	movl   $0x81b,0x4(%esp)$/;"	l
f	ln.asm	/^   f:	c7 44 24 04 2d 08 00 	movl   $0x82d,0x4(%esp)$/;"	l
f	mkdir.asm	/^   f:	c7 44 24 04 43 08 00 	movl   $0x843,0x4(%esp)$/;"	l
f	rm.asm	/^   f:	c7 44 24 04 43 08 00 	movl   $0x843,0x4(%esp)$/;"	l
f0	grep.asm	/^  f0:	e8 e0 04 00 00       	call   5d5 <read>$/;"	l
f0	init.asm	/^  f0:	e8 8a 02 00 00       	call   37f <wait>$/;"	l
f0	usertests.asm	/^      f0:	89 04 24             	mov    %eax,(%esp)$/;"	l
f00	sh.asm	/^     f00:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
f03	sh.asm	/^     f03:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
f03	usertests.asm	/^     f03:	00 $/;"	l
f04	usertests.asm	/^     f04:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
f06	sh.asm	/^     f06:	0f b6 00             	movzbl (%eax),%eax$/;"	l
f09	sh.asm	/^     f09:	3c 2f                	cmp    $0x2f,%al$/;"	l
f0b	sh.asm	/^     f0b:	7e 0a                	jle    f17 <atoi+0x48>$/;"	l
f0b	usertests.asm	/^     f0b:	e8 84 2e 00 00       	call   3d94 <printf>$/;"	l
f0d	sh.asm	/^     f0d:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
f1	echo.asm	/^  f1:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
f1	ln.asm	/^  f1:	38 c2                	cmp    %al,%dl$/;"	l
f1	mkdir.asm	/^  f1:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
f1	rm.asm	/^  f1:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
f1	sh.asm	/^      f1:	85 c0                	test   %eax,%eax$/;"	l
f1	stressfs.asm	/^  f1:	00 $/;"	l
f10	sh.asm	/^     f10:	0f b6 00             	movzbl (%eax),%eax$/;"	l
f10	usertests.asm	/^     f10:	e8 ff 2c 00 00       	call   3c14 <exit>$/;"	l
f13	sh.asm	/^     f13:	3c 39                	cmp    $0x39,%al$/;"	l
f15	sh.asm	/^     f15:	7e c7                	jle    ede <atoi+0xf>$/;"	l
f15	usertests.asm	/^     f15:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)$/;"	l
f17	sh.asm	/^     f17:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
f19	usertests.asm	/^     f19:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
f1a	sh.asm	/^     f1a:	c9                   	leave  $/;"	l
f1b	sh.asm	/^     f1b:	c3                   	ret    $/;"	l
f1c	sh.asm	/^     f1c:	55                   	push   %ebp$/;"	l
f1c	usertests.asm	/^     f1c:	3b 45 dc             	cmp    -0x24(%ebp),%eax$/;"	l
f1d	sh.asm	/^     f1d:	89 e5                	mov    %esp,%ebp$/;"	l
f1f	sh.asm	/^     f1f:	83 ec 10             	sub    $0x10,%esp$/;"	l
f1f	usertests.asm	/^     f1f:	7c b7                	jl     ed8 <twofiles+0x185>$/;"	l
f2	cat.asm	/^  f2:	89 04 24             	mov    %eax,(%esp)$/;"	l
f2	kill.asm	/^  f2:	0f b6 c0             	movzbl %al,%eax$/;"	l
f2	stressfs.asm	/^  f2:	8d 44 24 1e          	lea    0x1e(%esp),%eax$/;"	l
f2	zombie.asm	/^  f2:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
f21	usertests.asm	/^     f21:	8b 45 dc             	mov    -0x24(%ebp),%eax$/;"	l
f22	sh.asm	/^     f22:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
f24	usertests.asm	/^     f24:	01 45 ec             	add    %eax,-0x14(%ebp)$/;"	l
f25	sh.asm	/^     f25:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
f27	usertests.asm	/^     f27:	c7 44 24 08 00 20 00 	movl   $0x2000,0x8(%esp)$/;"	l
f28	sh.asm	/^     f28:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
f2b	sh.asm	/^     f2b:	89 45 f8             	mov    %eax,-0x8(%ebp)$/;"	l
f2e	sh.asm	/^     f2e:	eb 17                	jmp    f47 <memmove+0x2b>$/;"	l
f2e	usertests.asm	/^     f2e:	00 $/;"	l
f2f	usertests.asm	/^     f2f:	c7 44 24 04 a0 86 00 	movl   $0x86a0,0x4(%esp)$/;"	l
f3	ln.asm	/^  f3:	74 de                	je     d3 <strcmp+0x5>$/;"	l
f3	ls.asm	/^  f3:	e9 01 02 00 00       	jmp    2f9 <ls+0x249>$/;"	l
f3	sh.asm	/^      f3:	75 0e                	jne    103 <runcmd+0x103>$/;"	l
f3	usertests.asm	/^      f3:	e8 9c 3c 00 00       	call   3d94 <printf>$/;"	l
f30	sh.asm	/^     f30:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
f33	sh.asm	/^     f33:	8d 50 01             	lea    0x1(%eax),%edx$/;"	l
f36	sh.asm	/^     f36:	89 55 fc             	mov    %edx,-0x4(%ebp)$/;"	l
f36	usertests.asm	/^     f36:	00 $/;"	l
f37	usertests.asm	/^     f37:	8b 45 e0             	mov    -0x20(%ebp),%eax$/;"	l
f39	sh.asm	/^     f39:	8b 55 f8             	mov    -0x8(%ebp),%edx$/;"	l
f3a	usertests.asm	/^     f3a:	89 04 24             	mov    %eax,(%esp)$/;"	l
f3c	sh.asm	/^     f3c:	8d 4a 01             	lea    0x1(%edx),%ecx$/;"	l
f3d	usertests.asm	/^     f3d:	e8 ea 2c 00 00       	call   3c2c <read>$/;"	l
f3f	sh.asm	/^     f3f:	89 4d f8             	mov    %ecx,-0x8(%ebp)$/;"	l
f4	echo.asm	/^  f4:	0f b6 00             	movzbl (%eax),%eax$/;"	l
f4	mkdir.asm	/^  f4:	0f b6 00             	movzbl (%eax),%eax$/;"	l
f4	rm.asm	/^  f4:	0f b6 00             	movzbl (%eax),%eax$/;"	l
f4	wc.asm	/^  f4:	00 $/;"	l
f42	sh.asm	/^     f42:	0f b6 12             	movzbl (%edx),%edx$/;"	l
f42	usertests.asm	/^     f42:	89 45 dc             	mov    %eax,-0x24(%ebp)$/;"	l
f45	sh.asm	/^     f45:	88 10                	mov    %dl,(%eax)$/;"	l
f45	usertests.asm	/^     f45:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)$/;"	l
f47	sh.asm	/^     f47:	8b 45 10             	mov    0x10(%ebp),%eax$/;"	l
f49	usertests.asm	/^     f49:	7f 84                	jg     ecf <twofiles+0x17c>$/;"	l
f4a	sh.asm	/^     f4a:	8d 50 ff             	lea    -0x1(%eax),%edx$/;"	l
f4b	usertests.asm	/^     f4b:	8b 45 e0             	mov    -0x20(%ebp),%eax$/;"	l
f4d	sh.asm	/^     f4d:	89 55 10             	mov    %edx,0x10(%ebp)$/;"	l
f4e	usertests.asm	/^     f4e:	89 04 24             	mov    %eax,(%esp)$/;"	l
f5	cat.asm	/^  f5:	e8 06 ff ff ff       	call   0 <cat>$/;"	l
f5	grep.asm	/^  f5:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
f5	init.asm	/^  f5:	89 44 24 18          	mov    %eax,0x18(%esp)$/;"	l
f5	kill.asm	/^  f5:	29 c2                	sub    %eax,%edx$/;"	l
f5	ln.asm	/^  f5:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
f5	sh.asm	/^      f5:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
f5	wc.asm	/^  f5:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
f5	zombie.asm	/^  f5:	89 04 24             	mov    %eax,(%esp)$/;"	l
f50	sh.asm	/^     f50:	85 c0                	test   %eax,%eax$/;"	l
f51	usertests.asm	/^     f51:	e8 e6 2c 00 00       	call   3c3c <close>$/;"	l
f52	sh.asm	/^     f52:	7f dc                	jg     f30 <memmove+0x14>$/;"	l
f54	sh.asm	/^     f54:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
f56	usertests.asm	/^     f56:	81 7d ec 70 17 00 00 	cmpl   $0x1770,-0x14(%ebp)$/;"	l
f57	sh.asm	/^     f57:	c9                   	leave  $/;"	l
f58	sh.asm	/^     f58:	c3                   	ret    $/;"	l
f59	sh.asm	/^     f59:	b8 01 00 00 00       	mov    $0x1,%eax$/;"	l
f5d	usertests.asm	/^     f5d:	74 20                	je     f7f <twofiles+0x22c>$/;"	l
f5e	sh.asm	/^     f5e:	cd 40                	int    $0x40$/;"	l
f5f	usertests.asm	/^     f5f:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
f6	forktest.asm	/^  f6:	00 $/;"	l
f6	stressfs.asm	/^  f6:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
f60	sh.asm	/^     f60:	c3                   	ret    $/;"	l
f61	sh.asm	/^     f61:	b8 02 00 00 00       	mov    $0x2,%eax$/;"	l
f62	usertests.asm	/^     f62:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
f66	sh.asm	/^     f66:	cd 40                	int    $0x40$/;"	l
f66	usertests.asm	/^     f66:	c7 44 24 04 96 46 00 	movl   $0x4696,0x4(%esp)$/;"	l
f68	sh.asm	/^     f68:	c3                   	ret    $/;"	l
f69	sh.asm	/^     f69:	b8 03 00 00 00       	mov    $0x3,%eax$/;"	l
f6d	usertests.asm	/^     f6d:	00 $/;"	l
f6e	sh.asm	/^     f6e:	cd 40                	int    $0x40$/;"	l
f6e	usertests.asm	/^     f6e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
f7	echo.asm	/^  f7:	0f b6 c0             	movzbl %al,%eax$/;"	l
f7	forktest.asm	/^  f7:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
f7	kill.asm	/^  f7:	89 d0                	mov    %edx,%eax$/;"	l
f7	mkdir.asm	/^  f7:	84 c0                	test   %al,%al$/;"	l
f7	rm.asm	/^  f7:	84 c0                	test   %al,%al$/;"	l
f70	sh.asm	/^     f70:	c3                   	ret    $/;"	l
f71	sh.asm	/^     f71:	b8 04 00 00 00       	mov    $0x4,%eax$/;"	l
f75	usertests.asm	/^     f75:	e8 1a 2e 00 00       	call   3d94 <printf>$/;"	l
f76	sh.asm	/^     f76:	cd 40                	int    $0x40$/;"	l
f78	sh.asm	/^     f78:	c3                   	ret    $/;"	l
f79	sh.asm	/^     f79:	b8 05 00 00 00       	mov    $0x5,%eax$/;"	l
f7a	usertests.asm	/^     f7a:	e8 95 2c 00 00       	call   3c14 <exit>$/;"	l
f7e	sh.asm	/^     f7e:	cd 40                	int    $0x40$/;"	l
f7f	usertests.asm	/^     f7f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)$/;"	l
f8	grep.asm	/^  f8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)$/;"	l
f8	ln.asm	/^  f8:	0f b6 00             	movzbl (%eax),%eax$/;"	l
f8	ls.asm	/^  f8:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax$/;"	l
f8	sh.asm	/^      f8:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
f8	usertests.asm	/^      f8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
f8	zombie.asm	/^  f8:	e8 26 ff ff ff       	call   23 <stosb>$/;"	l
f80	sh.asm	/^     f80:	c3                   	ret    $/;"	l
f81	sh.asm	/^     f81:	b8 10 00 00 00       	mov    $0x10,%eax$/;"	l
f83	usertests.asm	/^     f83:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)$/;"	l
f86	sh.asm	/^     f86:	cd 40                	int    $0x40$/;"	l
f87	usertests.asm	/^     f87:	0f 8e 14 ff ff ff    	jle    ea1 <twofiles+0x14e>$/;"	l
f88	sh.asm	/^     f88:	c3                   	ret    $/;"	l
f89	sh.asm	/^     f89:	b8 15 00 00 00       	mov    $0x15,%eax$/;"	l
f8d	usertests.asm	/^     f8d:	c7 04 24 64 46 00 00 	movl   $0x4664,(%esp)$/;"	l
f8e	sh.asm	/^     f8e:	cd 40                	int    $0x40$/;"	l
f9	init.asm	/^  f9:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)$/;"	l
f9	kill.asm	/^  f9:	5d                   	pop    %ebp$/;"	l
f9	mkdir.asm	/^  f9:	74 10                	je     10b <strcmp+0x27>$/;"	l
f9	rm.asm	/^  f9:	74 10                	je     10b <strcmp+0x27>$/;"	l
f90	sh.asm	/^     f90:	c3                   	ret    $/;"	l
f91	sh.asm	/^     f91:	b8 06 00 00 00       	mov    $0x6,%eax$/;"	l
f94	usertests.asm	/^     f94:	e8 cb 2c 00 00       	call   3c64 <unlink>$/;"	l
f96	sh.asm	/^     f96:	cd 40                	int    $0x40$/;"	l
f98	sh.asm	/^     f98:	c3                   	ret    $/;"	l
f99	sh.asm	/^     f99:	b8 07 00 00 00       	mov    $0x7,%eax$/;"	l
f99	usertests.asm	/^     f99:	c7 04 24 67 46 00 00 	movl   $0x4667,(%esp)$/;"	l
f9e	sh.asm	/^     f9e:	cd 40                	int    $0x40$/;"	l
fa	cat.asm	/^  fa:	8b 44 24 18          	mov    0x18(%esp),%eax$/;"	l
fa	echo.asm	/^  fa:	29 c2                	sub    %eax,%edx$/;"	l
fa	kill.asm	/^  fa:	c3                   	ret    $/;"	l
fa	stressfs.asm	/^  fa:	8b 84 24 28 02 00 00 	mov    0x228(%esp),%eax$/;"	l
fa0	sh.asm	/^     fa0:	c3                   	ret    $/;"	l
fa0	usertests.asm	/^     fa0:	e8 bf 2c 00 00       	call   3c64 <unlink>$/;"	l
fa1	sh.asm	/^     fa1:	b8 0f 00 00 00       	mov    $0xf,%eax$/;"	l
fa5	usertests.asm	/^     fa5:	c7 44 24 04 a7 46 00 	movl   $0x46a7,0x4(%esp)$/;"	l
fa6	sh.asm	/^     fa6:	cd 40                	int    $0x40$/;"	l
fa8	sh.asm	/^     fa8:	c3                   	ret    $/;"	l
fa9	sh.asm	/^     fa9:	b8 11 00 00 00       	mov    $0x11,%eax$/;"	l
fac	usertests.asm	/^     fac:	00 $/;"	l
fad	usertests.asm	/^     fad:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
fae	sh.asm	/^     fae:	cd 40                	int    $0x40$/;"	l
fb	kill.asm	/^  fb:	55                   	push   %ebp$/;"	l
fb	ln.asm	/^  fb:	0f b6 d0             	movzbl %al,%edx$/;"	l
fb	mkdir.asm	/^  fb:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
fb	rm.asm	/^  fb:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
fb	sh.asm	/^      fb:	89 04 24             	mov    %eax,(%esp)$/;"	l
fb0	sh.asm	/^     fb0:	c3                   	ret    $/;"	l
fb1	sh.asm	/^     fb1:	b8 12 00 00 00       	mov    $0x12,%eax$/;"	l
fb4	usertests.asm	/^     fb4:	e8 db 2d 00 00       	call   3d94 <printf>$/;"	l
fb6	sh.asm	/^     fb6:	cd 40                	int    $0x40$/;"	l
fb8	sh.asm	/^     fb8:	c3                   	ret    $/;"	l
fb9	sh.asm	/^     fb9:	b8 08 00 00 00       	mov    $0x8,%eax$/;"	l
fb9	usertests.asm	/^     fb9:	c9                   	leave  $/;"	l
fba	usertests.asm	/^     fba:	c3                   	ret    $/;"	l
fbb	usertests.asm	/^     fbb:	55                   	push   %ebp$/;"	l
fbc	usertests.asm	/^     fbc:	89 e5                	mov    %esp,%ebp$/;"	l
fbe	sh.asm	/^     fbe:	cd 40                	int    $0x40$/;"	l
fbe	usertests.asm	/^     fbe:	83 ec 48             	sub    $0x48,%esp$/;"	l
fc	echo.asm	/^  fc:	89 d0                	mov    %edx,%eax$/;"	l
fc	grep.asm	/^  fc:	0f 8f 10 ff ff ff    	jg     12 <grep+0x12>$/;"	l
fc	kill.asm	/^  fc:	89 e5                	mov    %esp,%ebp$/;"	l
fc	wc.asm	/^  fc:	e8 c0 04 00 00       	call   5c1 <printf>$/;"	l
fc0	sh.asm	/^     fc0:	c3                   	ret    $/;"	l
fc1	sh.asm	/^     fc1:	b8 13 00 00 00       	mov    $0x13,%eax$/;"	l
fc1	usertests.asm	/^     fc1:	c7 44 24 04 b4 46 00 	movl   $0x46b4,0x4(%esp)$/;"	l
fc6	sh.asm	/^     fc6:	cd 40                	int    $0x40$/;"	l
fc8	sh.asm	/^     fc8:	c3                   	ret    $/;"	l
fc8	usertests.asm	/^     fc8:	00 $/;"	l
fc9	sh.asm	/^     fc9:	b8 14 00 00 00       	mov    $0x14,%eax$/;"	l
fc9	usertests.asm	/^     fc9:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
fce	sh.asm	/^     fce:	cd 40                	int    $0x40$/;"	l
fd	cat.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	echo.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	forktest.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	grep.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	init.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	kill.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	ln.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	ls.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	mkdir.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	rm.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	sh.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	sh.c	/^  int fd;$/;"	m	struct:redircmd	file:
fd	stressfs.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	stressfs.asm	/^  fd = open(path, O_CREATE | O_RDWR);$/;"	d
fd	stressfs.asm	/^  fd = open(path, O_RDONLY);$/;"	d
fd	usertests.asm	/^      fd = open(file, O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^    fd = open("", O_CREATE);$/;"	d
fd	usertests.asm	/^    fd = open("bigarg-ok", O_CREATE);$/;"	d
fd	usertests.asm	/^    fd = open("bigwrite", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^    fd = open("xx", O_CREATE);$/;"	d
fd	usertests.asm	/^    fd = open(i?"f1":"f2", 0);$/;"	d
fd	usertests.asm	/^    fd = open(name, 0);$/;"	d
fd	usertests.asm	/^    fd = open(name, O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^    fd = open(name, O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open(".", 0);$/;"	d
fd	usertests.asm	/^  fd = open(".", O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("123456789012345\/123456789012345\/123456789012345", O_CREATE);$/;"	d
fd	usertests.asm	/^  fd = open("12345678901234\/12345678901234\/12345678901234", 0);$/;"	d
fd	usertests.asm	/^  fd = open("bd", O_CREATE);$/;"	d
fd	usertests.asm	/^  fd = open("big", O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("big", O_RDONLY);$/;"	d
fd	usertests.asm	/^  fd = open("bigarg-ok", 0);$/;"	d
fd	usertests.asm	/^  fd = open("bigfile", 0);$/;"	d
fd	usertests.asm	/^  fd = open("bigfile", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("dd\/dd\/..\/ff", 0);$/;"	d
fd	usertests.asm	/^  fd = open("dd\/dd\/ff", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("dd\/dd\/ffff", 0);$/;"	d
fd	usertests.asm	/^  fd = open("dd\/ff", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("dirfile", O_CREATE);$/;"	d
fd	usertests.asm	/^  fd = open("dirfile\/xx", 0);$/;"	d
fd	usertests.asm	/^  fd = open("dirfile\/xx", O_CREATE);$/;"	d
fd	usertests.asm	/^  fd = open("doesnotexist", 0);$/;"	d
fd	usertests.asm	/^  fd = open("echo", 0);$/;"	d
fd	usertests.asm	/^  fd = open("lf1", O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("lf2", 0);$/;"	d
fd	usertests.asm	/^  fd = open("sharedfd", 0);$/;"	d
fd	usertests.asm	/^  fd = open("sharedfd", O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("small", O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("small", O_RDONLY);$/;"	d
fd	usertests.asm	/^  fd = open("unlinkread", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("unlinkread", O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open(fname, O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	wc.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	zombie.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	zombie.asm	/^  fd:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
fd0	kernel.asm	/^  fd0 = -1;$/;"	d
fd0	sh.asm	/^     fd0:	c3                   	ret    $/;"	l
fd0	usertests.asm	/^     fd0:	e8 bf 2d 00 00       	call   3d94 <printf>$/;"	l
fd1	sh.asm	/^     fd1:	b8 09 00 00 00       	mov    $0x9,%eax$/;"	l
fd1	usertests.asm	/^  fd1 = open("unlinkread", O_CREATE | O_RDWR);$/;"	d
fd5	usertests.asm	/^     fd5:	e8 32 2c 00 00       	call   3c0c <fork>$/;"	l
fd6	sh.asm	/^     fd6:	cd 40                	int    $0x40$/;"	l
fd8	sh.asm	/^     fd8:	c3                   	ret    $/;"	l
fd9	sh.asm	/^     fd9:	b8 0a 00 00 00       	mov    $0xa,%eax$/;"	l
fda	usertests.asm	/^     fda:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
fdalloc	sysfile.c	/^fdalloc(struct file *f)$/;"	f	file:
fdd	usertests.asm	/^     fdd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
fde	sh.asm	/^     fde:	cd 40                	int    $0x40$/;"	l
fe	cat.asm	/^  fe:	89 04 24             	mov    %eax,(%esp)$/;"	l
fe	echo.asm	/^  fe:	5d                   	pop    %ebp$/;"	l
fe	forktest.asm	/^  fe:	e8 fd fe ff ff       	call   0 <printf>$/;"	l
fe	init.asm	/^  fe:	78 0a                	js     10a <main+0x10a>$/;"	l
fe	kill.asm	/^  fe:	83 ec 10             	sub    $0x10,%esp$/;"	l
fe	ln.asm	/^  fe:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
fe	ls.asm	/^  fe:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
fe	mkdir.asm	/^  fe:	0f b6 10             	movzbl (%eax),%edx$/;"	l
fe	rm.asm	/^  fe:	0f b6 10             	movzbl (%eax),%edx$/;"	l
fe	sh.asm	/^      fe:	e8 fd fe ff ff       	call   0 <runcmd>$/;"	l
fe0	sh.asm	/^     fe0:	c3                   	ret    $/;"	l
fe1	sh.asm	/^     fe1:	b8 0b 00 00 00       	mov    $0xb,%eax$/;"	l
fe1	usertests.asm	/^     fe1:	79 19                	jns    ffc <createdelete+0x41>$/;"	l
fe3	usertests.asm	/^     fe3:	c7 44 24 04 4d 45 00 	movl   $0x454d,0x4(%esp)$/;"	l
fe6	sh.asm	/^     fe6:	cd 40                	int    $0x40$/;"	l
fe8	sh.asm	/^     fe8:	c3                   	ret    $/;"	l
fe9	sh.asm	/^     fe9:	b8 0c 00 00 00       	mov    $0xc,%eax$/;"	l
fea	usertests.asm	/^     fea:	00 $/;"	l
feature	mp.h	/^  uint feature;                 \/\/ feature flags from CPUID instruction$/;"	m	struct:mpproc
feb	usertests.asm	/^     feb:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
fee	sh.asm	/^     fee:	cd 40                	int    $0x40$/;"	l
fetchint	syscall.c	/^fetchint(uint addr, int *ip)$/;"	f
fetchstr	syscall.c	/^fetchstr(uint addr, char **pp)$/;"	f
ff	echo.asm	/^  ff:	c3                   	ret    $/;"	l
ff	kernel.asm	/^  ff = *f;$/;"	d
ff	usertests.asm	/^      ff:	e9 a0 00 00 00       	jmp    1a4 <writetest+0xf9>$/;"	l
ff0	sh.asm	/^     ff0:	c3                   	ret    $/;"	l
ff1	sh.asm	/^     ff1:	b8 0d 00 00 00       	mov    $0xd,%eax$/;"	l
ff2	usertests.asm	/^     ff2:	e8 9d 2d 00 00       	call   3d94 <printf>$/;"	l
ff6	sh.asm	/^     ff6:	cd 40                	int    $0x40$/;"	l
ff7	usertests.asm	/^     ff7:	e8 18 2c 00 00       	call   3c14 <exit>$/;"	l
ff8	sh.asm	/^     ff8:	c3                   	ret    $/;"	l
ff9	sh.asm	/^     ff9:	b8 0e 00 00 00       	mov    $0xe,%eax$/;"	l
ffc	usertests.asm	/^     ffc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
ffe	sh.asm	/^     ffe:	cd 40                	int    $0x40$/;"	l
file	file.c	/^  struct file file[NFILE];$/;"	m	struct:__anon2	typeref:struct:__anon2::file	file:
file	file.h	/^struct file {$/;"	s
file	sh.c	/^  char *file;$/;"	m	struct:redircmd	file:
filealloc	file.c	/^filealloc(void)$/;"	f
fileclose	file.c	/^fileclose(struct file *f)$/;"	f
filedup	file.c	/^filedup(struct file *f)$/;"	f
fileinit	file.c	/^fileinit(void)$/;"	f
fileread	file.c	/^fileread(struct file *f, char *addr, int n)$/;"	f
filestat	file.c	/^filestat(struct file *f, struct stat *st)$/;"	f
filesz	elf.h	/^  uint filesz;$/;"	m	struct:proghdr
filewrite	file.c	/^filewrite(struct file *f, char *addr, int n)$/;"	f
first	kernel.asm	/^    first = 0;$/;"	d
flags	buf.h	/^  int flags;$/;"	m	struct:buf
flags	elf.h	/^  uint flags;$/;"	m	struct:elfhdr
flags	elf.h	/^  uint flags;$/;"	m	struct:proghdr
flags	file.h	/^  int flags;          \/\/ I_BUSY, I_VALID$/;"	m	struct:inode
flags	kernel.asm	/^    flags = PTE_FLAGS(*pte);$/;"	d
flags	mp.h	/^  uchar flags;                  \/\/ CPU flags$/;"	m	struct:mpproc
flags	mp.h	/^  uchar flags;                  \/\/ I\/O APIC flags$/;"	m	struct:mpioapic
fmtname	ls.c	/^fmtname(char *path)$/;"	f
fname	usertests.asm	/^  fname = pid ? "f1" : "f2";$/;"	d
fork	proc.c	/^fork(void)$/;"	f
fork1	sh.c	/^fork1(void)$/;"	f
forkret	proc.c	/^forkret(void)$/;"	f
forktest	forktest.c	/^forktest(void)$/;"	f
forktest	usertests.c	/^forktest(void)$/;"	f
found	kernel.asm	/^found:$/;"	l
fourteen	usertests.c	/^fourteen(void)$/;"	f
free	umalloc.c	/^free(void *ap)$/;"	f
freeblock	mkfs.c	/^uint freeblock;$/;"	v
freeinode	mkfs.c	/^uint freeinode = 1;$/;"	v
freelist	kalloc.c	/^  struct run *freelist;$/;"	m	struct:__anon5	typeref:struct:__anon5::run	file:
freep	cat.asm	/^      freep = prevp;$/;"	d
freep	cat.asm	/^  freep = p;$/;"	d
freep	echo.asm	/^      freep = prevp;$/;"	d
freep	echo.asm	/^  freep = p;$/;"	d
freep	grep.asm	/^      freep = prevp;$/;"	d
freep	grep.asm	/^  freep = p;$/;"	d
freep	init.asm	/^      freep = prevp;$/;"	d
freep	init.asm	/^  freep = p;$/;"	d
freep	kill.asm	/^      freep = prevp;$/;"	d
freep	kill.asm	/^  freep = p;$/;"	d
freep	ln.asm	/^      freep = prevp;$/;"	d
freep	ln.asm	/^  freep = p;$/;"	d
freep	ls.asm	/^      freep = prevp;$/;"	d
freep	ls.asm	/^  freep = p;$/;"	d
freep	mkdir.asm	/^      freep = prevp;$/;"	d
freep	mkdir.asm	/^  freep = p;$/;"	d
freep	rm.asm	/^      freep = prevp;$/;"	d
freep	rm.asm	/^  freep = p;$/;"	d
freep	sh.asm	/^      freep = prevp;$/;"	d
freep	sh.asm	/^  freep = p;$/;"	d
freep	stressfs.asm	/^      freep = prevp;$/;"	d
freep	stressfs.asm	/^  freep = p;$/;"	d
freep	umalloc.c	/^static Header *freep;$/;"	v	file:
freep	usertests.asm	/^      freep = prevp;$/;"	d
freep	usertests.asm	/^  freep = p;$/;"	d
freep	wc.asm	/^      freep = prevp;$/;"	d
freep	wc.asm	/^  freep = p;$/;"	d
freep	zombie.asm	/^      freep = prevp;$/;"	d
freep	zombie.asm	/^  freep = p;$/;"	d
freerange	kalloc.c	/^freerange(void *vstart, void *vend)$/;"	f
freevm	vm.c	/^freevm(pde_t *pgdir)$/;"	f
fs	mmu.h	/^  ushort fs;$/;"	m	struct:taskstate
fs	x86.h	/^  ushort fs;$/;"	m	struct:trapframe
fsfd	mkfs.c	/^int fsfd;$/;"	v
fsfull	usertests.c	/^fsfull()$/;"	f
ftable	file.c	/^} ftable;$/;"	v	typeref:struct:__anon2
g	mmu.h	/^  uint g : 1;          \/\/ Granularity: limit scaled by 4K when set$/;"	m	struct:segdesc
gatedesc	mmu.h	/^struct gatedesc {$/;"	s
gdt	bootasm.S	/^gdt:$/;"	l
gdt	entryother.S	/^gdt:$/;"	l
gdt	proc.h	/^  struct segdesc gdt[NSEGS];   \/\/ x86 global descriptor table$/;"	m	struct:cpu	typeref:struct:cpu::segdesc
gdt	vm.c	/^struct segdesc gdt[NSEGS];$/;"	v	typeref:struct:segdesc
gdtdesc	bootasm.S	/^gdtdesc:$/;"	l
gdtdesc	entryother.S	/^gdtdesc:$/;"	l
getcallerpcs	spinlock.c	/^getcallerpcs(void *v, uint pcs[])$/;"	f
getcmd	sh.c	/^getcmd(char *buf, int nbuf)$/;"	f
gets	ulib.c	/^gets(char *buf, int max)$/;"	f
gettoken	sh.c	/^gettoken(char **ps, char *es, char **q, char **eq)$/;"	f
grep	grep.c	/^grep(char *pattern, int fd)$/;"	f
growproc	proc.c	/^growproc(int n)$/;"	f
gs	mmu.h	/^  ushort gs;$/;"	m	struct:taskstate
gs	x86.h	/^  ushort gs;$/;"	m	struct:trapframe
havedisk1	ide.c	/^static int havedisk1;$/;"	v	file:
havedisk1	kernel.asm	/^      havedisk1 = 1;$/;"	d
havekids	kernel.asm	/^      havekids = 1;$/;"	d
havekids	kernel.asm	/^    havekids = 0;$/;"	d
head	bio.c	/^  struct buf head;$/;"	m	struct:__anon9	typeref:struct:__anon9::buf	file:
header	umalloc.c	/^union header {$/;"	u	file:
hi	usertests.asm	/^  hi = 1100*1024;$/;"	d
holding	spinlock.c	/^holding(struct spinlock *lock)$/;"	f
hp	cat.asm	/^  hp = (Header*)p;$/;"	d
hp	echo.asm	/^  hp = (Header*)p;$/;"	d
hp	grep.asm	/^  hp = (Header*)p;$/;"	d
hp	init.asm	/^  hp = (Header*)p;$/;"	d
hp	kill.asm	/^  hp = (Header*)p;$/;"	d
hp	ln.asm	/^  hp = (Header*)p;$/;"	d
hp	ls.asm	/^  hp = (Header*)p;$/;"	d
hp	mkdir.asm	/^  hp = (Header*)p;$/;"	d
hp	rm.asm	/^  hp = (Header*)p;$/;"	d
hp	sh.asm	/^  hp = (Header*)p;$/;"	d
hp	stressfs.asm	/^  hp = (Header*)p;$/;"	d
hp	usertests.asm	/^  hp = (Header*)p;$/;"	d
hp	wc.asm	/^  hp = (Header*)p;$/;"	d
hp	zombie.asm	/^  hp = (Header*)p;$/;"	d
i	cat.asm	/^  i = 0;$/;"	d
i	echo.asm	/^  i = 0;$/;"	d
i	grep.asm	/^  i = 0;$/;"	d
i	init.asm	/^  i = 0;$/;"	d
i	kernel.asm	/^  i = 0;$/;"	d
i	kill.asm	/^  i = 0;$/;"	d
i	ln.asm	/^  i = 0;$/;"	d
i	ls.asm	/^  i = 0;$/;"	d
i	mkdir.asm	/^  i = 0;$/;"	d
i	rm.asm	/^  i = 0;$/;"	d
i	sh.asm	/^  i = 0;$/;"	d
i	stressfs.asm	/^  i = 0;$/;"	d
i	usertests.asm	/^      i = de.name[1] - '0';$/;"	d
i	usertests.asm	/^    i = read(fd, buf, 512);$/;"	d
i	usertests.asm	/^  i = 0;$/;"	d
i	usertests.asm	/^  i = read(fd, buf, 2000);$/;"	d
i	wc.asm	/^  i = 0;$/;"	d
i	zombie.asm	/^  i = 0;$/;"	d
i2b	mkfs.c	/^i2b(uint inum)$/;"	f
ialloc	fs.c	/^ialloc(uint dev, short type)$/;"	f
ialloc	mkfs.c	/^ialloc(ushort type)$/;"	f
iappend	mkfs.c	/^iappend(uint inum, void *xp, int n)$/;"	f
icache	fs.c	/^} icache;$/;"	v	typeref:struct:__anon1
id	kernel.asm	/^  id = ioapicread(REG_ID) >> 24;$/;"	d
id	proc.h	/^  uchar id;                    \/\/ Local APIC ID; index into cpus[] below$/;"	m	struct:cpu
ideinit	ide.c	/^ideinit(void)$/;"	f
ideinit	memide.c	/^ideinit(void)$/;"	f
ideintr	ide.c	/^ideintr(void)$/;"	f
ideintr	memide.c	/^ideintr(void)$/;"	f
idelock	ide.c	/^static struct spinlock idelock;$/;"	v	typeref:struct:spinlock	file:
idequeue	ide.c	/^static struct buf *idequeue;$/;"	v	typeref:struct:buf	file:
idequeue	kernel.asm	/^  idequeue = b->qnext;$/;"	d
iderw	ide.c	/^iderw(struct buf *b)$/;"	f
iderw	memide.c	/^iderw(struct buf *b)$/;"	f
idestart	ide.c	/^idestart(struct buf *b)$/;"	f	file:
idewait	ide.c	/^idewait(int checkerr)$/;"	f	file:
idt	trap.c	/^struct gatedesc idt[256];$/;"	v	typeref:struct:gatedesc
idtinit	trap.c	/^idtinit(void)$/;"	f
idup	fs.c	/^idup(struct inode *ip)$/;"	f
iget	fs.c	/^iget(uint dev, uint inum)$/;"	f	file:
iinit	fs.c	/^iinit(void)$/;"	f
ilock	fs.c	/^ilock(struct inode *ip)$/;"	f
imcrp	mp.h	/^  uchar imcrp;$/;"	m	struct:mp
inb	x86.h	/^inb(ushort port)$/;"	f
init	initcode.S	/^init:$/;"	l
initlock	spinlock.c	/^initlock(struct spinlock *lk, char *name)$/;"	f
initlog	log.c	/^initlog(void)$/;"	f
initproc	kernel.asm	/^  initproc = p;$/;"	d
initproc	proc.c	/^static struct proc *initproc;$/;"	v	typeref:struct:proc	file:
inituvm	vm.c	/^inituvm(pde_t *pgdir, char *init, uint sz)$/;"	f
ino	stat.h	/^  uint ino;    \/\/ Inode number$/;"	m	struct:stat
inode	file.h	/^struct inode {$/;"	s
inode	fs.c	/^  struct inode inode[NINODE];$/;"	m	struct:__anon1	typeref:struct:__anon1::inode	file:
input	console.c	/^} input;$/;"	v	typeref:struct:__anon7
insl	x86.h	/^insl(int port, void *addr, int cnt)$/;"	f
install_trans	log.c	/^install_trans(void)$/;"	f	file:
int	cat.asm	/^int$/;"	l
int	echo.asm	/^int$/;"	l
int	forktest.asm	/^int$/;"	l
int	grep.asm	/^int match(char*, char*);$/;"	l
int	grep.asm	/^int matchhere(char *re, char *text)$/;"	l
int	grep.asm	/^int matchhere(char*, char*);$/;"	l
int	grep.asm	/^int matchstar(int c, char *re, char *text)$/;"	l
int	grep.asm	/^int matchstar(int, char*, char*);$/;"	l
int	grep.asm	/^int$/;"	l
int	init.asm	/^int$/;"	l
int	kernel.asm	/^int ncpu;$/;"	l
int	kernel.asm	/^int$/;"	l
int	kill.asm	/^int$/;"	l
int	ln.asm	/^int$/;"	l
int	ls.asm	/^int$/;"	l
int	mkdir.asm	/^int$/;"	l
int	rm.asm	/^int$/;"	l
int	sh.asm	/^int$/;"	l
int	stressfs.asm	/^int$/;"	l
int	usertests.asm	/^int$/;"	l
int	wc.asm	/^int$/;"	l
int	zombie.asm	/^int$/;"	l
intena	kernel.asm	/^  intena = cpu->intena;$/;"	d
intena	proc.h	/^  int intena;                  \/\/ Were interrupts enabled before pushcli?$/;"	m	struct:cpu
inum	file.h	/^  uint inum;          \/\/ Inode number$/;"	m	struct:inode
inum	fs.h	/^  ushort inum;$/;"	m	struct:dirent
inum	kernel.asm	/^      inum = de.inum;$/;"	d
inword	wc.asm	/^        inword = 0;$/;"	d
inword	wc.asm	/^        inword = 1;$/;"	d
inword	wc.asm	/^  inword = 0;$/;"	d
ioapic	ioapic.c	/^struct ioapic {$/;"	s	file:
ioapic	ioapic.c	/^volatile struct ioapic *ioapic;$/;"	v	typeref:struct:ioapic
ioapic	kernel.asm	/^      ioapic = (struct mpioapic*)p;$/;"	d
ioapic	kernel.asm	/^  ioapic = (volatile struct ioapic*)IOAPIC;$/;"	d
ioapicenable	ioapic.c	/^ioapicenable(int irq, int cpunum)$/;"	f
ioapicid	kernel.asm	/^      ioapicid = ioapic->apicno;$/;"	d
ioapicid	kernel.asm	/^    ioapicid = 0;$/;"	d
ioapicid	mp.c	/^uchar ioapicid;$/;"	v
ioapicinit	ioapic.c	/^ioapicinit(void)$/;"	f
ioapicread	ioapic.c	/^ioapicread(int reg)$/;"	f	file:
ioapicwrite	ioapic.c	/^ioapicwrite(int reg, uint data)$/;"	f	file:
iomb	mmu.h	/^  ushort iomb;       \/\/ I\/O map base address$/;"	m	struct:taskstate
ip	file.h	/^  struct inode *ip;$/;"	m	struct:file	typeref:struct:file::inode
ip	kernel.asm	/^    ip = create(path, T_FILE, 0, 0);$/;"	d
ip	kernel.asm	/^    ip = idup(proc->cwd);$/;"	d
ip	kernel.asm	/^    ip = iget(ROOTDEV, ROOTINO);$/;"	d
ip	kernel.asm	/^    ip = next;$/;"	d
ip	kernel.asm	/^  ip = 0;$/;"	d
ip	kernel.asm	/^  ip = empty;$/;"	d
iput	fs.c	/^iput(struct inode *ip)$/;"	f
iref	usertests.c	/^iref(void)$/;"	f
irqmask	kernel.asm	/^  irqmask = mask;$/;"	d
irqmask	picirq.c	/^static ushort irqmask = 0xFFFF & ~(1<<IRQ_SLAVE);$/;"	v	file:
isdirempty	sysfile.c	/^isdirempty(struct inode *dp)$/;"	f	file:
ismp	kernel.asm	/^        ismp = 0;$/;"	d
ismp	kernel.asm	/^      ismp = 0;$/;"	d
ismp	kernel.asm	/^  ismp = 1;$/;"	d
ismp	mp.c	/^int ismp;$/;"	v
itrunc	fs.c	/^itrunc(struct inode *ip)$/;"	f	file:
iunlock	fs.c	/^iunlock(struct inode *ip)$/;"	f
iunlockput	fs.c	/^iunlockput(struct inode *ip)$/;"	f
iupdate	fs.c	/^iupdate(struct inode *ip)$/;"	f
kalloc	kalloc.c	/^kalloc(void)$/;"	f
kbdgetc	kbd.c	/^kbdgetc(void)$/;"	f
kbdintr	kbd.c	/^kbdintr(void)$/;"	f
kernel	kernel.asm	/^kernel:     file format elf32-i386$/;"	l
kfree	kalloc.c	/^kfree(char *v)$/;"	f
kill	proc.c	/^kill(int pid)$/;"	f
killed	proc.h	/^  int killed;                  \/\/ If non-zero, have been killed$/;"	m	struct:proc
kinit1	kalloc.c	/^kinit1(void *vstart, void *vend)$/;"	f
kinit2	kalloc.c	/^kinit2(void *vstart, void *vend)$/;"	f
kmap	vm.c	/^static struct kmap {$/;"	s	file:
kmap	vm.c	/^} kmap[] = {$/;"	v	typeref:struct:kmap	file:
kmem	kalloc.c	/^} kmem;$/;"	v	typeref:struct:__anon5
kpgdir	kernel.asm	/^  kpgdir = setupkvm();$/;"	d
kpgdir	vm.c	/^pde_t *kpgdir;  \/\/ for use in scheduler()$/;"	v
kstack	proc.h	/^  char *kstack;                \/\/ Bottom of kernel stack for this process$/;"	m	struct:proc
kvmalloc	vm.c	/^kvmalloc(void)$/;"	f
l	wc.asm	/^  l = w = c = 0;$/;"	d
lapic	kernel.asm	/^    lapic = 0;$/;"	d
lapic	kernel.asm	/^  lapic = (uint*)conf->lapicaddr;$/;"	d
lapic	lapic.c	/^volatile uint *lapic;  \/\/ Initialized in mp.c$/;"	v
lapicaddr	mp.h	/^  uint *lapicaddr;              \/\/ address of local APIC$/;"	m	struct:mpconf
lapiceoi	lapic.c	/^lapiceoi(void)$/;"	f
lapicinit	lapic.c	/^lapicinit(void)$/;"	f
lapicstartap	lapic.c	/^lapicstartap(uchar apicid, uint addr)$/;"	f
lapicw	lapic.c	/^lapicw(int index, int value)$/;"	f	file:
last	kernel.asm	/^      last = s+1;$/;"	d
last	kernel.asm	/^  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);$/;"	d
lastaddr	usertests.asm	/^  lastaddr = (char*) (BIG-1);$/;"	d
lcmd	sh.asm	/^    lcmd = (struct listcmd*)cmd;$/;"	d
lcr3	x86.h	/^lcr3(uint val) $/;"	f
ldt	mmu.h	/^  ushort ldt;$/;"	m	struct:taskstate
left	sh.c	/^  struct cmd *left;$/;"	m	struct:listcmd	typeref:struct:listcmd::cmd	file:
left	sh.c	/^  struct cmd *left;$/;"	m	struct:pipecmd	typeref:struct:pipecmd::cmd	file:
len	kernel.asm	/^  len = path - s;$/;"	d
length	mp.h	/^  uchar length;                 \/\/ 1$/;"	m	struct:mp
length	mp.h	/^  ushort length;                \/\/ total table length$/;"	m	struct:mpconf
lgdt	x86.h	/^lgdt(struct segdesc *p, int size)$/;"	f
lh	log.c	/^  struct logheader lh;$/;"	m	struct:log	typeref:struct:log::logheader	file:
lidt	x86.h	/^lidt(struct gatedesc *p, int size)$/;"	f
lim_15_0	mmu.h	/^  uint lim_15_0 : 16;  \/\/ Low bits of segment limit$/;"	m	struct:segdesc
lim_19_16	mmu.h	/^  uint lim_19_16 : 4;  \/\/ High bits of segment limit$/;"	m	struct:segdesc
link	mmu.h	/^  uint link;         \/\/ Old ts selector$/;"	m	struct:taskstate
linktest	usertests.c	/^linktest(void)$/;"	f
linkunlink	usertests.c	/^linkunlink()$/;"	f
listcmd	sh.c	/^listcmd(struct cmd *left, struct cmd *right)$/;"	f
listcmd	sh.c	/^struct listcmd {$/;"	s	file:
loadgs	x86.h	/^loadgs(ushort v)$/;"	f
loaduvm	vm.c	/^loaduvm(pde_t *pgdir, char *addr, struct inode *ip, uint offset, uint sz)$/;"	f
lock	bio.c	/^  struct spinlock lock;$/;"	m	struct:__anon9	typeref:struct:__anon9::spinlock	file:
lock	console.c	/^  struct spinlock lock;$/;"	m	struct:__anon6	typeref:struct:__anon6::spinlock	file:
lock	console.c	/^  struct spinlock lock;$/;"	m	struct:__anon7	typeref:struct:__anon7::spinlock	file:
lock	file.c	/^  struct spinlock lock;$/;"	m	struct:__anon2	typeref:struct:__anon2::spinlock	file:
lock	fs.c	/^  struct spinlock lock;$/;"	m	struct:__anon1	typeref:struct:__anon1::spinlock	file:
lock	kalloc.c	/^  struct spinlock lock;$/;"	m	struct:__anon5	typeref:struct:__anon5::spinlock	file:
lock	log.c	/^  struct spinlock lock;$/;"	m	struct:log	typeref:struct:log::spinlock	file:
lock	pipe.c	/^  struct spinlock lock;$/;"	m	struct:pipe	typeref:struct:pipe::spinlock	file:
lock	proc.c	/^  struct spinlock lock;$/;"	m	struct:__anon8	typeref:struct:__anon8::spinlock	file:
locked	spinlock.h	/^  uint locked;       \/\/ Is the lock held?$/;"	m	struct:spinlock
locking	console.c	/^  int locking;$/;"	m	struct:__anon6	file:
locking	kernel.asm	/^  locking = cons.locking;$/;"	d
log	log.c	/^struct log log;$/;"	v	typeref:struct:log
log	log.c	/^struct log {$/;"	s	file:
log_write	log.c	/^log_write(struct buf *b)$/;"	f
logheader	log.c	/^struct logheader {$/;"	s	file:
loop	kernel.asm	/^ loop:$/;"	l
ls	ls.c	/^ls(char *path)$/;"	f
ltr	x86.h	/^ltr(ushort sel)$/;"	f
m	grep.asm	/^      m = 0;$/;"	d
m	grep.asm	/^  m = 0;$/;"	d
m	kernel.asm	/^      m = 1 << (bi % 8);$/;"	d
m	kernel.asm	/^    m = min(n - tot, BSIZE - off%BSIZE);$/;"	d
m	kernel.asm	/^  m = 1 << (bi % 8);$/;"	d
m1	usertests.asm	/^      m1 = m2;$/;"	d
m1	usertests.asm	/^    m1 = 0;$/;"	d
m1	usertests.asm	/^    m1 = malloc(1024*20);$/;"	d
m2	usertests.asm	/^      m2 = *(char**)m1;$/;"	d
machine	elf.h	/^  ushort machine;$/;"	m	struct:elfhdr
magic	elf.h	/^  uint magic;  \/\/ must equal ELF_MAGIC$/;"	m	struct:elfhdr
main	cat.c	/^main(int argc, char *argv[])$/;"	f
main	echo.c	/^main(int argc, char *argv[])$/;"	f
main	forktest.c	/^main(void)$/;"	f
main	grep.c	/^main(int argc, char *argv[])$/;"	f
main	init.c	/^main(void)$/;"	f
main	kill.c	/^main(int argc, char **argv)$/;"	f
main	ln.c	/^main(int argc, char *argv[])$/;"	f
main	ls.c	/^main(int argc, char *argv[])$/;"	f
main	main.c	/^main(void)$/;"	f
main	mkdir.c	/^main(int argc, char *argv[])$/;"	f
main	mkfs.c	/^main(int argc, char *argv[])$/;"	f
main	rm.c	/^main(int argc, char *argv[])$/;"	f
main	sh.c	/^main(void)$/;"	f
main	stat.c	/^int main(int argc, char *args[]) {$/;"	f
main	stressfs.c	/^main(int argc, char *argv[])$/;"	f
main	usertests.c	/^main(int argc, char *argv[])$/;"	f
main	wc.c	/^main(int argc, char *argv[])$/;"	f
main	zombie.c	/^main(void)$/;"	f
major	file.h	/^  short major;$/;"	m	struct:inode
major	fs.h	/^  short major;          \/\/ Major device number (T_DEV only)$/;"	m	struct:dinode
malloc	umalloc.c	/^malloc(uint nbytes)$/;"	f
mappages	vm.c	/^mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)$/;"	f	file:
match	grep.c	/^match(char *re, char *text)$/;"	f
matchhere	grep.c	/^int matchhere(char *re, char *text)$/;"	f
matchstar	grep.c	/^int matchstar(int c, char *re, char *text)$/;"	f
maxintr	kernel.asm	/^  maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;$/;"	d
mem	kernel.asm	/^    mem = kalloc();$/;"	d
mem	kernel.asm	/^  mem = kalloc();$/;"	d
mem	usertests.c	/^mem(void)$/;"	f
memcmp	string.c	/^memcmp(const void *v1, const void *v2, uint n)$/;"	f
memcpy	string.c	/^memcpy(void *dst, const void *src, uint n)$/;"	f
memdisk	memide.c	/^static uchar *memdisk;$/;"	v	file:
memmove	string.c	/^memmove(void *dst, const void *src, uint n)$/;"	f
memmove	ulib.c	/^memmove(void *vdst, void *vsrc, int n)$/;"	f
memset	string.c	/^memset(void *dst, int c, uint n)$/;"	f
memset	ulib.c	/^memset(void *dst, int c, uint n)$/;"	f
memsz	elf.h	/^  uint memsz;$/;"	m	struct:proghdr
microdelay	lapic.c	/^microdelay(int us)$/;"	f
min	fs.c	23;"	d	file:
min	mkfs.c	249;"	d	file:
minor	file.h	/^  short minor;$/;"	m	struct:inode
minor	fs.h	/^  short minor;          \/\/ Minor device number (T_DEV only)$/;"	m	struct:dinode
mode	sh.c	/^  int mode;$/;"	m	struct:redircmd	file:
morecore	umalloc.c	/^morecore(uint nu)$/;"	f	file:
mp	mp.h	/^struct mp {             \/\/ floating pointer$/;"	s
mpbcpu	mp.c	/^mpbcpu(void)$/;"	f
mpconf	mp.h	/^struct mpconf {         \/\/ configuration table header$/;"	s
mpconfig	mp.c	/^mpconfig(struct mp **pmp)$/;"	f	file:
mpenter	main.c	/^mpenter(void)$/;"	f	file:
mpinit	mp.c	/^mpinit(void)$/;"	f
mpioapic	mp.h	/^struct mpioapic {       \/\/ I\/O APIC table entry$/;"	s
mpmain	main.c	/^mpmain(void)$/;"	f	file:
mpproc	mp.h	/^struct mpproc {         \/\/ processor table entry$/;"	s
mpsearch	mp.c	/^mpsearch(void)$/;"	f	file:
mpsearch1	mp.c	/^mpsearch1(uint a, int len)$/;"	f	file:
multiboot_header	entry.S	/^multiboot_header:$/;"	l
n	cat.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	cat.asm	/^  n = 0;$/;"	d
n	echo.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	echo.asm	/^  n = 0;$/;"	d
n	forktest.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	forktest.asm	/^  n = 0;$/;"	d
n	grep.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	grep.asm	/^  n = 0;$/;"	d
n	init.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	init.asm	/^  n = 0;$/;"	d
n	kernel.asm	/^      n = PGSIZE;$/;"	d
n	kernel.asm	/^      n = len;$/;"	d
n	kernel.asm	/^      n = sz - i;$/;"	d
n	kernel.asm	/^    n = PGSIZE - (va - va0);$/;"	d
n	kernel.asm	/^    n = ip->size - off;$/;"	d
n	kill.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	kill.asm	/^  n = 0;$/;"	d
n	ln.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	ln.asm	/^  n = 0;$/;"	d
n	log.c	/^  int n;   $/;"	m	struct:logheader	file:
n	ls.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	ls.asm	/^  n = 0;$/;"	d
n	mkdir.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	mkdir.asm	/^  n = 0;$/;"	d
n	rm.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	rm.asm	/^  n = 0;$/;"	d
n	sh.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	sh.asm	/^  n = 0;$/;"	d
n	stressfs.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	stressfs.asm	/^  n = 0;$/;"	d
n	usertests.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	usertests.asm	/^  n = 0;$/;"	d
n	wc.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	wc.asm	/^  n = 0;$/;"	d
n	zombie.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	zombie.asm	/^  n = 0;$/;"	d
n1	kernel.asm	/^        n1 = max;$/;"	d
name	cat.asm	/^  name: \\$/;"	l
name	echo.asm	/^  name: \\$/;"	l
name	forktest.asm	/^  name: \\$/;"	l
name	fs.h	/^  char name[DIRSIZ];$/;"	m	struct:dirent
name	grep.asm	/^  name: \\$/;"	l
name	init.asm	/^  name: \\$/;"	l
name	kill.asm	/^  name: \\$/;"	l
name	ln.asm	/^  name: \\$/;"	l
name	ls.asm	/^  name: \\$/;"	l
name	mkdir.asm	/^  name: \\$/;"	l
name	proc.h	/^  char name[16];               \/\/ Process name (debugging)$/;"	m	struct:proc
name	rm.asm	/^  name: \\$/;"	l
name	sh.asm	/^  name: \\$/;"	l
name	spinlock.h	/^  char *name;        \/\/ Name of lock.$/;"	m	struct:spinlock
name	stressfs.asm	/^  name: \\$/;"	l
name	usertests.asm	/^  name: \\$/;"	l
name	usertests.c	/^char name[3];$/;"	v
name	usys.S	/^  name: \\$/;"	l
name	wc.asm	/^  name: \\$/;"	l
name	zombie.asm	/^  name: \\$/;"	l
namecmp	fs.c	/^namecmp(const char *s, const char *t)$/;"	f
namei	fs.c	/^namei(char *path)$/;"	f
nameiparent	fs.c	/^nameiparent(char *path, char *name)$/;"	f
namex	fs.c	/^namex(char *path, int nameiparent, char *name)$/;"	f	file:
nblocks	fs.h	/^  uint nblocks;      \/\/ Number of data blocks$/;"	m	struct:superblock
nblocks	mkfs.c	/^int nblocks = 985;$/;"	v
nc	usertests.asm	/^  nc = np = 0;$/;"	d
ncli	proc.h	/^  int ncli;                    \/\/ Depth of pushcli nesting.$/;"	m	struct:cpu
ncpu	kernel.asm	/^    ncpu = 1;$/;"	d
ncpu	mp.c	/^int ncpu;$/;"	v
neg	cat.asm	/^    neg = 1;$/;"	d
neg	cat.asm	/^  neg = 0;$/;"	d
neg	echo.asm	/^    neg = 1;$/;"	d
neg	echo.asm	/^  neg = 0;$/;"	d
neg	grep.asm	/^    neg = 1;$/;"	d
neg	grep.asm	/^  neg = 0;$/;"	d
neg	init.asm	/^    neg = 1;$/;"	d
neg	init.asm	/^  neg = 0;$/;"	d
neg	kill.asm	/^    neg = 1;$/;"	d
neg	kill.asm	/^  neg = 0;$/;"	d
neg	ln.asm	/^    neg = 1;$/;"	d
neg	ln.asm	/^  neg = 0;$/;"	d
neg	ls.asm	/^    neg = 1;$/;"	d
neg	ls.asm	/^  neg = 0;$/;"	d
neg	mkdir.asm	/^    neg = 1;$/;"	d
neg	mkdir.asm	/^  neg = 0;$/;"	d
neg	rm.asm	/^    neg = 1;$/;"	d
neg	rm.asm	/^  neg = 0;$/;"	d
neg	sh.asm	/^    neg = 1;$/;"	d
neg	sh.asm	/^  neg = 0;$/;"	d
neg	stressfs.asm	/^    neg = 1;$/;"	d
neg	stressfs.asm	/^  neg = 0;$/;"	d
neg	usertests.asm	/^    neg = 1;$/;"	d
neg	usertests.asm	/^  neg = 0;$/;"	d
neg	wc.asm	/^    neg = 1;$/;"	d
neg	wc.asm	/^  neg = 0;$/;"	d
neg	zombie.asm	/^    neg = 1;$/;"	d
neg	zombie.asm	/^  neg = 0;$/;"	d
next	buf.h	/^  struct buf *next;$/;"	m	struct:buf	typeref:struct:buf::buf
next	kalloc.c	/^  struct run *next;$/;"	m	struct:run	typeref:struct:run::run	file:
nextpid	proc.c	/^int nextpid = 1;$/;"	v
ninodes	fs.h	/^  uint ninodes;      \/\/ Number of inodes.$/;"	m	struct:superblock
ninodes	mkfs.c	/^int ninodes = 200;$/;"	v
nlink	file.h	/^  short nlink;$/;"	m	struct:inode
nlink	fs.h	/^  short nlink;          \/\/ Number of links to inode in file system$/;"	m	struct:dinode
nlink	stat.h	/^  short nlink; \/\/ Number of links to file$/;"	m	struct:stat
nlog	fs.h	/^  uint nlog;         \/\/ Number of log blocks$/;"	m	struct:superblock
nlog	mkfs.c	/^int nlog = LOGSIZE;$/;"	v
normalmap	kbd.h	/^static uchar normalmap[256] =$/;"	v
nread	pipe.c	/^  uint nread;     \/\/ number of bytes read$/;"	m	struct:pipe	file:
nu	cat.asm	/^    nu = 4096;$/;"	d
nu	echo.asm	/^    nu = 4096;$/;"	d
nu	grep.asm	/^    nu = 4096;$/;"	d
nu	init.asm	/^    nu = 4096;$/;"	d
nu	kill.asm	/^    nu = 4096;$/;"	d
nu	ln.asm	/^    nu = 4096;$/;"	d
nu	ls.asm	/^    nu = 4096;$/;"	d
nu	mkdir.asm	/^    nu = 4096;$/;"	d
nu	rm.asm	/^    nu = 4096;$/;"	d
nu	sh.asm	/^    nu = 4096;$/;"	d
nu	stressfs.asm	/^    nu = 4096;$/;"	d
nu	usertests.asm	/^    nu = 4096;$/;"	d
nu	wc.asm	/^    nu = 4096;$/;"	d
nu	zombie.asm	/^    nu = 4096;$/;"	d
nulterminate	sh.c	/^nulterminate(struct cmd *cmd)$/;"	f
num	kernel.asm	/^  num = proc->tf->eax;$/;"	d
nunits	cat.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	echo.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	grep.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	init.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	kill.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	ln.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	ls.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	mkdir.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	rm.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	sh.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	stressfs.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	usertests.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	wc.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	zombie.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nwrite	pipe.c	/^  uint nwrite;    \/\/ number of bytes written$/;"	m	struct:pipe	file:
oemlength	mp.h	/^  ushort oemlength;             \/\/ OEM table length$/;"	m	struct:mpconf
oemtable	mp.h	/^  uint *oemtable;               \/\/ OEM table pointer$/;"	m	struct:mpconf
oesp	x86.h	/^  uint oesp;      \/\/ useless & ignored$/;"	m	struct:trapframe
off	elf.h	/^  uint off;$/;"	m	struct:proghdr
off	file.h	/^  uint off;$/;"	m	struct:file
off_15_0	mmu.h	/^  uint off_15_0 : 16;   \/\/ low 16 bits of offset in segment$/;"	m	struct:gatedesc
off_31_16	mmu.h	/^  uint off_31_16 : 16;  \/\/ high bits of offset in segment$/;"	m	struct:gatedesc
offset	bootblock.asm	/^  offset = (offset \/ SECTSIZE) + 1;$/;"	d
ofile	proc.h	/^  struct file *ofile[NOFILE];  \/\/ Open files$/;"	m	struct:proc	typeref:struct:proc::file
oldbrk	usertests.asm	/^  oldbrk = sbrk(0);$/;"	d
oldpgdir	kernel.asm	/^  oldpgdir = proc->pgdir;$/;"	d
opentest	usertests.c	/^opentest(void)$/;"	f
os	cat.asm	/^  os = s;$/;"	d
os	echo.asm	/^  os = s;$/;"	d
os	forktest.asm	/^  os = s;$/;"	d
os	grep.asm	/^  os = s;$/;"	d
os	init.asm	/^  os = s;$/;"	d
os	kernel.asm	/^  os = s;$/;"	d
os	kill.asm	/^  os = s;$/;"	d
os	ln.asm	/^  os = s;$/;"	d
os	ls.asm	/^  os = s;$/;"	d
os	mkdir.asm	/^  os = s;$/;"	d
os	rm.asm	/^  os = s;$/;"	d
os	sh.asm	/^  os = s;$/;"	d
os	stressfs.asm	/^  os = s;$/;"	d
os	usertests.asm	/^  os = s;$/;"	d
os	wc.asm	/^  os = s;$/;"	d
os	zombie.asm	/^  os = s;$/;"	d
outb	x86.h	/^outb(ushort port, uchar data)$/;"	f
outsl	x86.h	/^outsl(int port, const void *addr, int cnt)$/;"	f
outw	x86.h	/^outw(ushort port, ushort data)$/;"	f
p	cat.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	echo.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	grep.asm	/^      p = q+1;$/;"	d
p	grep.asm	/^    p = buf;$/;"	d
p	grep.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	init.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	kernel.asm	/^    p = ((bda[0x14]<<8)|bda[0x13])*1024;$/;"	d
p	kernel.asm	/^  p = (char*)PGROUNDUP((uint)vstart);$/;"	d
p	kernel.asm	/^  p = 0;$/;"	d
p	kernel.asm	/^  p = allocproc();$/;"	d
p	kill.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	ln.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	ls.asm	/^    p = buf+strlen(buf);$/;"	d
p	ls.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	mkdir.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	mmu.h	/^  uint p : 1;           \/\/ Present$/;"	m	struct:gatedesc
p	mmu.h	/^  uint p : 1;          \/\/ Present$/;"	m	struct:segdesc
p	rm.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	sh.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	stressfs.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	usertests.asm	/^  p = sbrk(amt);$/;"	d
p	usertests.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	wc.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	zombie.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p2v	memlayout.h	/^static inline void *p2v(uint a) { return (void *) ((a) + KERNBASE); }$/;"	f
pa	bootblock.asm	/^    pa = (uchar*)ph->paddr;$/;"	d
pa	kernel.asm	/^      pa = PTE_ADDR(*pte);$/;"	d
pa	kernel.asm	/^    pa = PTE_ADDR(*pte);$/;"	d
pa0	kernel.asm	/^    pa0 = uva2ka(pgdir, (char*)va0);$/;"	d
pad	ioapic.c	/^  uint pad[3];$/;"	m	struct:ioapic	file:
pad	runoff	/^pad()$/;"	f
padding1	mmu.h	/^  ushort padding1;$/;"	m	struct:taskstate
padding1	x86.h	/^  ushort padding1;$/;"	m	struct:trapframe
padding10	mmu.h	/^  ushort padding10;$/;"	m	struct:taskstate
padding2	mmu.h	/^  ushort padding2;$/;"	m	struct:taskstate
padding2	x86.h	/^  ushort padding2;$/;"	m	struct:trapframe
padding3	mmu.h	/^  ushort padding3;$/;"	m	struct:taskstate
padding3	x86.h	/^  ushort padding3;$/;"	m	struct:trapframe
padding4	mmu.h	/^  ushort padding4;$/;"	m	struct:taskstate
padding4	x86.h	/^  ushort padding4;$/;"	m	struct:trapframe
padding5	mmu.h	/^  ushort padding5;$/;"	m	struct:taskstate
padding5	x86.h	/^  ushort padding5;$/;"	m	struct:trapframe
padding6	mmu.h	/^  ushort padding6;$/;"	m	struct:taskstate
padding6	x86.h	/^  ushort padding6;$/;"	m	struct:trapframe
padding7	mmu.h	/^  ushort padding7;$/;"	m	struct:taskstate
padding8	mmu.h	/^  ushort padding8;$/;"	m	struct:taskstate
padding9	mmu.h	/^  ushort padding9;$/;"	m	struct:taskstate
paddr	elf.h	/^  uint paddr;$/;"	m	struct:proghdr
panic	console.c	/^panic(char *s)$/;"	f
panic	sh.c	/^panic(char *s)$/;"	f
panicked	console.c	/^static int panicked = 0;$/;"	v	file:
panicked	kernel.asm	/^  panicked = 1; \/\/ freeze other CPU$/;"	d
parent	proc.h	/^  struct proc *parent;         \/\/ Parent process$/;"	m	struct:proc	typeref:struct:proc::proc
parseblock	sh.c	/^parseblock(char **ps, char *es)$/;"	f
parsecmd	sh.c	/^parsecmd(char *s)$/;"	f
parseexec	sh.c	/^parseexec(char **ps, char *es)$/;"	f
parseline	sh.c	/^parseline(char **ps, char *es)$/;"	f
parsepipe	sh.c	/^parsepipe(char **ps, char *es)$/;"	f
parseredirs	sh.c	/^parseredirs(struct cmd *cmd, char **ps, char *es)$/;"	f
pattern	grep.asm	/^  pattern = argv[1];$/;"	d
pcmd	sh.asm	/^    pcmd = (struct pipecmd*)cmd;$/;"	d
pcs	spinlock.h	/^  uint pcs[10];      \/\/ The call stack (an array of program counters)$/;"	m	struct:spinlock
pde	kernel.asm	/^  pde = &pgdir[PDX(va)];$/;"	d
pde_t	kernel.asm	/^pde_t entrypgdir[];  \/\/ For entry.S$/;"	l
pde_t	types.h	/^typedef uint pde_t;$/;"	t
peek	sh.c	/^peek(char **ps, char *es, char *toks)$/;"	f
perm	vm.c	/^  int perm;$/;"	m	struct:kmap	file:
pgdir	kernel.asm	/^  pgdir = 0;$/;"	d
pgdir	proc.h	/^  pde_t* pgdir;                \/\/ Page table$/;"	m	struct:proc
pgtab	kernel.asm	/^    pgtab = (pte_t*)p2v(PTE_ADDR(*pde));$/;"	d
ph	bootblock.asm	/^  ph = (struct proghdr*)((uchar*)elf + elf->phoff);$/;"	d
phentsize	elf.h	/^  ushort phentsize;$/;"	m	struct:elfhdr
phnum	elf.h	/^  ushort phnum;$/;"	m	struct:elfhdr
phoff	elf.h	/^  uint phoff;$/;"	m	struct:elfhdr
phys_end	vm.c	/^  uint phys_end;$/;"	m	struct:kmap	file:
phys_start	vm.c	/^  uint phys_start;$/;"	m	struct:kmap	file:
physaddr	mp.h	/^  void *physaddr;               \/\/ phys addr of MP config table$/;"	m	struct:mp
picenable	picirq.c	/^picenable(int irq)$/;"	f
picinit	picirq.c	/^picinit(void)$/;"	f
picsetmask	picirq.c	/^picsetmask(ushort mask)$/;"	f	file:
pid	forktest.asm	/^    pid = fork();$/;"	d
pid	init.asm	/^    pid = fork();$/;"	d
pid	kernel.asm	/^        pid = p->pid;$/;"	d
pid	kernel.asm	/^  pid = np->pid;$/;"	d
pid	proc.h	/^  volatile int pid;            \/\/ Process ID$/;"	m	struct:proc
pid	sh.asm	/^  pid = fork();$/;"	d
pid	usertests.asm	/^    pid = fork();$/;"	d
pid	usertests.asm	/^  pid = fork();$/;"	d
pid1	usertests.asm	/^  pid1 = fork();$/;"	d
pid2	usertests.asm	/^  pid2 = fork();$/;"	d
pid3	usertests.asm	/^  pid3 = fork();$/;"	d
pinit	proc.c	/^pinit(void)$/;"	f
pipe	file.h	/^  struct pipe *pipe;$/;"	m	struct:file	typeref:struct:file::pipe
pipe	pipe.c	/^struct pipe {$/;"	s	file:
pipe1	usertests.c	/^pipe1(void)$/;"	f
pipealloc	pipe.c	/^pipealloc(struct file **f0, struct file **f1)$/;"	f
pipeclose	pipe.c	/^pipeclose(struct pipe *p, int writable)$/;"	f
pipecmd	sh.c	/^pipecmd(struct cmd *left, struct cmd *right)$/;"	f
pipecmd	sh.c	/^struct pipecmd {$/;"	s	file:
piperead	pipe.c	/^piperead(struct pipe *p, char *addr, int n)$/;"	f
pipewrite	pipe.c	/^pipewrite(struct pipe *p, char *addr, int n)$/;"	f
popcli	spinlock.c	/^popcli(void)$/;"	f
pos	kernel.asm	/^  pos = inb(CRTPORT+1) << 8;$/;"	d
ppid	usertests.asm	/^    ppid = getpid();$/;"	d
ppid	usertests.asm	/^  ppid = getpid();$/;"	d
preempt	usertests.c	/^preempt(void)$/;"	f
prev	buf.h	/^  struct buf *prev; \/\/ LRU cache list$/;"	m	struct:buf	typeref:struct:buf::buf
print_type	stat.c	/^void print_type(char* type_str) {$/;"	f
printf	forktest.c	/^printf(int fd, char *s, ...)$/;"	f
printf	printf.c	/^printf(int fd, char *fmt, ...)$/;"	f
printint	console.c	/^printint(int xx, int base, int sign)$/;"	f	file:
printint	printf.c	/^printint(int fd, int xx, int base, int sgn)$/;"	f	file:
proc	kernel.asm	/^      proc = (struct mpproc*)p;$/;"	d
proc	kernel.asm	/^      proc = 0;$/;"	d
proc	kernel.asm	/^      proc = p;$/;"	d
proc	kernel.asm	/^  proc = 0;$/;"	d
proc	proc.c	/^  struct proc proc[NPROC];$/;"	m	struct:__anon8	typeref:struct:__anon8::proc	file:
proc	proc.h	/^  struct proc *proc;           \/\/ The currently-running process.$/;"	m	struct:cpu	typeref:struct:cpu::proc
proc	proc.h	/^struct proc {$/;"	s
procdump	proc.c	/^procdump(void)$/;"	f
procstate	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	g
product	mp.h	/^  uchar product[20];            \/\/ product id$/;"	m	struct:mpconf
proghdr	elf.h	/^struct proghdr {$/;"	s
ptable	proc.c	/^} ptable;$/;"	v	typeref:struct:__anon8
pte	kernel.asm	/^    pte = walkpgdir(pgdir, (char*)a, 0);$/;"	d
pte	kernel.asm	/^  pte = walkpgdir(pgdir, uva, 0);$/;"	d
pte_t	mmu.h	/^typedef uint pte_t;$/;"	t
ptr	umalloc.c	/^    union header *ptr;$/;"	m	struct:header::__anon4	typeref:union:header::__anon4::header	file:
pushcli	spinlock.c	/^pushcli(void)$/;"	f
putc	printf.c	/^putc(int fd, char c)$/;"	f	file:
qnext	buf.h	/^  struct buf *qnext; \/\/ disk queue$/;"	m	struct:buf	typeref:struct:buf::buf
r	cat.asm	/^  r = fstat(fd, st);$/;"	d
r	console.c	/^  uint r;  \/\/ Read index$/;"	m	struct:__anon7	file:
r	echo.asm	/^  r = fstat(fd, st);$/;"	d
r	forktest.asm	/^  r = fstat(fd, st);$/;"	d
r	grep.asm	/^  r = fstat(fd, st);$/;"	d
r	init.asm	/^  r = fstat(fd, st);$/;"	d
r	kernel.asm	/^  r = (struct run*)v;$/;"	d
r	kernel.asm	/^  r = kmem.freelist;$/;"	d
r	kill.asm	/^  r = fstat(fd, st);$/;"	d
r	ln.asm	/^  r = fstat(fd, st);$/;"	d
r	ls.asm	/^  r = fstat(fd, st);$/;"	d
r	mkdir.asm	/^  r = fstat(fd, st);$/;"	d
r	rm.asm	/^  r = fstat(fd, st);$/;"	d
r	sh.asm	/^  r = fstat(fd, st);$/;"	d
r	stressfs.asm	/^  r = fstat(fd, st);$/;"	d
r	usertests.asm	/^  r = fstat(fd, st);$/;"	d
r	wc.asm	/^  r = fstat(fd, st);$/;"	d
r	zombie.asm	/^  r = fstat(fd, st);$/;"	d
rand	usertests.c	/^rand()$/;"	f
randstate	usertests.asm	/^  randstate = randstate * 1664525 + 1013904223;$/;"	d
randstate	usertests.c	/^unsigned long randstate = 1;$/;"	v
rcmd	sh.asm	/^    rcmd = (struct redircmd*)cmd;$/;"	d
rcr2	x86.h	/^rcr2(void)$/;"	f
read	file.h	/^  int (*read)(struct inode*, char*, int);$/;"	m	struct:devsw
read_head	log.c	/^read_head(void)$/;"	f	file:
readable	file.h	/^  char readable;$/;"	m	struct:file
readeflags	x86.h	/^readeflags(void)$/;"	f
readi	fs.c	/^readi(struct inode *ip, char *dst, uint off, uint n)$/;"	f
readopen	pipe.c	/^  int readopen;   \/\/ read fd is still open$/;"	m	struct:pipe	file:
readsb	fs.c	/^readsb(int dev, struct superblock *sb)$/;"	f
readsect	bootmain.c	/^readsect(void *dst, uint offset)$/;"	f
readseg	bootmain.c	/^readseg(uchar* pa, uint count, uint offset)$/;"	f
recover_from_log	log.c	/^recover_from_log(void)$/;"	f	file:
redircmd	sh.c	/^redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)$/;"	f
redircmd	sh.c	/^struct redircmd {$/;"	s	file:
ref	file.h	/^  int ref;            \/\/ Reference count$/;"	m	struct:inode
ref	file.h	/^  int ref; \/\/ reference count$/;"	m	struct:file
reg	ioapic.c	/^  uint reg;$/;"	m	struct:ioapic	file:
release	spinlock.c	/^release(struct spinlock *lk)$/;"	f
reserved	mp.h	/^  uchar reserved;$/;"	m	struct:mpconf
reserved	mp.h	/^  uchar reserved[3];$/;"	m	struct:mp
reserved	mp.h	/^  uchar reserved[8];$/;"	m	struct:mpproc
ret	sh.asm	/^      ret = '+';$/;"	d
ret	sh.asm	/^    ret = 'a';$/;"	d
ret	sh.asm	/^    ret = parseredirs(ret, ps, es);$/;"	d
ret	sh.asm	/^  ret = *s;$/;"	d
ret	sh.asm	/^  ret = execcmd();$/;"	d
ret	sh.asm	/^  ret = parseredirs(ret, ps, es);$/;"	d
return	kernel.asm	/^  return d;$/;"	d
right	sh.c	/^  struct cmd *right;$/;"	m	struct:listcmd	typeref:struct:listcmd::cmd	file:
right	sh.c	/^  struct cmd *right;$/;"	m	struct:pipecmd	typeref:struct:pipecmd::cmd	file:
rinode	mkfs.c	/^rinode(uint inum, struct dinode *ip)$/;"	f
rmdot	usertests.c	/^rmdot(void)$/;"	f
rsect	mkfs.c	/^rsect(uint sec, void *buf)$/;"	f
rsv1	mmu.h	/^  uint rsv1 : 1;       \/\/ Reserved$/;"	m	struct:segdesc
rsv1	mmu.h	/^  uint rsv1 : 3;        \/\/ reserved(should be zero I guess)$/;"	m	struct:gatedesc
run	kalloc.c	/^struct run {$/;"	s	file:
runcmd	sh.c	/^runcmd(struct cmd *cmd)$/;"	f
s	cat.asm	/^          s = "(null)";$/;"	d
s	cat.asm	/^        s = (char*)*ap;$/;"	d
s	echo.asm	/^          s = "(null)";$/;"	d
s	echo.asm	/^        s = (char*)*ap;$/;"	d
s	grep.asm	/^          s = "(null)";$/;"	d
s	grep.asm	/^        s = (char*)*ap;$/;"	d
s	init.asm	/^          s = "(null)";$/;"	d
s	init.asm	/^        s = (char*)*ap;$/;"	d
s	kernel.asm	/^        s = "(null)";$/;"	d
s	kernel.asm	/^  s = path;$/;"	d
s	kernel.asm	/^  s = src;$/;"	d
s	kill.asm	/^          s = "(null)";$/;"	d
s	kill.asm	/^        s = (char*)*ap;$/;"	d
s	ln.asm	/^          s = "(null)";$/;"	d
s	ln.asm	/^        s = (char*)*ap;$/;"	d
s	ls.asm	/^          s = "(null)";$/;"	d
s	ls.asm	/^        s = (char*)*ap;$/;"	d
s	mkdir.asm	/^          s = "(null)";$/;"	d
s	mkdir.asm	/^        s = (char*)*ap;$/;"	d
s	mmu.h	/^  uint s : 1;           \/\/ must be 0 (system)$/;"	m	struct:gatedesc
s	mmu.h	/^  uint s : 1;          \/\/ 0 = system, 1 = application$/;"	m	struct:segdesc
s	rm.asm	/^          s = "(null)";$/;"	d
s	rm.asm	/^        s = (char*)*ap;$/;"	d
s	sh.asm	/^          s = "(null)";$/;"	d
s	sh.asm	/^        s = (char*)*ap;$/;"	d
s	sh.asm	/^  s = *ps;$/;"	d
s	stressfs.asm	/^          s = "(null)";$/;"	d
s	stressfs.asm	/^        s = (char*)*ap;$/;"	d
s	umalloc.c	/^  } s;$/;"	m	union:header	typeref:struct:header::__anon4	file:
s	usertests.asm	/^          s = "(null)";$/;"	d
s	usertests.asm	/^        s = (char*)*ap;$/;"	d
s	wc.asm	/^          s = "(null)";$/;"	d
s	wc.asm	/^        s = (char*)*ap;$/;"	d
s	zombie.asm	/^          s = "(null)";$/;"	d
s	zombie.asm	/^        s = (char*)*ap;$/;"	d
s1	kernel.asm	/^  s1 = v1;$/;"	d
s2	kernel.asm	/^  s2 = v2;$/;"	d
safestrcpy	string.c	/^safestrcpy(char *s, const char *t, int n)$/;"	f
sb	mkfs.c	/^struct superblock sb;$/;"	v	typeref:struct:superblock
sbrktest	usertests.c	/^sbrktest(void)$/;"	f
sched	proc.c	/^sched(void)$/;"	f
scheduler	proc.c	/^scheduler(void)$/;"	f
scheduler	proc.h	/^  struct context *scheduler;   \/\/ swtch() here to enter scheduler$/;"	m	struct:cpu	typeref:struct:cpu::context
sector	buf.h	/^  uint sector;$/;"	m	struct:buf
sector	log.c	/^  int sector[LOGSIZE];$/;"	m	struct:logheader	file:
segdesc	mmu.h	/^struct segdesc {$/;"	s
seginit	vm.c	/^seginit(void)$/;"	f
seq	usertests.asm	/^  seq = 0;$/;"	d
setupkvm	vm.c	/^setupkvm(void)$/;"	f
sharedfd	usertests.c	/^sharedfd(void)$/;"	f
shentsize	elf.h	/^  ushort shentsize;$/;"	m	struct:elfhdr
shiftcode	kbd.h	/^static uchar shiftcode[256] =$/;"	v
shiftmap	kbd.h	/^static uchar shiftmap[256] =$/;"	v
shnum	elf.h	/^  ushort shnum;$/;"	m	struct:elfhdr
shoff	elf.h	/^  uint shoff;$/;"	m	struct:elfhdr
shstrndx	elf.h	/^  ushort shstrndx;$/;"	m	struct:elfhdr
signature	mp.h	/^  uchar signature[4];           \/\/ "PCMP"$/;"	m	struct:mpconf
signature	mp.h	/^  uchar signature[4];           \/\/ "_MP_"$/;"	m	struct:mp
signature	mp.h	/^  uchar signature[4];           \/\/ CPU signature$/;"	m	struct:mpproc
size	file.h	/^  uint size;$/;"	m	struct:inode
size	fs.h	/^  uint size;            \/\/ Size of file (bytes)$/;"	m	struct:dinode
size	fs.h	/^  uint size;         \/\/ Size of file system image (blocks)$/;"	m	struct:superblock
size	log.c	/^  int size;$/;"	m	struct:log	file:
size	mkfs.c	/^int size = 1024;$/;"	v
size	stat.h	/^  uint size;   \/\/ Size of file in bytes$/;"	m	struct:stat
size	umalloc.c	/^    uint size;$/;"	m	struct:header::__anon4	file:
skipelem	fs.c	/^skipelem(char *path, char *name)$/;"	f	file:
sleep	proc.c	/^sleep(void *chan, struct spinlock *lk)$/;"	f
sp	kernel.asm	/^    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;$/;"	d
sp	kernel.asm	/^  sp = p->kstack + KSTACKSIZE;$/;"	d
sp	kernel.asm	/^  sp = sz;$/;"	d
specrev	mp.h	/^  uchar specrev;                \/\/ [14]$/;"	m	struct:mp
spin	bootasm.S	/^spin:$/;"	l
spin	bootblock.asm	/^spin:$/;"	l
spin	entryother.S	/^spin:$/;"	l
spin	entryother.asm	/^spin:$/;"	l
spinlock	spinlock.h	/^struct spinlock {$/;"	s
src	cat.asm	/^  src = vsrc;$/;"	d
src	echo.asm	/^  src = vsrc;$/;"	d
src	forktest.asm	/^  src = vsrc;$/;"	d
src	grep.asm	/^  src = vsrc;$/;"	d
src	init.asm	/^  src = vsrc;$/;"	d
src	kill.asm	/^  src = vsrc;$/;"	d
src	ln.asm	/^  src = vsrc;$/;"	d
src	ls.asm	/^  src = vsrc;$/;"	d
src	mkdir.asm	/^  src = vsrc;$/;"	d
src	rm.asm	/^  src = vsrc;$/;"	d
src	sh.asm	/^  src = vsrc;$/;"	d
src	stressfs.asm	/^  src = vsrc;$/;"	d
src	usertests.asm	/^  src = vsrc;$/;"	d
src	wc.asm	/^  src = vsrc;$/;"	d
src	zombie.asm	/^  src = vsrc;$/;"	d
ss	mmu.h	/^  ushort ss;$/;"	m	struct:taskstate
ss	x86.h	/^  ushort ss;$/;"	m	struct:trapframe
ss0	mmu.h	/^  ushort ss0;        \/\/   after an increase in privilege level$/;"	m	struct:taskstate
ss1	mmu.h	/^  ushort ss1;$/;"	m	struct:taskstate
ss2	mmu.h	/^  ushort ss2;$/;"	m	struct:taskstate
st	kernel.asm	/^  st = inb(KBSTATP);$/;"	d
stack	kernel.asm	/^    stack = kalloc();$/;"	d
start	bootasm.S	/^start:$/;"	l
start	bootblock.asm	/^start:$/;"	l
start	entryother.S	/^start:$/;"	l
start	entryother.asm	/^start:$/;"	l
start	initcode.S	/^start:$/;"	l
start	initcode.asm	/^start:$/;"	l
start	log.c	/^  int start;$/;"	m	struct:log	file:
start32	bootasm.S	/^start32:$/;"	l
start32	bootblock.asm	/^start32:$/;"	l
start32	entryother.S	/^start32:$/;"	l
start32	entryother.asm	/^start32:$/;"	l
started	proc.h	/^  volatile uint started;       \/\/ Has the CPU started?$/;"	m	struct:cpu
startothers	main.c	/^startothers(void)$/;"	f	file:
stat	mkfs.c	8;"	d	file:
stat	stat.h	/^struct stat {$/;"	s
stat	ulib.c	/^stat(char *n, struct stat *st)$/;"	f
state	cat.asm	/^        state = '%';$/;"	d
state	cat.asm	/^      state = 0;$/;"	d
state	cat.asm	/^  state = 0;$/;"	d
state	echo.asm	/^        state = '%';$/;"	d
state	echo.asm	/^      state = 0;$/;"	d
state	echo.asm	/^  state = 0;$/;"	d
state	grep.asm	/^        state = '%';$/;"	d
state	grep.asm	/^      state = 0;$/;"	d
state	grep.asm	/^  state = 0;$/;"	d
state	init.asm	/^        state = '%';$/;"	d
state	init.asm	/^      state = 0;$/;"	d
state	init.asm	/^  state = 0;$/;"	d
state	kernel.asm	/^      state = "???";$/;"	d
state	kernel.asm	/^      state = states[p->state];$/;"	d
state	kill.asm	/^        state = '%';$/;"	d
state	kill.asm	/^      state = 0;$/;"	d
state	kill.asm	/^  state = 0;$/;"	d
state	ln.asm	/^        state = '%';$/;"	d
state	ln.asm	/^      state = 0;$/;"	d
state	ln.asm	/^  state = 0;$/;"	d
state	ls.asm	/^        state = '%';$/;"	d
state	ls.asm	/^      state = 0;$/;"	d
state	ls.asm	/^  state = 0;$/;"	d
state	mkdir.asm	/^        state = '%';$/;"	d
state	mkdir.asm	/^      state = 0;$/;"	d
state	mkdir.asm	/^  state = 0;$/;"	d
state	proc.h	/^  enum procstate state;        \/\/ Process state$/;"	m	struct:proc	typeref:enum:proc::procstate
state	rm.asm	/^        state = '%';$/;"	d
state	rm.asm	/^      state = 0;$/;"	d
state	rm.asm	/^  state = 0;$/;"	d
state	sh.asm	/^        state = '%';$/;"	d
state	sh.asm	/^      state = 0;$/;"	d
state	sh.asm	/^  state = 0;$/;"	d
state	stressfs.asm	/^        state = '%';$/;"	d
state	stressfs.asm	/^      state = 0;$/;"	d
state	stressfs.asm	/^  state = 0;$/;"	d
state	usertests.asm	/^        state = '%';$/;"	d
state	usertests.asm	/^      state = 0;$/;"	d
state	usertests.asm	/^  state = 0;$/;"	d
state	wc.asm	/^        state = '%';$/;"	d
state	wc.asm	/^      state = 0;$/;"	d
state	wc.asm	/^  state = 0;$/;"	d
state	zombie.asm	/^        state = '%';$/;"	d
state	zombie.asm	/^      state = 0;$/;"	d
state	zombie.asm	/^  state = 0;$/;"	d
stati	fs.c	/^stati(struct inode *ip, struct stat *st)$/;"	f
static	bootblock.asm	/^static inline uchar$/;"	l
static	bootblock.asm	/^static inline void$/;"	l
static	cat.asm	/^static Header *freep;$/;"	l
static	cat.asm	/^static Header base;$/;"	l
static	cat.asm	/^static Header*$/;"	l
static	cat.asm	/^static inline void$/;"	l
static	cat.asm	/^static void$/;"	l
static	echo.asm	/^static Header *freep;$/;"	l
static	echo.asm	/^static Header base;$/;"	l
static	echo.asm	/^static Header*$/;"	l
static	echo.asm	/^static inline void$/;"	l
static	echo.asm	/^static void$/;"	l
static	forktest.asm	/^static inline void$/;"	l
static	grep.asm	/^static Header *freep;$/;"	l
static	grep.asm	/^static Header base;$/;"	l
static	grep.asm	/^static Header*$/;"	l
static	grep.asm	/^static inline void$/;"	l
static	grep.asm	/^static void$/;"	l
static	init.asm	/^static Header *freep;$/;"	l
static	init.asm	/^static Header base;$/;"	l
static	init.asm	/^static Header*$/;"	l
static	init.asm	/^static inline void$/;"	l
static	init.asm	/^static void$/;"	l
static	kernel.asm	/^static char*$/;"	l
static	kernel.asm	/^static inline uchar$/;"	l
static	kernel.asm	/^static inline uint v2p(void *a) { return ((uint) (a))  - KERNBASE; }$/;"	l
static	kernel.asm	/^static inline uint$/;"	l
static	kernel.asm	/^static inline void *p2v(uint a) { return (void *) ((a) + KERNBASE); }$/;"	l
static	kernel.asm	/^static inline void$/;"	l
static	kernel.asm	/^static int uart;    \/\/ is there a uart?$/;"	l
static	kernel.asm	/^static int$/;"	l
static	kernel.asm	/^static pte_t *$/;"	l
static	kernel.asm	/^static struct buf*$/;"	t
static	kernel.asm	/^static struct inode*$/;"	t
static	kernel.asm	/^static struct mp*$/;"	t
static	kernel.asm	/^static struct mpconf*$/;"	t
static	kernel.asm	/^static struct proc*$/;"	t
static	kernel.asm	/^static uchar$/;"	l
static	kernel.asm	/^static uint$/;"	l
static	kernel.asm	/^static ushort *crt = (ushort*)P2V(0xb8000);  \/\/ CGA memory$/;"	l
static	kernel.asm	/^static ushort irqmask = 0xFFFF & ~(1<<IRQ_SLAVE);$/;"	l
static	kernel.asm	/^static void $/;"	l
static	kernel.asm	/^static void idestart(struct buf*);$/;"	l
static	kernel.asm	/^static void itrunc(struct inode*);$/;"	l
static	kernel.asm	/^static void recover_from_log(void);$/;"	l
static	kernel.asm	/^static void wakeup1(void *chan);$/;"	l
static	kernel.asm	/^static void$/;"	l
static	kill.asm	/^static Header *freep;$/;"	l
static	kill.asm	/^static Header base;$/;"	l
static	kill.asm	/^static Header*$/;"	l
static	kill.asm	/^static inline void$/;"	l
static	kill.asm	/^static void$/;"	l
static	ln.asm	/^static Header *freep;$/;"	l
static	ln.asm	/^static Header base;$/;"	l
static	ln.asm	/^static Header*$/;"	l
static	ln.asm	/^static inline void$/;"	l
static	ln.asm	/^static void$/;"	l
static	ls.asm	/^static Header *freep;$/;"	l
static	ls.asm	/^static Header base;$/;"	l
static	ls.asm	/^static Header*$/;"	l
static	ls.asm	/^static inline void$/;"	l
static	ls.asm	/^static void$/;"	l
static	mkdir.asm	/^static Header *freep;$/;"	l
static	mkdir.asm	/^static Header base;$/;"	l
static	mkdir.asm	/^static Header*$/;"	l
static	mkdir.asm	/^static inline void$/;"	l
static	mkdir.asm	/^static void$/;"	l
static	rm.asm	/^static Header *freep;$/;"	l
static	rm.asm	/^static Header base;$/;"	l
static	rm.asm	/^static Header*$/;"	l
static	rm.asm	/^static inline void$/;"	l
static	rm.asm	/^static void$/;"	l
static	sh.asm	/^static Header *freep;$/;"	l
static	sh.asm	/^static Header base;$/;"	l
static	sh.asm	/^static Header*$/;"	l
static	sh.asm	/^static inline void$/;"	l
static	sh.asm	/^static void$/;"	l
static	stressfs.asm	/^static Header *freep;$/;"	l
static	stressfs.asm	/^static Header base;$/;"	l
static	stressfs.asm	/^static Header*$/;"	l
static	stressfs.asm	/^static inline void$/;"	l
static	stressfs.asm	/^static void$/;"	l
static	usertests.asm	/^static Header *freep;$/;"	l
static	usertests.asm	/^static Header base;$/;"	l
static	usertests.asm	/^static Header*$/;"	l
static	usertests.asm	/^static inline void$/;"	l
static	usertests.asm	/^static void$/;"	l
static	wc.asm	/^static Header *freep;$/;"	l
static	wc.asm	/^static Header base;$/;"	l
static	wc.asm	/^static Header*$/;"	l
static	wc.asm	/^static inline void$/;"	l
static	wc.asm	/^static void$/;"	l
static	zombie.asm	/^static Header *freep;$/;"	l
static	zombie.asm	/^static Header base;$/;"	l
static	zombie.asm	/^static Header*$/;"	l
static	zombie.asm	/^static inline void$/;"	l
static	zombie.asm	/^static void$/;"	l
static_assert	mkfs.c	14;"	d	file:
status	stat.c	/^struct stat status;$/;"	v	typeref:struct:stat
stdout	usertests.c	/^int stdout = 1;$/;"	v
sti	x86.h	/^sti(void)$/;"	f
stosb	x86.h	/^stosb(void *addr, int data, int cnt)$/;"	f
stosl	x86.h	/^stosl(void *addr, int data, int cnt)$/;"	f
strchr	ulib.c	/^strchr(const char *s, char c)$/;"	f
strcmp	ulib.c	/^strcmp(const char *p, const char *q)$/;"	f
strcpy	ulib.c	/^strcpy(char *s, char *t)$/;"	f
strlen	string.c	/^strlen(const char *s)$/;"	f
strlen	ulib.c	/^strlen(char *s)$/;"	f
strncmp	string.c	/^strncmp(const char *p, const char *q, uint n)$/;"	f
strncpy	string.c	/^strncpy(char *s, const char *t, int n)$/;"	f
struct	kernel.asm	/^  struct proc *np;$/;"	l
struct	kernel.asm	/^  struct proc *p;$/;"	l
subdir	usertests.c	/^subdir(void)$/;"	f
sum	kernel.asm	/^  sum = 0;$/;"	d
sum	mp.c	/^sum(uchar *addr, int len)$/;"	f	file:
superblock	fs.h	/^struct superblock {$/;"	s
switchkvm	vm.c	/^switchkvm(void)$/;"	f
switchuvm	vm.c	/^switchuvm(struct proc *p)$/;"	f
swtch	kernel.asm	/^swtch:$/;"	l
swtch	swtch.S	/^swtch:$/;"	l
symbols	sh.c	/^char symbols[] = "<|>&;()";$/;"	v
sys_chdir	sysfile.c	/^sys_chdir(void)$/;"	f
sys_close	sysfile.c	/^sys_close(void)$/;"	f
sys_dup	sysfile.c	/^sys_dup(void)$/;"	f
sys_exec	sysfile.c	/^sys_exec(void)$/;"	f
sys_exit	sysproc.c	/^sys_exit(void)$/;"	f
sys_fork	sysproc.c	/^sys_fork(void)$/;"	f
sys_fstat	sysfile.c	/^sys_fstat(void)$/;"	f
sys_getpid	sysproc.c	/^sys_getpid(void)$/;"	f
sys_kill	sysproc.c	/^sys_kill(void)$/;"	f
sys_link	sysfile.c	/^sys_link(void)$/;"	f
sys_mkdir	sysfile.c	/^sys_mkdir(void)$/;"	f
sys_mknod	sysfile.c	/^sys_mknod(void)$/;"	f
sys_open	sysfile.c	/^sys_open(void)$/;"	f
sys_pipe	sysfile.c	/^sys_pipe(void)$/;"	f
sys_read	sysfile.c	/^sys_read(void)$/;"	f
sys_sbrk	sysproc.c	/^sys_sbrk(void)$/;"	f
sys_sleep	sysproc.c	/^sys_sleep(void)$/;"	f
sys_unlink	sysfile.c	/^sys_unlink(void)$/;"	f
sys_uptime	sysproc.c	/^sys_uptime(void)$/;"	f
sys_wait	sysproc.c	/^sys_wait(void)$/;"	f
sys_write	sysfile.c	/^sys_write(void)$/;"	f
syscall	syscall.c	/^syscall(void)$/;"	f
syscalls	syscall.c	/^static int (*syscalls[])(void) = {$/;"	v	file:
sz	kernel.asm	/^  sz = 0;$/;"	d
sz	kernel.asm	/^  sz = PGROUNDUP(sz);$/;"	d
sz	kernel.asm	/^  sz = proc->sz;$/;"	d
sz	proc.h	/^  uint sz;                     \/\/ Size of process memory (bytes)$/;"	m	struct:proc
t	mmu.h	/^  ushort t;          \/\/ Trap on task switch$/;"	m	struct:taskstate
target	kernel.asm	/^  target = n;$/;"	d
taskstate	mmu.h	/^struct taskstate {$/;"	s
tf	proc.h	/^  struct trapframe *tf;        \/\/ Trap frame for current syscall$/;"	m	struct:proc	typeref:struct:proc::trapframe
ticks	trap.c	/^uint ticks;$/;"	v
ticks0	kernel.asm	/^  ticks0 = ticks;$/;"	d
tickslock	trap.c	/^struct spinlock tickslock;$/;"	v	typeref:struct:spinlock
timerinit	timer.c	/^timerinit(void)$/;"	f
togglecode	kbd.h	/^static uchar togglecode[256] =$/;"	v
tok	sh.asm	/^    tok = gettoken(ps, es, 0, 0);$/;"	d
total	usertests.asm	/^    total = 0;$/;"	d
total	usertests.asm	/^  total = 0;$/;"	d
trap	trap.c	/^trap(struct trapframe *tf)$/;"	f
trapframe	x86.h	/^struct trapframe {$/;"	s
trapno	x86.h	/^  uint trapno;$/;"	m	struct:trapframe
trapret	kernel.asm	/^trapret:$/;"	l
trapret	trapasm.S	/^trapret:$/;"	l
ts	proc.h	/^  struct taskstate ts;         \/\/ Used by x86 to find stack for interrupt$/;"	m	struct:cpu	typeref:struct:cpu::taskstate
tvinit	trap.c	/^tvinit(void)$/;"	f
twofiles	usertests.c	/^twofiles(void)$/;"	f
type	elf.h	/^  uint type;$/;"	m	struct:proghdr
type	elf.h	/^  ushort type;$/;"	m	struct:elfhdr
type	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	m	struct:file	typeref:enum:file::__anon3
type	file.h	/^  short type;         \/\/ copy of disk inode$/;"	m	struct:inode
type	fs.h	/^  short type;           \/\/ File type$/;"	m	struct:dinode
type	mmu.h	/^  uint type : 4;        \/\/ type(STS_{TG,IG32,TG32})$/;"	m	struct:gatedesc
type	mmu.h	/^  uint type : 4;       \/\/ Segment type (see STS_ constants)$/;"	m	struct:segdesc
type	mp.h	/^  uchar type;                   \/\/ MP system config type$/;"	m	struct:mp
type	mp.h	/^  uchar type;                   \/\/ entry type (0)$/;"	m	struct:mpproc
type	mp.h	/^  uchar type;                   \/\/ entry type (2)$/;"	m	struct:mpioapic
type	sh.c	/^  int type;$/;"	m	struct:backcmd	file:
type	sh.c	/^  int type;$/;"	m	struct:cmd	file:
type	sh.c	/^  int type;$/;"	m	struct:execcmd	file:
type	sh.c	/^  int type;$/;"	m	struct:listcmd	file:
type	sh.c	/^  int type;$/;"	m	struct:pipecmd	file:
type	sh.c	/^  int type;$/;"	m	struct:redircmd	file:
type	stat.h	/^  short type;  \/\/ Type of file$/;"	m	struct:stat
uart	kernel.asm	/^  uart = 1;$/;"	d
uart	uart.c	/^static int uart;    \/\/ is there a uart?$/;"	v	file:
uartgetc	uart.c	/^uartgetc(void)$/;"	f	file:
uartinit	uart.c	/^uartinit(void)$/;"	f
uartintr	uart.c	/^uartintr(void)$/;"	f
uartputc	uart.c	/^uartputc(int c)$/;"	f
uchar	kernel.asm	/^uchar ioapicid;$/;"	l
uchar	types.h	/^typedef unsigned char  uchar;$/;"	t
uint	cat.asm	/^uint$/;"	l
uint	echo.asm	/^uint$/;"	l
uint	forktest.asm	/^uint$/;"	l
uint	grep.asm	/^uint$/;"	l
uint	init.asm	/^uint$/;"	l
uint	kernel.asm	/^uint ticks;$/;"	l
uint	kill.asm	/^uint$/;"	l
uint	ln.asm	/^uint$/;"	l
uint	ls.asm	/^uint$/;"	l
uint	mkdir.asm	/^uint$/;"	l
uint	rm.asm	/^uint$/;"	l
uint	sh.asm	/^uint$/;"	l
uint	stressfs.asm	/^uint$/;"	l
uint	types.h	/^typedef unsigned int   uint;$/;"	t
uint	usertests.asm	/^uint$/;"	l
uint	wc.asm	/^uint$/;"	l
uint	zombie.asm	/^uint$/;"	l
uninit	usertests.c	/^char uninit[10000];$/;"	v
unlinkread	usertests.c	/^unlinkread(void)$/;"	f
unsigned	usertests.asm	/^unsigned int$/;"	l
unsigned	usertests.asm	/^unsigned long randstate = 1;$/;"	l
use_lock	kalloc.c	/^  int use_lock;$/;"	m	struct:__anon5	file:
usedblocks	mkfs.c	/^uint usedblocks;$/;"	v
userinit	proc.c	/^userinit(void)$/;"	f
ushort	types.h	/^typedef unsigned short ushort;$/;"	t
uva2ka	vm.c	/^uva2ka(pde_t *pgdir, char *uva)$/;"	f
v2p	memlayout.h	/^static inline uint v2p(void *a) { return ((uint) (a))  - KERNBASE; }$/;"	f
va	kernel.asm	/^    va = va0 + PGSIZE;$/;"	d
va0	kernel.asm	/^    va0 = (uint)PGROUNDDOWN(va);$/;"	d
vaddr	elf.h	/^  uint vaddr;$/;"	m	struct:proghdr
validateint	usertests.c	/^validateint(int *p)$/;"	f
validatetest	usertests.c	/^validatetest(void)$/;"	f
vector0	kernel.asm	/^vector0:$/;"	l
vector0	vectors.S	/^vector0:$/;"	l
vector1	kernel.asm	/^vector1:$/;"	l
vector1	vectors.S	/^vector1:$/;"	l
vector10	kernel.asm	/^vector10:$/;"	l
vector10	vectors.S	/^vector10:$/;"	l
vector100	kernel.asm	/^vector100:$/;"	l
vector100	vectors.S	/^vector100:$/;"	l
vector101	kernel.asm	/^vector101:$/;"	l
vector101	vectors.S	/^vector101:$/;"	l
vector102	kernel.asm	/^vector102:$/;"	l
vector102	vectors.S	/^vector102:$/;"	l
vector103	kernel.asm	/^vector103:$/;"	l
vector103	vectors.S	/^vector103:$/;"	l
vector104	kernel.asm	/^vector104:$/;"	l
vector104	vectors.S	/^vector104:$/;"	l
vector105	kernel.asm	/^vector105:$/;"	l
vector105	vectors.S	/^vector105:$/;"	l
vector106	kernel.asm	/^vector106:$/;"	l
vector106	vectors.S	/^vector106:$/;"	l
vector107	kernel.asm	/^vector107:$/;"	l
vector107	vectors.S	/^vector107:$/;"	l
vector108	kernel.asm	/^vector108:$/;"	l
vector108	vectors.S	/^vector108:$/;"	l
vector109	kernel.asm	/^vector109:$/;"	l
vector109	vectors.S	/^vector109:$/;"	l
vector11	kernel.asm	/^vector11:$/;"	l
vector11	vectors.S	/^vector11:$/;"	l
vector110	kernel.asm	/^vector110:$/;"	l
vector110	vectors.S	/^vector110:$/;"	l
vector111	kernel.asm	/^vector111:$/;"	l
vector111	vectors.S	/^vector111:$/;"	l
vector112	kernel.asm	/^vector112:$/;"	l
vector112	vectors.S	/^vector112:$/;"	l
vector113	kernel.asm	/^vector113:$/;"	l
vector113	vectors.S	/^vector113:$/;"	l
vector114	kernel.asm	/^vector114:$/;"	l
vector114	vectors.S	/^vector114:$/;"	l
vector115	kernel.asm	/^vector115:$/;"	l
vector115	vectors.S	/^vector115:$/;"	l
vector116	kernel.asm	/^vector116:$/;"	l
vector116	vectors.S	/^vector116:$/;"	l
vector117	kernel.asm	/^vector117:$/;"	l
vector117	vectors.S	/^vector117:$/;"	l
vector118	kernel.asm	/^vector118:$/;"	l
vector118	vectors.S	/^vector118:$/;"	l
vector119	kernel.asm	/^vector119:$/;"	l
vector119	vectors.S	/^vector119:$/;"	l
vector12	kernel.asm	/^vector12:$/;"	l
vector12	vectors.S	/^vector12:$/;"	l
vector120	kernel.asm	/^vector120:$/;"	l
vector120	vectors.S	/^vector120:$/;"	l
vector121	kernel.asm	/^vector121:$/;"	l
vector121	vectors.S	/^vector121:$/;"	l
vector122	kernel.asm	/^vector122:$/;"	l
vector122	vectors.S	/^vector122:$/;"	l
vector123	kernel.asm	/^vector123:$/;"	l
vector123	vectors.S	/^vector123:$/;"	l
vector124	kernel.asm	/^vector124:$/;"	l
vector124	vectors.S	/^vector124:$/;"	l
vector125	kernel.asm	/^vector125:$/;"	l
vector125	vectors.S	/^vector125:$/;"	l
vector126	kernel.asm	/^vector126:$/;"	l
vector126	vectors.S	/^vector126:$/;"	l
vector127	kernel.asm	/^vector127:$/;"	l
vector127	vectors.S	/^vector127:$/;"	l
vector128	kernel.asm	/^vector128:$/;"	l
vector128	vectors.S	/^vector128:$/;"	l
vector129	kernel.asm	/^vector129:$/;"	l
vector129	vectors.S	/^vector129:$/;"	l
vector13	kernel.asm	/^vector13:$/;"	l
vector13	vectors.S	/^vector13:$/;"	l
vector130	kernel.asm	/^vector130:$/;"	l
vector130	vectors.S	/^vector130:$/;"	l
vector131	kernel.asm	/^vector131:$/;"	l
vector131	vectors.S	/^vector131:$/;"	l
vector132	kernel.asm	/^vector132:$/;"	l
vector132	vectors.S	/^vector132:$/;"	l
vector133	kernel.asm	/^vector133:$/;"	l
vector133	vectors.S	/^vector133:$/;"	l
vector134	kernel.asm	/^vector134:$/;"	l
vector134	vectors.S	/^vector134:$/;"	l
vector135	kernel.asm	/^vector135:$/;"	l
vector135	vectors.S	/^vector135:$/;"	l
vector136	kernel.asm	/^vector136:$/;"	l
vector136	vectors.S	/^vector136:$/;"	l
vector137	kernel.asm	/^vector137:$/;"	l
vector137	vectors.S	/^vector137:$/;"	l
vector138	kernel.asm	/^vector138:$/;"	l
vector138	vectors.S	/^vector138:$/;"	l
vector139	kernel.asm	/^vector139:$/;"	l
vector139	vectors.S	/^vector139:$/;"	l
vector14	kernel.asm	/^vector14:$/;"	l
vector14	vectors.S	/^vector14:$/;"	l
vector140	kernel.asm	/^vector140:$/;"	l
vector140	vectors.S	/^vector140:$/;"	l
vector141	kernel.asm	/^vector141:$/;"	l
vector141	vectors.S	/^vector141:$/;"	l
vector142	kernel.asm	/^vector142:$/;"	l
vector142	vectors.S	/^vector142:$/;"	l
vector143	kernel.asm	/^vector143:$/;"	l
vector143	vectors.S	/^vector143:$/;"	l
vector144	kernel.asm	/^vector144:$/;"	l
vector144	vectors.S	/^vector144:$/;"	l
vector145	kernel.asm	/^vector145:$/;"	l
vector145	vectors.S	/^vector145:$/;"	l
vector146	kernel.asm	/^vector146:$/;"	l
vector146	vectors.S	/^vector146:$/;"	l
vector147	kernel.asm	/^vector147:$/;"	l
vector147	vectors.S	/^vector147:$/;"	l
vector148	kernel.asm	/^vector148:$/;"	l
vector148	vectors.S	/^vector148:$/;"	l
vector149	kernel.asm	/^vector149:$/;"	l
vector149	vectors.S	/^vector149:$/;"	l
vector15	kernel.asm	/^vector15:$/;"	l
vector15	vectors.S	/^vector15:$/;"	l
vector150	kernel.asm	/^vector150:$/;"	l
vector150	vectors.S	/^vector150:$/;"	l
vector151	kernel.asm	/^vector151:$/;"	l
vector151	vectors.S	/^vector151:$/;"	l
vector152	kernel.asm	/^vector152:$/;"	l
vector152	vectors.S	/^vector152:$/;"	l
vector153	kernel.asm	/^vector153:$/;"	l
vector153	vectors.S	/^vector153:$/;"	l
vector154	kernel.asm	/^vector154:$/;"	l
vector154	vectors.S	/^vector154:$/;"	l
vector155	kernel.asm	/^vector155:$/;"	l
vector155	vectors.S	/^vector155:$/;"	l
vector156	kernel.asm	/^vector156:$/;"	l
vector156	vectors.S	/^vector156:$/;"	l
vector157	kernel.asm	/^vector157:$/;"	l
vector157	vectors.S	/^vector157:$/;"	l
vector158	kernel.asm	/^vector158:$/;"	l
vector158	vectors.S	/^vector158:$/;"	l
vector159	kernel.asm	/^vector159:$/;"	l
vector159	vectors.S	/^vector159:$/;"	l
vector16	kernel.asm	/^vector16:$/;"	l
vector16	vectors.S	/^vector16:$/;"	l
vector160	kernel.asm	/^vector160:$/;"	l
vector160	vectors.S	/^vector160:$/;"	l
vector161	kernel.asm	/^vector161:$/;"	l
vector161	vectors.S	/^vector161:$/;"	l
vector162	kernel.asm	/^vector162:$/;"	l
vector162	vectors.S	/^vector162:$/;"	l
vector163	kernel.asm	/^vector163:$/;"	l
vector163	vectors.S	/^vector163:$/;"	l
vector164	kernel.asm	/^vector164:$/;"	l
vector164	vectors.S	/^vector164:$/;"	l
vector165	kernel.asm	/^vector165:$/;"	l
vector165	vectors.S	/^vector165:$/;"	l
vector166	kernel.asm	/^vector166:$/;"	l
vector166	vectors.S	/^vector166:$/;"	l
vector167	kernel.asm	/^vector167:$/;"	l
vector167	vectors.S	/^vector167:$/;"	l
vector168	kernel.asm	/^vector168:$/;"	l
vector168	vectors.S	/^vector168:$/;"	l
vector169	kernel.asm	/^vector169:$/;"	l
vector169	vectors.S	/^vector169:$/;"	l
vector17	kernel.asm	/^vector17:$/;"	l
vector17	vectors.S	/^vector17:$/;"	l
vector170	kernel.asm	/^vector170:$/;"	l
vector170	vectors.S	/^vector170:$/;"	l
vector171	kernel.asm	/^vector171:$/;"	l
vector171	vectors.S	/^vector171:$/;"	l
vector172	kernel.asm	/^vector172:$/;"	l
vector172	vectors.S	/^vector172:$/;"	l
vector173	kernel.asm	/^vector173:$/;"	l
vector173	vectors.S	/^vector173:$/;"	l
vector174	kernel.asm	/^vector174:$/;"	l
vector174	vectors.S	/^vector174:$/;"	l
vector175	kernel.asm	/^vector175:$/;"	l
vector175	vectors.S	/^vector175:$/;"	l
vector176	kernel.asm	/^vector176:$/;"	l
vector176	vectors.S	/^vector176:$/;"	l
vector177	kernel.asm	/^vector177:$/;"	l
vector177	vectors.S	/^vector177:$/;"	l
vector178	kernel.asm	/^vector178:$/;"	l
vector178	vectors.S	/^vector178:$/;"	l
vector179	kernel.asm	/^vector179:$/;"	l
vector179	vectors.S	/^vector179:$/;"	l
vector18	kernel.asm	/^vector18:$/;"	l
vector18	vectors.S	/^vector18:$/;"	l
vector180	kernel.asm	/^vector180:$/;"	l
vector180	vectors.S	/^vector180:$/;"	l
vector181	kernel.asm	/^vector181:$/;"	l
vector181	vectors.S	/^vector181:$/;"	l
vector182	kernel.asm	/^vector182:$/;"	l
vector182	vectors.S	/^vector182:$/;"	l
vector183	kernel.asm	/^vector183:$/;"	l
vector183	vectors.S	/^vector183:$/;"	l
vector184	kernel.asm	/^vector184:$/;"	l
vector184	vectors.S	/^vector184:$/;"	l
vector185	kernel.asm	/^vector185:$/;"	l
vector185	vectors.S	/^vector185:$/;"	l
vector186	kernel.asm	/^vector186:$/;"	l
vector186	vectors.S	/^vector186:$/;"	l
vector187	kernel.asm	/^vector187:$/;"	l
vector187	vectors.S	/^vector187:$/;"	l
vector188	kernel.asm	/^vector188:$/;"	l
vector188	vectors.S	/^vector188:$/;"	l
vector189	kernel.asm	/^vector189:$/;"	l
vector189	vectors.S	/^vector189:$/;"	l
vector19	kernel.asm	/^vector19:$/;"	l
vector19	vectors.S	/^vector19:$/;"	l
vector190	kernel.asm	/^vector190:$/;"	l
vector190	vectors.S	/^vector190:$/;"	l
vector191	kernel.asm	/^vector191:$/;"	l
vector191	vectors.S	/^vector191:$/;"	l
vector192	kernel.asm	/^vector192:$/;"	l
vector192	vectors.S	/^vector192:$/;"	l
vector193	kernel.asm	/^vector193:$/;"	l
vector193	vectors.S	/^vector193:$/;"	l
vector194	kernel.asm	/^vector194:$/;"	l
vector194	vectors.S	/^vector194:$/;"	l
vector195	kernel.asm	/^vector195:$/;"	l
vector195	vectors.S	/^vector195:$/;"	l
vector196	kernel.asm	/^vector196:$/;"	l
vector196	vectors.S	/^vector196:$/;"	l
vector197	kernel.asm	/^vector197:$/;"	l
vector197	vectors.S	/^vector197:$/;"	l
vector198	kernel.asm	/^vector198:$/;"	l
vector198	vectors.S	/^vector198:$/;"	l
vector199	kernel.asm	/^vector199:$/;"	l
vector199	vectors.S	/^vector199:$/;"	l
vector2	kernel.asm	/^vector2:$/;"	l
vector2	vectors.S	/^vector2:$/;"	l
vector20	kernel.asm	/^vector20:$/;"	l
vector20	vectors.S	/^vector20:$/;"	l
vector200	kernel.asm	/^vector200:$/;"	l
vector200	vectors.S	/^vector200:$/;"	l
vector201	kernel.asm	/^vector201:$/;"	l
vector201	vectors.S	/^vector201:$/;"	l
vector202	kernel.asm	/^vector202:$/;"	l
vector202	vectors.S	/^vector202:$/;"	l
vector203	kernel.asm	/^vector203:$/;"	l
vector203	vectors.S	/^vector203:$/;"	l
vector204	kernel.asm	/^vector204:$/;"	l
vector204	vectors.S	/^vector204:$/;"	l
vector205	kernel.asm	/^vector205:$/;"	l
vector205	vectors.S	/^vector205:$/;"	l
vector206	kernel.asm	/^vector206:$/;"	l
vector206	vectors.S	/^vector206:$/;"	l
vector207	kernel.asm	/^vector207:$/;"	l
vector207	vectors.S	/^vector207:$/;"	l
vector208	kernel.asm	/^vector208:$/;"	l
vector208	vectors.S	/^vector208:$/;"	l
vector209	kernel.asm	/^vector209:$/;"	l
vector209	vectors.S	/^vector209:$/;"	l
vector21	kernel.asm	/^vector21:$/;"	l
vector21	vectors.S	/^vector21:$/;"	l
vector210	kernel.asm	/^vector210:$/;"	l
vector210	vectors.S	/^vector210:$/;"	l
vector211	kernel.asm	/^vector211:$/;"	l
vector211	vectors.S	/^vector211:$/;"	l
vector212	kernel.asm	/^vector212:$/;"	l
vector212	vectors.S	/^vector212:$/;"	l
vector213	kernel.asm	/^vector213:$/;"	l
vector213	vectors.S	/^vector213:$/;"	l
vector214	kernel.asm	/^vector214:$/;"	l
vector214	vectors.S	/^vector214:$/;"	l
vector215	kernel.asm	/^vector215:$/;"	l
vector215	vectors.S	/^vector215:$/;"	l
vector216	kernel.asm	/^vector216:$/;"	l
vector216	vectors.S	/^vector216:$/;"	l
vector217	kernel.asm	/^vector217:$/;"	l
vector217	vectors.S	/^vector217:$/;"	l
vector218	kernel.asm	/^vector218:$/;"	l
vector218	vectors.S	/^vector218:$/;"	l
vector219	kernel.asm	/^vector219:$/;"	l
vector219	vectors.S	/^vector219:$/;"	l
vector22	kernel.asm	/^vector22:$/;"	l
vector22	vectors.S	/^vector22:$/;"	l
vector220	kernel.asm	/^vector220:$/;"	l
vector220	vectors.S	/^vector220:$/;"	l
vector221	kernel.asm	/^vector221:$/;"	l
vector221	vectors.S	/^vector221:$/;"	l
vector222	kernel.asm	/^vector222:$/;"	l
vector222	vectors.S	/^vector222:$/;"	l
vector223	kernel.asm	/^vector223:$/;"	l
vector223	vectors.S	/^vector223:$/;"	l
vector224	kernel.asm	/^vector224:$/;"	l
vector224	vectors.S	/^vector224:$/;"	l
vector225	kernel.asm	/^vector225:$/;"	l
vector225	vectors.S	/^vector225:$/;"	l
vector226	kernel.asm	/^vector226:$/;"	l
vector226	vectors.S	/^vector226:$/;"	l
vector227	kernel.asm	/^vector227:$/;"	l
vector227	vectors.S	/^vector227:$/;"	l
vector228	kernel.asm	/^vector228:$/;"	l
vector228	vectors.S	/^vector228:$/;"	l
vector229	kernel.asm	/^vector229:$/;"	l
vector229	vectors.S	/^vector229:$/;"	l
vector23	kernel.asm	/^vector23:$/;"	l
vector23	vectors.S	/^vector23:$/;"	l
vector230	kernel.asm	/^vector230:$/;"	l
vector230	vectors.S	/^vector230:$/;"	l
vector231	kernel.asm	/^vector231:$/;"	l
vector231	vectors.S	/^vector231:$/;"	l
vector232	kernel.asm	/^vector232:$/;"	l
vector232	vectors.S	/^vector232:$/;"	l
vector233	kernel.asm	/^vector233:$/;"	l
vector233	vectors.S	/^vector233:$/;"	l
vector234	kernel.asm	/^vector234:$/;"	l
vector234	vectors.S	/^vector234:$/;"	l
vector235	kernel.asm	/^vector235:$/;"	l
vector235	vectors.S	/^vector235:$/;"	l
vector236	kernel.asm	/^vector236:$/;"	l
vector236	vectors.S	/^vector236:$/;"	l
vector237	kernel.asm	/^vector237:$/;"	l
vector237	vectors.S	/^vector237:$/;"	l
vector238	kernel.asm	/^vector238:$/;"	l
vector238	vectors.S	/^vector238:$/;"	l
vector239	kernel.asm	/^vector239:$/;"	l
vector239	vectors.S	/^vector239:$/;"	l
vector24	kernel.asm	/^vector24:$/;"	l
vector24	vectors.S	/^vector24:$/;"	l
vector240	kernel.asm	/^vector240:$/;"	l
vector240	vectors.S	/^vector240:$/;"	l
vector241	kernel.asm	/^vector241:$/;"	l
vector241	vectors.S	/^vector241:$/;"	l
vector242	kernel.asm	/^vector242:$/;"	l
vector242	vectors.S	/^vector242:$/;"	l
vector243	kernel.asm	/^vector243:$/;"	l
vector243	vectors.S	/^vector243:$/;"	l
vector244	kernel.asm	/^vector244:$/;"	l
vector244	vectors.S	/^vector244:$/;"	l
vector245	kernel.asm	/^vector245:$/;"	l
vector245	vectors.S	/^vector245:$/;"	l
vector246	kernel.asm	/^vector246:$/;"	l
vector246	vectors.S	/^vector246:$/;"	l
vector247	kernel.asm	/^vector247:$/;"	l
vector247	vectors.S	/^vector247:$/;"	l
vector248	kernel.asm	/^vector248:$/;"	l
vector248	vectors.S	/^vector248:$/;"	l
vector249	kernel.asm	/^vector249:$/;"	l
vector249	vectors.S	/^vector249:$/;"	l
vector25	kernel.asm	/^vector25:$/;"	l
vector25	vectors.S	/^vector25:$/;"	l
vector250	kernel.asm	/^vector250:$/;"	l
vector250	vectors.S	/^vector250:$/;"	l
vector251	kernel.asm	/^vector251:$/;"	l
vector251	vectors.S	/^vector251:$/;"	l
vector252	kernel.asm	/^vector252:$/;"	l
vector252	vectors.S	/^vector252:$/;"	l
vector253	kernel.asm	/^vector253:$/;"	l
vector253	vectors.S	/^vector253:$/;"	l
vector254	kernel.asm	/^vector254:$/;"	l
vector254	vectors.S	/^vector254:$/;"	l
vector255	kernel.asm	/^vector255:$/;"	l
vector255	vectors.S	/^vector255:$/;"	l
vector26	kernel.asm	/^vector26:$/;"	l
vector26	vectors.S	/^vector26:$/;"	l
vector27	kernel.asm	/^vector27:$/;"	l
vector27	vectors.S	/^vector27:$/;"	l
vector28	kernel.asm	/^vector28:$/;"	l
vector28	vectors.S	/^vector28:$/;"	l
vector29	kernel.asm	/^vector29:$/;"	l
vector29	vectors.S	/^vector29:$/;"	l
vector3	kernel.asm	/^vector3:$/;"	l
vector3	vectors.S	/^vector3:$/;"	l
vector30	kernel.asm	/^vector30:$/;"	l
vector30	vectors.S	/^vector30:$/;"	l
vector31	kernel.asm	/^vector31:$/;"	l
vector31	vectors.S	/^vector31:$/;"	l
vector32	kernel.asm	/^vector32:$/;"	l
vector32	vectors.S	/^vector32:$/;"	l
vector33	kernel.asm	/^vector33:$/;"	l
vector33	vectors.S	/^vector33:$/;"	l
vector34	kernel.asm	/^vector34:$/;"	l
vector34	vectors.S	/^vector34:$/;"	l
vector35	kernel.asm	/^vector35:$/;"	l
vector35	vectors.S	/^vector35:$/;"	l
vector36	kernel.asm	/^vector36:$/;"	l
vector36	vectors.S	/^vector36:$/;"	l
vector37	kernel.asm	/^vector37:$/;"	l
vector37	vectors.S	/^vector37:$/;"	l
vector38	kernel.asm	/^vector38:$/;"	l
vector38	vectors.S	/^vector38:$/;"	l
vector39	kernel.asm	/^vector39:$/;"	l
vector39	vectors.S	/^vector39:$/;"	l
vector4	kernel.asm	/^vector4:$/;"	l
vector4	vectors.S	/^vector4:$/;"	l
vector40	kernel.asm	/^vector40:$/;"	l
vector40	vectors.S	/^vector40:$/;"	l
vector41	kernel.asm	/^vector41:$/;"	l
vector41	vectors.S	/^vector41:$/;"	l
vector42	kernel.asm	/^vector42:$/;"	l
vector42	vectors.S	/^vector42:$/;"	l
vector43	kernel.asm	/^vector43:$/;"	l
vector43	vectors.S	/^vector43:$/;"	l
vector44	kernel.asm	/^vector44:$/;"	l
vector44	vectors.S	/^vector44:$/;"	l
vector45	kernel.asm	/^vector45:$/;"	l
vector45	vectors.S	/^vector45:$/;"	l
vector46	kernel.asm	/^vector46:$/;"	l
vector46	vectors.S	/^vector46:$/;"	l
vector47	kernel.asm	/^vector47:$/;"	l
vector47	vectors.S	/^vector47:$/;"	l
vector48	kernel.asm	/^vector48:$/;"	l
vector48	vectors.S	/^vector48:$/;"	l
vector49	kernel.asm	/^vector49:$/;"	l
vector49	vectors.S	/^vector49:$/;"	l
vector5	kernel.asm	/^vector5:$/;"	l
vector5	vectors.S	/^vector5:$/;"	l
vector50	kernel.asm	/^vector50:$/;"	l
vector50	vectors.S	/^vector50:$/;"	l
vector51	kernel.asm	/^vector51:$/;"	l
vector51	vectors.S	/^vector51:$/;"	l
vector52	kernel.asm	/^vector52:$/;"	l
vector52	vectors.S	/^vector52:$/;"	l
vector53	kernel.asm	/^vector53:$/;"	l
vector53	vectors.S	/^vector53:$/;"	l
vector54	kernel.asm	/^vector54:$/;"	l
vector54	vectors.S	/^vector54:$/;"	l
vector55	kernel.asm	/^vector55:$/;"	l
vector55	vectors.S	/^vector55:$/;"	l
vector56	kernel.asm	/^vector56:$/;"	l
vector56	vectors.S	/^vector56:$/;"	l
vector57	kernel.asm	/^vector57:$/;"	l
vector57	vectors.S	/^vector57:$/;"	l
vector58	kernel.asm	/^vector58:$/;"	l
vector58	vectors.S	/^vector58:$/;"	l
vector59	kernel.asm	/^vector59:$/;"	l
vector59	vectors.S	/^vector59:$/;"	l
vector6	kernel.asm	/^vector6:$/;"	l
vector6	vectors.S	/^vector6:$/;"	l
vector60	kernel.asm	/^vector60:$/;"	l
vector60	vectors.S	/^vector60:$/;"	l
vector61	kernel.asm	/^vector61:$/;"	l
vector61	vectors.S	/^vector61:$/;"	l
vector62	kernel.asm	/^vector62:$/;"	l
vector62	vectors.S	/^vector62:$/;"	l
vector63	kernel.asm	/^vector63:$/;"	l
vector63	vectors.S	/^vector63:$/;"	l
vector64	kernel.asm	/^vector64:$/;"	l
vector64	vectors.S	/^vector64:$/;"	l
vector65	kernel.asm	/^vector65:$/;"	l
vector65	vectors.S	/^vector65:$/;"	l
vector66	kernel.asm	/^vector66:$/;"	l
vector66	vectors.S	/^vector66:$/;"	l
vector67	kernel.asm	/^vector67:$/;"	l
vector67	vectors.S	/^vector67:$/;"	l
vector68	kernel.asm	/^vector68:$/;"	l
vector68	vectors.S	/^vector68:$/;"	l
vector69	kernel.asm	/^vector69:$/;"	l
vector69	vectors.S	/^vector69:$/;"	l
vector7	kernel.asm	/^vector7:$/;"	l
vector7	vectors.S	/^vector7:$/;"	l
vector70	kernel.asm	/^vector70:$/;"	l
vector70	vectors.S	/^vector70:$/;"	l
vector71	kernel.asm	/^vector71:$/;"	l
vector71	vectors.S	/^vector71:$/;"	l
vector72	kernel.asm	/^vector72:$/;"	l
vector72	vectors.S	/^vector72:$/;"	l
vector73	kernel.asm	/^vector73:$/;"	l
vector73	vectors.S	/^vector73:$/;"	l
vector74	kernel.asm	/^vector74:$/;"	l
vector74	vectors.S	/^vector74:$/;"	l
vector75	kernel.asm	/^vector75:$/;"	l
vector75	vectors.S	/^vector75:$/;"	l
vector76	kernel.asm	/^vector76:$/;"	l
vector76	vectors.S	/^vector76:$/;"	l
vector77	kernel.asm	/^vector77:$/;"	l
vector77	vectors.S	/^vector77:$/;"	l
vector78	kernel.asm	/^vector78:$/;"	l
vector78	vectors.S	/^vector78:$/;"	l
vector79	kernel.asm	/^vector79:$/;"	l
vector79	vectors.S	/^vector79:$/;"	l
vector8	kernel.asm	/^vector8:$/;"	l
vector8	vectors.S	/^vector8:$/;"	l
vector80	kernel.asm	/^vector80:$/;"	l
vector80	vectors.S	/^vector80:$/;"	l
vector81	kernel.asm	/^vector81:$/;"	l
vector81	vectors.S	/^vector81:$/;"	l
vector82	kernel.asm	/^vector82:$/;"	l
vector82	vectors.S	/^vector82:$/;"	l
vector83	kernel.asm	/^vector83:$/;"	l
vector83	vectors.S	/^vector83:$/;"	l
vector84	kernel.asm	/^vector84:$/;"	l
vector84	vectors.S	/^vector84:$/;"	l
vector85	kernel.asm	/^vector85:$/;"	l
vector85	vectors.S	/^vector85:$/;"	l
vector86	kernel.asm	/^vector86:$/;"	l
vector86	vectors.S	/^vector86:$/;"	l
vector87	kernel.asm	/^vector87:$/;"	l
vector87	vectors.S	/^vector87:$/;"	l
vector88	kernel.asm	/^vector88:$/;"	l
vector88	vectors.S	/^vector88:$/;"	l
vector89	kernel.asm	/^vector89:$/;"	l
vector89	vectors.S	/^vector89:$/;"	l
vector9	kernel.asm	/^vector9:$/;"	l
vector9	vectors.S	/^vector9:$/;"	l
vector90	kernel.asm	/^vector90:$/;"	l
vector90	vectors.S	/^vector90:$/;"	l
vector91	kernel.asm	/^vector91:$/;"	l
vector91	vectors.S	/^vector91:$/;"	l
vector92	kernel.asm	/^vector92:$/;"	l
vector92	vectors.S	/^vector92:$/;"	l
vector93	kernel.asm	/^vector93:$/;"	l
vector93	vectors.S	/^vector93:$/;"	l
vector94	kernel.asm	/^vector94:$/;"	l
vector94	vectors.S	/^vector94:$/;"	l
vector95	kernel.asm	/^vector95:$/;"	l
vector95	vectors.S	/^vector95:$/;"	l
vector96	kernel.asm	/^vector96:$/;"	l
vector96	vectors.S	/^vector96:$/;"	l
vector97	kernel.asm	/^vector97:$/;"	l
vector97	vectors.S	/^vector97:$/;"	l
vector98	kernel.asm	/^vector98:$/;"	l
vector98	vectors.S	/^vector98:$/;"	l
vector99	kernel.asm	/^vector99:$/;"	l
vector99	vectors.S	/^vector99:$/;"	l
vectors	vectors.S	/^vectors:$/;"	l
version	elf.h	/^  uint version;$/;"	m	struct:elfhdr
version	mp.h	/^  uchar version;                \/\/ I\/O APIC version$/;"	m	struct:mpioapic
version	mp.h	/^  uchar version;                \/\/ [14]$/;"	m	struct:mpconf
version	mp.h	/^  uchar version;                \/\/ local APIC verison$/;"	m	struct:mpproc
virt	vm.c	/^  void *virt;$/;"	m	struct:kmap	file:
void	bootblock.asm	/^void readseg(uchar*, uint, uint);$/;"	l
void	bootblock.asm	/^void$/;"	l
void	cat.asm	/^void$/;"	l
void	echo.asm	/^void$/;"	l
void	forktest.asm	/^void$/;"	l
void	grep.asm	/^void$/;"	l
void	init.asm	/^void$/;"	l
void	kernel.asm	/^void$/;"	l
void	kill.asm	/^void$/;"	l
void	ln.asm	/^void$/;"	l
void	ls.asm	/^void$/;"	l
void	mkdir.asm	/^void$/;"	l
void	rm.asm	/^void$/;"	l
void	sh.asm	/^void$/;"	l
void	stressfs.asm	/^void$/;"	l
void	usertests.asm	/^void dirtest(void)$/;"	l
void	usertests.asm	/^void$/;"	l
void	wc.asm	/^void$/;"	l
void	zombie.asm	/^void$/;"	l
volatile	kernel.asm	/^volatile uint *lapic;  \/\/ Initialized in mp.c$/;"	l
w	console.c	/^  uint w;  \/\/ Write index$/;"	m	struct:__anon7	file:
wait	proc.c	/^wait(void)$/;"	f
waitdisk	bootmain.c	/^waitdisk(void)$/;"	f
wakeup	proc.c	/^wakeup(void *chan)$/;"	f
wakeup1	proc.c	/^wakeup1(void *chan)$/;"	f	file:
walkpgdir	vm.c	/^walkpgdir(pde_t *pgdir, const void *va, int alloc)$/;"	f	file:
wc	wc.c	/^wc(int fd, char *name)$/;"	f
whitespace	sh.c	/^char whitespace[] = " \\t\\r\\n\\v";$/;"	v
winode	mkfs.c	/^winode(uint inum, struct dinode *ip)$/;"	f
writable	file.h	/^  char writable;$/;"	m	struct:file
write	file.h	/^  int (*write)(struct inode*, char*, int);$/;"	m	struct:devsw
write_head	log.c	/^write_head(void)$/;"	f	file:
writefile	cuth	/^sub writefile($@){$/;"	s
writei	fs.c	/^writei(struct inode *ip, char *src, uint off, uint n)$/;"	f
writeopen	pipe.c	/^  int writeopen;  \/\/ write fd is still open$/;"	m	struct:pipe	file:
writetest	usertests.c	/^writetest(void)$/;"	f
writetest1	usertests.c	/^writetest1(void)$/;"	f
wrv	kernel.asm	/^  wrv = (ushort*)P2V((0x40<<4 | 0x67));  \/\/ Warm reset vector$/;"	d
wsect	mkfs.c	/^wsect(uint sec, void *buf)$/;"	f
x	cat.asm	/^    x = -xx;$/;"	d
x	cat.asm	/^    x = xx;$/;"	d
x	echo.asm	/^    x = -xx;$/;"	d
x	echo.asm	/^    x = xx;$/;"	d
x	grep.asm	/^    x = -xx;$/;"	d
x	grep.asm	/^    x = xx;$/;"	d
x	init.asm	/^    x = -xx;$/;"	d
x	init.asm	/^    x = xx;$/;"	d
x	kernel.asm	/^    x = -xx;$/;"	d
x	kernel.asm	/^    x = xx;$/;"	d
x	kill.asm	/^    x = -xx;$/;"	d
x	kill.asm	/^    x = xx;$/;"	d
x	ln.asm	/^    x = -xx;$/;"	d
x	ln.asm	/^    x = xx;$/;"	d
x	ls.asm	/^    x = -xx;$/;"	d
x	ls.asm	/^    x = xx;$/;"	d
x	mkdir.asm	/^    x = -xx;$/;"	d
x	mkdir.asm	/^    x = xx;$/;"	d
x	rm.asm	/^    x = -xx;$/;"	d
x	rm.asm	/^    x = xx;$/;"	d
x	sh.asm	/^    x = -xx;$/;"	d
x	sh.asm	/^    x = xx;$/;"	d
x	stressfs.asm	/^    x = -xx;$/;"	d
x	stressfs.asm	/^    x = xx;$/;"	d
x	umalloc.c	/^  Align x;$/;"	m	union:header	file:
x	usertests.asm	/^    x = -xx;$/;"	d
x	usertests.asm	/^    x = x * 1103515245 + 12345;$/;"	d
x	usertests.asm	/^    x = xx;$/;"	d
x	wc.asm	/^    x = -xx;$/;"	d
x	wc.asm	/^    x = xx;$/;"	d
x	zombie.asm	/^    x = -xx;$/;"	d
x	zombie.asm	/^    x = xx;$/;"	d
xchecksum	mp.h	/^  uchar xchecksum;              \/\/ extended table checksum$/;"	m	struct:mpconf
xchg	x86.h	/^xchg(volatile uint *addr, uint newval)$/;"	f
xint	mkfs.c	/^xint(uint x)$/;"	f
xlength	mp.h	/^  ushort xlength;               \/\/ extended table length$/;"	m	struct:mpconf
xshort	mkfs.c	/^xshort(ushort x)$/;"	f
xticks	kernel.asm	/^  xticks = ticks;$/;"	d
yield	proc.c	/^yield(void)$/;"	f
zeroes	mkfs.c	/^char zeroes[512];$/;"	v
